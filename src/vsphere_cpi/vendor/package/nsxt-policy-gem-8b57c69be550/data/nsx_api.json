{
    "info": {
        "version": "2.3.0.0.0",
        "description": "VMware NSX-T Manager REST API",
        "title": "NSX-T Manager API"
    },
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic",
            "description": "HTTP Basic Authentication"
        }
    },
    "host": "nsxmanager.your.domain",
    "security": [
        {
            "BasicAuth": []
        }
    ],
    "swagger": "2.0",
    "basePath": "/api/v1",
    "version": "2.3.0.0.0",
    "paths": {
        "/hpm/features/{feature-stack-name}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FeatureStackCollectionConfiguration"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Apply the data collection configuration for the specified\nfeature stack.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "feature-stack-name",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FeatureStackCollectionConfiguration"
                        },
                        "required": true,
                        "name": "FeatureStackCollectionConfiguration",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aggregation Service"
                ],
                "summary": "Update health performance monitoring configuration for feature stack",
                "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateFeatureStackConfiguration"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FeatureStackCollectionConfiguration"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the complete set of client type data collection\nconfiguration records for the specified feature stack.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "feature-stack-name",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aggregation Service"
                ],
                "summary": "Read health performance monitoring configuration for feature stack",
                "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetFeatureStackConfiguration"
            }
        },
        "/logical-switches/{lswitch-id}/vtep-table": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VtepListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the virtual tunnel endpoint table of a specified logical switch\nfrom the given transport node if a transport node id is given in the\nquery parameter, from the Central Controller Plane.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lswitch-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get virtual tunnel endpoint table for logical switch of the given\nID (lswitch-id)\n",
                "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalSwitchVtepTable"
            }
        },
        "/app-discovery/sessions/{session-id}/installed-apps": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppInfoListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the details of the installed apps for the app profile ID in that session\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "name": "app_profile_id",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "vm_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Returns the details of the installed apps for the app profile ID in that session",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppDiscoverySessionInstalledApps"
            }
        },
        "/mac-sets/{mac-set-id}/members/{mac-address}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Remove an individual MAC address from a MACSet\n",
                "parameters": [
                    {
                        "description": "MACSet Id",
                        "required": true,
                        "type": "string",
                        "name": "mac-set-id",
                        "in": "path"
                    },
                    {
                        "description": "MAC address to be removed",
                        "required": true,
                        "type": "string",
                        "name": "mac-address",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Remove a MAC address from given MACSet",
                "x-vmw-nsx-module": "MACSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "RemoveMACAddress"
            }
        },
        "/ipfix-obs-points/switch-global": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixObsPointConfig"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deprecated - Please use /ipfix-profiles/<ipfix-profile-id> for switch IPFIX\nprofile and /ipfix-collector-profiles/<ipfix-collector-profile-id> for IPFIX\ncollector profile.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IpfixObsPointConfig"
                        },
                        "required": true,
                        "name": "IpfixObsPointConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Update global switch IPFIX export configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateSwitchIpfixConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixObsPointConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deprecated - Please use /ipfix-profiles/<ipfix-profile-id> for switch IPFIX\nprofile and /ipfix-collector-profiles/<ipfix-collector-profile-id> for IPFIX\ncollector profile.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Read global switch IPFIX export configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetSwitchIpfixConfig"
            }
        },
        "/logical-routers/{logical-router-id}/routing/static-routes": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StaticRoute"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new static route on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/StaticRoute"
                        },
                        "required": true,
                        "name": "StaticRoute",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Add Static Routes on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddStaticRoute"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StaticRouteListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about configured static routes, including the\nnetwork address and next hops for each static route.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Paginated List of Static Routes",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListStaticRoutes"
            }
        },
        "/cluster/nodes/{node-id}/network/interfaces": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInterfacePropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the number of interfaces on the node and detailed\ninformation about each interface. Interface information includes MTU,\nbroadcast and host IP addresses, link and admin status, MAC address, network\nmask, and the IP configuration method (static or DHCP).\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List the specified node's Network Interfaces",
                "x-vmw-nsx-module": "ApplianceStats",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListClusterNodeInterfaces"
            }
        },
        "/node/services/syslog/exporters": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/NodeSyslogExporterProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a rule for exporting syslog information to a specified server. The\nrequired parameters are the rule name (exporter_name); severity level\n(emerg, alert, crit, and so on); transmission protocol (TCP or UDP); and\nserver IP address or hostname. The optional parameters are the syslog port\nnumber, which can be 1 through 65,535 (514, by default); facility level to\nuse when logging messages to syslog (kern, user, mail, and so on); and\nmessage IDs (msgids), which identify the types of messages to export.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeSyslogExporterProperties"
                        },
                        "required": true,
                        "name": "NodeSyslogExporterProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Add node syslog exporter",
                "x-vmw-nsx-module": "NodeSyslogExporters",
                "consumes": [
                    "application/json"
                ],
                "operationId": "PostNodeSyslogExporter"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeSyslogExporterPropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the collection of registered syslog exporter rules, if any. The\nrules specify the collector IP address and port, and the protocol to use.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List node syslog exporters",
                "x-vmw-nsx-module": "NodeSyslogExporters",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNodeSyslogExporters"
            }
        },
        "/upgrade/nodes-summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeSummaryList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get summary of nodes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get summary of nodes",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNodesSummary"
            }
        },
        "/traceflows/{traceflow-id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete the Traceflow round",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "traceflow-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Delete the Traceflow round",
                "x-vmw-nsx-module": "Traceflow",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteTraceflow"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Traceflow"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the Traceflow round status and result summary",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "traceflow-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get the Traceflow round status and result summary",
                "x-vmw-nsx-module": "Traceflow",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTraceflow"
            }
        },
        "/vpn/l2vpn/sessions/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VPNSessionSummary"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Load all the existing L2VPN sessions and return the status summary of all L2VPN sessions.",
                "parameters": [
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get status summary of all existing L2VPN sessions.",
                "x-vmw-nsx-module": "L2VPNStatistics",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetL2VPNSessionSummary"
            }
        },
        "/node/services/cm-inventory?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the manager service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the manager service",
                "x-vmw-nsx-module": "NodeCminventoryService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateCminventoryServiceActionStop"
            }
        },
        "/logical-routers": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouter"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a logical router. The required parameters are router_type (TIER0 or\nTIER1) and edge_cluster_id (TIER0 only). Optional parameters include\ninternal and external transit network addresses.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalRouter"
                        },
                        "required": true,
                        "name": "LogicalRouter",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Create a Logical Router",
                "x-vmw-nsx-module": "LogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLogicalRouter"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all logical routers, including the UUID, internal\nand external transit network addresses, and the router type (TIER0 or\nTIER1). You can get information for only TIER0 routers or only the TIER1\nrouters by including the router_type query parameter.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "enum": [
                            "TIER0",
                            "TIER1"
                        ],
                        "description": "Type of Logical Router",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "router_type"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "List Logical Routers",
                "x-vmw-nsx-module": "LogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLogicalRouters"
            }
        },
        "/logical-routers/{logical-router-id}/routing/forwarding-table": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterRouteTable"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the FIB for the logical router on a node of the given transport-node-id.\nQuery parameter \"transport_node_id=<transport-node-id>\" is required.\nTo filter the result by network address, paramter \"network_prefix=<a.b.c.d/mask>\"\nneeds to be specified.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "IPv4 CIDR Block",
                        "format": "ipv4-cidr-block",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "network_prefix"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": true,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get FIB table on a specified node for a logical router",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterForwardingTable"
            }
        },
        "/logical-routers/{logical-router-id}/routing/route-maps": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RouteMap"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new RouteMap on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/RouteMap"
                        },
                        "required": true,
                        "name": "RouteMap",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Add RouteMap on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddRouteMap"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RouteMapListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Paginated List of RouteMaps",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Paginated List of RouteMaps",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListRouteMaps"
            }
        },
        "/node/network": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeNetworkProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read network configuration properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read network configuration properties",
                "x-vmw-nsx-module": "NodeNetworkModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNetworkProperties"
            }
        },
        "/dhcp/servers/{server-id}/ip-pools": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DhcpIpPool"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create an IP pool for a DHCP server",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/DhcpIpPool"
                        },
                        "required": true,
                        "name": "DhcpIpPool",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create an IP pool for a DHCP server",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateDhcpIpPool"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpIpPoolListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a paginated list of a DHCP server's IP pools",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a paginated list of a DHCP server's IP pools",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListDhcpIpPools"
            }
        },
        "/cluster/nodes/{node-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterNodeStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read Cluster Node Status",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read Cluster Node Status",
                "x-vmw-nsx-module": "ClusterManagement",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterNodeStatus"
            }
        },
        "/eula/content": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EULAContent"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return the content of end user license agreement in the specified format.\nBy default, it's pure string without line break\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "End User License Agreement content output format",
                        "type": "string",
                        "name": "format",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Return the content of end user license agreement\n",
                "x-vmw-nsx-module": "EULA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetEULAContent"
            }
        },
        "/dns/forwarders/{forwarder-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DnsForwarder"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a specific dns forwarder.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "forwarder-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/DnsForwarder"
                        },
                        "required": true,
                        "name": "DnsForwarder",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a specific dns forwarder",
                "x-vmw-nsx-module": "DnsForwarder",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateDnsForwarder"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DnsForwarder"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a dns forwarder.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "forwarder-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a dns forwarder",
                "x-vmw-nsx-module": "DnsForwarder",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadDnsForwader"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a specific dns forwarder.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "forwarder-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a specific dns forwarder",
                "x-vmw-nsx-module": "DnsForwarder",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteDnsForwarder"
            }
        },
        "/app-discovery/sessions/{session-id}/re-classify": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppDiscoverySessionResultSummary"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Re-classify completed application discovery session against input \nAppProfiles. If no AppProfiles are specified then we use the previous \nAppProfiles of that session.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/SessionReclassificationParameter"
                        },
                        "required": true,
                        "name": "SessionReclassificationParameter",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Re-classify a completed application discovery session.",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReclassifyAppDiscoverySession"
            }
        },
        "/firewall/rules/{rule-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallRule"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return existing firewall rule information.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Read an Existing Rule",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadFirewallRule"
            }
        },
        "/logical-routers/{logical-router-id}/nat/rules/{rule-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NatStatisticsPerRule"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the summation of statistics from all nodes for the Specified\nLogical Router NAT Rule. Query parameter \"source=realtime\" is the only supported source.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get the statistics of a specified logical router NAT Rule",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNatStatisticsPerRule"
            }
        },
        "/dhcp/server-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DhcpProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a DHCP server profile",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/DhcpProfile"
                        },
                        "required": true,
                        "name": "DhcpProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a DHCP server profile",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateDhcpProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a paginated list of DHCP server profiles",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a paginated list of DHCP server profiles",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListDhcpProfiles"
            }
        },
        "/logical-routers/{logical-router-id}/routing/route-table?format=csv": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterRouteTableInCsvFormat"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deprecated - Please use /logical-routers/<logical-router-id>/routing/routing-table for RIB and\n/logical-routers/<logical-router-id>/routing/forwarding-table for FIB.\nReturns the route table in CSV format for the logical router on a node of the given\ntransport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": true,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get route table on a node for a logical router",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterRouteTableInCsvFormatCsv"
            }
        },
        "/upgrade/plan?action=pause": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Pause upgrade",
                "tags": [
                    "Upgrade"
                ],
                "summary": "Pause upgrade",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "PauseUpgradePause"
            }
        },
        "/node/network/name-servers": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeNameServersProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the list of servers that the NSX Manager node uses to look up IP\naddresses associated with given domain names. If DHCP is configured, this\nmethod returns a 409 CONFLICT error, because DHCP manages the list of name\nservers.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeNameServersProperties"
                        },
                        "required": true,
                        "name": "NodeNameServersProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update the NSX Manager's Name Servers",
                "x-vmw-nsx-module": "NodeNetworkDnsModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNodeNameServers"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeNameServersProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the list of servers that the NSX Manager node uses to look up IP\naddresses associated with given domain names.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read the NSX Manager's Name Servers",
                "x-vmw-nsx-module": "NodeNetworkDnsModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeNameServers"
            }
        },
        "/ns-services/{ns-service-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates the specified NSService. Modifiable parameters include the description,\ndisplay_name and the NSService element. The system defined NSServices can't be\nmodified\n",
                "parameters": [
                    {
                        "description": "NSService Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-service-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/NSService"
                        },
                        "required": true,
                        "name": "NSService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Update NSService",
                "x-vmw-nsx-module": "NSService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNSService"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified NSService. By default, if the NSService is being\nreferred in an NSServiceGroup, it can't be deleted. In such situations,\npass \"force=true\" as a parameter to force delete the NSService. System\ndefined NSServices can't be deleted using \"force\" flag.\n",
                "parameters": [
                    {
                        "description": "NSService Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-service-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Delete NSService",
                "x-vmw-nsx-module": "NSService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteNSService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSService"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified NSService\n",
                "parameters": [
                    {
                        "description": "NSService Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-service-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Read NSService",
                "x-vmw-nsx-module": "NSService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNSService"
            }
        },
        "/aaa/roles/{role}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RoleWithFeatures"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get role information",
                "parameters": [
                    {
                        "description": "Role Name",
                        "required": true,
                        "type": "string",
                        "name": "role",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Get role information",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRoleInfo"
            }
        },
        "/cluster/nodes": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ClusterNodeConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new controller node to the NSX cluster.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AddClusterNodeSpec"
                        },
                        "required": true,
                        "name": "AddClusterNodeSpec",
                        "in": "body"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "action",
                        "enum": [
                            "add_cluster_node"
                        ],
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Add a controller node to the cluster",
                "x-vmw-nsx-module": "ClusterManagement",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddClusterNode"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterNodeConfigListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all NSX cluster nodes.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List Cluster Node Configurations",
                "x-vmw-nsx-module": "ClusterManagement",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListClusterNodeConfigs"
            }
        },
        "/ui-views/{view-id}/widgetconfigurations": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/WidgetConfiguration"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new Widget Configuration and adds it to the specified view.\nSupported resource_types are LabelValueConfiguration, DonutConfiguration,\nGridConfiguration, StatsConfiguration, MultiWidgetConfiguration and\nContainerConfiguration.\n\nNote: Expressions should be given in a single line. If an expression spans\n  multiple lines, then form the expression in a single line.\nFor label-value pairs, expressions are evaluated as follows:\n  a. First, render configurations are evaluated in their order of\n     appearance in the widget config. The 'field' is evaluated at the end.\n  b. Second, when render configuration is provided then the order of\n     evaluation is\n     1. If expressions provided in 'condition' and 'display value' are\n        well-formed and free of runtime-errors such as 'null pointers' and\n        evaluates to 'true'; Then remaining render configurations are not\n        evaluated, and the current render configuration's 'display value'\n        is taken as the final value.\n     2. If expression provided in 'condition' of render configuration is\n        false, then next render configuration is evaluated.\n     3. Finally, 'field' is evaluated only when every render configuration\n        evaluates to false and no error occurs during steps 1 and 2 above.\n\nIf an error occurs during evaluation of render configuration, then an\n  error message is shown. The display value corresponding to that label is\n  not shown and evaluation of the remaining render configurations continues\n  to collect and show all the error messages (marked with the 'Label' for\n  identification) as 'Error_Messages: {}'.\n\nIf during evaluation of expressions for any label-value pair an error\n  occurs, then it is marked with error. The errors are shown in the report,\n  along with the label value pairs that are error-free.\n\nImportant: For elements that take expressions, strings should be provided\n  by escaping them with a back-slash. These elements are - condition, field,\n  tooltip text and render_configuration's display_value.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "view-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/WidgetConfiguration"
                        },
                        "required": true,
                        "name": "WidgetConfiguration",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Creates a new Widget Configuration.",
                "x-vmw-nsx-module": "NsxDashboard",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateWidgetConfiguration"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WidgetConfigurationList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "If no query params are specified then all the Widget Configurations of\nthe specified view are returned.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "view-id",
                        "in": "path"
                    },
                    {
                        "description": "Id of the container",
                        "maxLength": 255,
                        "type": "string",
                        "name": "container",
                        "in": "query"
                    },
                    {
                        "description": "Ids of the WidgetConfigurations",
                        "maxLength": 8192,
                        "type": "string",
                        "name": "widget_ids",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters.",
                "x-vmw-nsx-module": "NsxDashboard",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListWidgetConfigurations"
            }
        },
        "/node/file-store/{file-name}?action=copy_to_remote_file": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Copy a file in the file store to a remote server. If you use scp or\nsftp, you must provide the remote server's SSH fingerprint. See the\n<i>NSX-T Administration Guide</i> for information and instructions\nabout finding the SSH fingerprint.\n",
                "parameters": [
                    {
                        "description": "Destination filename",
                        "required": true,
                        "type": "string",
                        "name": "file-name",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/CopyToRemoteFileProperties"
                        },
                        "required": true,
                        "name": "CopyToRemoteFileProperties",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Copy file in the file store to a remote file store",
                "x-vmw-nsx-module": "FileStoreModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CopyToRemoteFileCopy_to_remote_file"
            }
        },
        "/dns/forwarders/{forwarder-id}?action=clear_cache": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Clear the current cache of the dns forwarder.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "forwarder-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Clear the current cache of the dns forwarder.",
                "x-vmw-nsx-module": "DnsForwarder",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ClearDnsForwarderCacheClear_cache"
            }
        },
        "/logical-routers/{logical-router-id}/routing/static-routes/bfd-peers/{bfd-peer-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StaticHopBfdPeer"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the static route BFD peer.\nModifiable parameters includes peer IP, enable flag and configuration of the BFD peer.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "bfd-peer-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/StaticHopBfdPeer"
                        },
                        "required": true,
                        "name": "StaticHopBfdPeer",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a static route BFD peer",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateStaticHopBfdPeer"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StaticHopBfdPeer"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read the BFD peer having specified ID.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "bfd-peer-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read a static route BFD peer",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadStaticHopBfdPeer"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified BFD peer present on specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "bfd-peer-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a specified static route BFD peer cofigured on a specified logical router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteStaticHopBfdPeer"
            }
        },
        "/migration/feedback-response": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Migration feedback response",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/MigrationFeedbackResponseList"
                        },
                        "required": true,
                        "name": "MigrationFeedbackResponseList",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Migration feedback response",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateFeedbackResponse"
            }
        },
        "/serviceinsertion/sections/{section-id}?action=list_with_rules": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSectionRuleList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns serviceinsertion section information with rules for a section identifier.\nWhen invoked on a section with a large number of rules, this API is supported\nonly at low rates of invocation (not more than 4-5 times per minute). The\ntypical latency of this API with about 1024 rules is about 4-5 seconds. This\nAPI should not be invoked with large payloads at automation speeds. More than\n50 rules are not supported.\n\nInstead, to read serviceinsertion rules, use:\nGET /api/v1/serviceinsertion/sections/&lt;section-id&gt;/rules with the appropriate\npage_size.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get an Existing Section, Including Rules",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetServiceInsertionSectionWithRulesList_with_rules"
            }
        },
        "/upgrade/bundles/{bundle-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeBundleInfo"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get uploaded upgrade bundle information\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bundle-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get uploaded upgrade bundle information",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeBundleInfo"
            }
        },
        "/node/file-store/{file-name}/data": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FileProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Replace file contents",
                "parameters": [
                    {
                        "description": "Name of the file to replace",
                        "required": true,
                        "type": "string",
                        "name": "file-name",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Replace file contents",
                "x-vmw-nsx-module": "FileStoreModule",
                "consumes": [
                    "application/octet-stream"
                ],
                "operationId": "UpdateFile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read file contents",
                "parameters": [
                    {
                        "description": "Name of the file to read",
                        "required": true,
                        "type": "string",
                        "name": "file-name",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read file contents",
                "x-vmw-nsx-module": "FileStoreModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadFile"
            }
        },
        "/node/services/ui-service?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, Start and Stop the ui service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, Start and Stop the ui service",
                "x-vmw-nsx-module": "NodeUiServiceService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNsxUiServiceServiceActionStart"
            }
        },
        "/node/services/nsx-upgrade-agent/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read Nsx upgrade agent service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read Nsx upgrade agent service status",
                "x-vmw-nsx-module": "NodeNsxUpgradeAgent",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNsxUpgradeAgentServiceStatus"
            }
        },
        "/upgrade/upgrade-unit-groups": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitGroup"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a group",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitGroup"
                        },
                        "required": true,
                        "name": "UpgradeUnitGroup",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Create a group",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateUpgradeUnitGroup"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitGroupListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return information of all upgrade unit groups",
                "parameters": [
                    {
                        "description": "Component type based on which upgrade unit groups to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Flag indicating whether to return summary",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "summary"
                    },
                    {
                        "description": "Synchronize before returning upgrade unit groups",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "sync"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Return information of all upgrade unit groups",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeUnitGroups"
            }
        },
        "/transport-zones/{zone-id}/transport-node-status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportNodeStatusListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read status of transport nodes in a transport zone",
                "parameters": [
                    {
                        "description": "ID of transport zone",
                        "required": true,
                        "type": "string",
                        "name": "zone-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "Transport node",
                        "enum": [
                            "UP",
                            "DOWN",
                            "DEGRADED",
                            "UNKNOWN"
                        ],
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Read status of transport nodes in a transport zone",
                "x-vmw-nsx-module": "Heatmap",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListTransportNodeStatusForTransportZone"
            }
        },
        "/node/services/nsx-upgrade-agent?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX upgrade agent service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX upgrade agent service",
                "x-vmw-nsx-module": "NodeNsxUpgradeAgent",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNsxUpgradeAgentServiceActionRestart"
            }
        },
        "/vpn/l2vpn/sessions/{session-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VPNSessionStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Aggregated status of L2VPN session. Query parameter source=realtime|cached is supported.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get L2VPN session status",
                "x-vmw-nsx-module": "L2VPNStatistics",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetL2VPNSessionStatus"
            }
        },
        "/loadbalancer/application-profiles/{application-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbAppProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a load balancer application profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "application-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbAppProfile"
                        },
                        "required": true,
                        "name": "LbAppProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer application profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerApplicationProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a load balancer application profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "application-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a load balancer application profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLoadBalancerApplicationProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbAppProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a load balancer application profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "application-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a load balancer application profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerApplicationProfile"
            }
        },
        "/node/services/ntp?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NTP service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NTP service",
                "x-vmw-nsx-module": "NodeNTPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNTPServiceActionRestart"
            }
        },
        "/node/services/manager?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the service",
                "x-vmw-nsx-module": "NodeProtonService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateProtonServiceActionRestart"
            }
        },
        "/node/services/snmp": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeSnmpServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update SNMP service properties",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeSnmpServiceProperties"
                        },
                        "required": true,
                        "name": "NodeSnmpServiceProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update SNMP service properties",
                "x-vmw-nsx-module": "NodeSNMPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateSNMPService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeSnmpServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read SNMP service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read SNMP service properties",
                "x-vmw-nsx-module": "NodeSNMPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadSNMPService"
            }
        },
        "/pools/mac-pools": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MacPoolListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns a list of all the MAC pools\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "List MAC Pools",
                "x-vmw-nsx-module": "MACAM",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListMacPools"
            }
        },
        "/node/services/manager": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeProtonServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update service properties",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeProtonServiceProperties"
                        },
                        "required": true,
                        "name": "NodeProtonServiceProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update service properties",
                "x-vmw-nsx-module": "NodeProtonService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateProtonService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeProtonServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read service properties",
                "x-vmw-nsx-module": "NodeProtonService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadProtonService"
            }
        },
        "/mac-sets/{mac-set-id}/members": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/MACAddressElement"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Add an individual MAC address to a MACSet\n",
                "parameters": [
                    {
                        "description": "MAC Set Id",
                        "required": true,
                        "type": "string",
                        "name": "mac-set-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/MACAddressElement"
                        },
                        "required": true,
                        "name": "MACAddressElement",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Add a MAC address to a MACSet",
                "x-vmw-nsx-module": "MACSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddMACAddress"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MACAddressElementListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List all MAC addresses in a MACSet\n",
                "parameters": [
                    {
                        "description": "MAC Set Id",
                        "required": true,
                        "type": "string",
                        "name": "mac-set-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Get all MACAddresses in a MACSet",
                "x-vmw-nsx-module": "MACSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMACAddresses"
            }
        },
        "/logical-routers/{logical-router-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns status for the Logical Router of the given id.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get the status for the Logical Router of the given id",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterStatus"
            }
        },
        "/cluster/restore/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns status information for the specified NSX cluster restore request.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Query Restore Request Status",
                "x-vmw-nsx-module": "ClusterNodeBackupRestore",
                "consumes": [
                    "application/json"
                ],
                "operationId": "QueryClusterRestoreStatus"
            }
        },
        "/trust-management": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TrustManagementData"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the supported algorithms and key sizes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Return the Properties of a Trust Manager",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTrustObjects"
            }
        },
        "/logical-routers/{logical-router-id}/routing/ip-prefix-lists": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPPrefixList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new IPPrefixList on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IPPrefixList"
                        },
                        "required": true,
                        "name": "IPPrefixList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Add IPPrefixList on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddIPPrefixList"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPPrefixListListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Paginated List of IPPrefixLists",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Paginated List of IPPrefixLists",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIPPrefixLists"
            }
        },
        "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BaseServiceInstance"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies an existing Service-Instance for a given Service-Insertion Service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BaseServiceInstance"
                        },
                        "required": true,
                        "name": "BaseServiceInstance",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an existing Service-Instance.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateServiceInstance"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete existing Service-Instance for a given Service-Insertion Service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete an existing Service-Instance",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteServiceInstance"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BaseServiceInstance"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns Service-Instance information for a given Service-Insertion Service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get Service-Instance for Service.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetServiceInstance"
            }
        },
        "/loadbalancer/server-ssl-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbServerSslProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a load balancer server-ssl profile.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbServerSslProfile"
                        },
                        "required": true,
                        "name": "LbServerSslProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer server-ssl profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerServerSslProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbServerSslProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a paginated list of load balancer server-ssl profiles.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a paginated list of load balancer server-ssl profiles",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerServerSslProfiles"
            }
        },
        "/vpn/ipsec/peer-endpoints/{ipsec-vpn-peer-endpoint-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNPeerEndpoint"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Edit custom IPSec peer endpoint. System owned endpoints are non editable.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-peer-endpoint-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNPeerEndpoint"
                        },
                        "required": true,
                        "name": "IPSecVPNPeerEndpoint",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Edit custom IPSecPeerEndpoint",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIPSecVPNPeerEndpoint"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete custom IPSec VPN peer endpoint. All references are strong references and dependent peer endpoints can not be deleted if being referenced.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-peer-endpoint-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Delete custom IPSec VPN peer endpoint",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIPSecVPNPeerEndpoint"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNPeerEndpoint"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get custom IPSec VPN peer endpoint.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-peer-endpoint-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec VPN peer endpoint",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNPeerEndpoint"
            }
        },
        "/fabric/nodes/{node-id}/network/interfaces/{interface-id}/stats": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInterfaceStatisticsProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "On the specified interface, returns the number of received (rx), transmitted\n(tx), and dropped packets; the number of bytes and errors received and\ntransmitted on the interface; and the number of detected collisions.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "interface-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Read the NSX Manager's Network Interface Statistics",
                "x-vmw-nsx-module": "ApplianceStats",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadFabricNodeInterfaceStatistics"
            }
        },
        "/hpm/features/{feature-stack-name}?action=reset_collection_frequency": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FeatureStackCollectionConfiguration"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Reset the data collection frequency configuration setting to the default values",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "feature-stack-name",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "action",
                        "enum": [
                            "reset_collection_frequency"
                        ],
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aggregation Service"
                ],
                "summary": "Reset the data collection frequency configuration setting to the default values",
                "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ResetAggregationServiceFeatureStackConfigurationReset_collection_frequency"
            }
        },
        "/fabric/nodes/{node-id}/modules": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SoftwareModuleResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the module details of a Fabric Node",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Get the module details of a Fabric Node",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetFabricNodeModules"
            }
        },
        "/node/services/cluster_manager/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read cluster boot manager service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read cluster boot manager service status",
                "x-vmw-nsx-module": "NodeClusterBootManagerService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterBootManagerServiceStatus"
            }
        },
        "/fabric/virtual-machines?action=update_tags": {
            "post": {
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update tags applied to the virtual machine. External id of the virtual machine will be specified in the request body. Request body should contain all the tags to be applied. To clear all tags, provide an empty list. User can apply maximum 10 tags on a virtual machine. The remaining 5 are reserved for system defined tags.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineTagUpdate"
                        },
                        "required": true,
                        "name": "VirtualMachineTagUpdate",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Update tags applied to a virtual machine",
                "x-vmw-nsx-module": "Inventory",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateVirtualMachineTagsUpdate_tags"
            }
        },
        "/firewall/status/{context-type}/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TargetResourceStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get firewall status for target resource in dfw context",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "context-type",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get firewall status for target resource in dfw context",
                "x-vmw-nsx-module": "FirewallStatus",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetFirewallStatusOnTargetResource"
            }
        },
        "/ipfix/configs": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IpfixConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a new IPFIX configuration",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IpfixConfig"
                        },
                        "required": true,
                        "name": "IpfixConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Create a new IPFIX configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIpfixConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixConfigListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List IPFIX configuration",
                "parameters": [
                    {
                        "description": "Applied To",
                        "required": false,
                        "type": "string",
                        "name": "applied_to",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "IpfixSwitchConfig",
                            "IpfixDfwConfig"
                        ],
                        "description": "Supported IPFIX Config Types.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "ipfix_config_type"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "List IPFIX configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIpfixConfig"
            }
        },
        "/eula/acceptance": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EULAAcceptance"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return the acceptance status of end user license agreement\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Return the acceptance status of end user license agreement\n",
                "x-vmw-nsx-module": "EULA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetEULAAcceptance"
            }
        },
        "/upgrade/version-whitelist": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AcceptableComponentVersionList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get whitelist of versions for different components",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get the version whitelist",
                "x-vmw-nsx-module": "VersionWhitelist",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetVersionWhitelist"
            }
        },
        "/node/services/liagent?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the liagent service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the liagent service",
                "x-vmw-nsx-module": "NodeLiagentService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLiagentServiceActionStop"
            }
        },
        "/node/services/ntp": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeNtpServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update NTP service properties",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeNtpServiceProperties"
                        },
                        "required": true,
                        "name": "NodeNtpServiceProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update NTP service properties",
                "x-vmw-nsx-module": "NodeNTPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNTPService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeNtpServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read NTP service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read NTP service properties",
                "x-vmw-nsx-module": "NodeNTPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNTPService"
            }
        },
        "/loadbalancer/services/{service-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a load balancer service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbService"
                        },
                        "required": true,
                        "name": "LbService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer service",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerService"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a load balancer service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a load balancer service",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLoadBalancerService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a load balancer service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a load balancer service",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerService"
            }
        },
        "/cluster/nodes/deployments/{node-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterNodeVMDeploymentStatusReport"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the current deployment or undeployment status for a VM along with\nany other relevant current information, such as error messages.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Returns the status of the VM creation/deletion",
                "x-vmw-nsx-module": "ClusterNodeVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterNodeVMDeploymentStatus"
            }
        },
        "/trust-management/csrs/{csr-id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Removes a specified CSR. If a CSR is not used for verification, you can\ndelete it. Note that the CSR import and upload POST actions automatically\ndelete the associated CSR.\n",
                "parameters": [
                    {
                        "description": "ID of CSR to delete",
                        "required": true,
                        "type": "string",
                        "name": "csr-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Delete a CSR",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteCsr"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Csr"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified CSR.",
                "parameters": [
                    {
                        "description": "ID of CSR to read",
                        "required": true,
                        "type": "string",
                        "name": "csr-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Show CSR Data for the Given CSR ID",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetCsr"
            }
        },
        "/ui-views/{view-id}/widgetconfigurations/{widgetconfiguration-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WidgetConfiguration"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates the widget at the given view. If the widget is referenced by other\nviews, then the widget will be updated in all the views that it is part of.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "view-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "widgetconfiguration-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/WidgetConfiguration"
                        },
                        "required": true,
                        "name": "WidgetConfiguration",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Update Widget Configuration",
                "x-vmw-nsx-module": "NsxDashboard",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateWidgetConfiguration"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WidgetConfiguration"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns Information about a specific Widget Configuration.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "view-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "widgetconfiguration-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Returns Widget Configuration Information",
                "x-vmw-nsx-module": "NsxDashboard",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetWidgetConfiguration"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Detaches widget from a given view. If the widget is no longer part of any\nview, then it will be purged.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "view-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "widgetconfiguration-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Delete Widget Configuration",
                "x-vmw-nsx-module": "NsxDashboard",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteWidgetConfiguration"
            }
        },
        "/node/services/http?action=stop": {
            "post": {
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Stop the http service",
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Stop the http service",
                "x-vmw-nsx-module": "NodeProxyService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateProxyServiceActionStop"
            }
        },
        "/loadbalancer/rules/{rule-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbRule"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a load balancer rule.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbRule"
                        },
                        "required": true,
                        "name": "LbRule",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer rule",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerRule"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbRule"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a load balancer rule.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a load balancer rule",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerRule"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a load balancer rule.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a load balancer rule",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLoadBalancerRule"
            }
        },
        "/dhcp/servers/{server-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpServerStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the service status of the given dhcp server.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get DHCP service status with given dhcp server id",
                "x-vmw-nsx-module": "AggSvcDhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetDhcpStatus"
            }
        },
        "/upgrade/bundles": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeBundleId"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Fetch upgrade bundle from given url",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/UpgradeBundleFetchRequest"
                        },
                        "required": true,
                        "name": "UpgradeBundleFetchRequest",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Fetch upgrade bundle from given url",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "FetchUpgradeBundleFromUrl"
            }
        },
        "/node/services/nsx-upgrade-agent?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX upgrade agent service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX upgrade agent service",
                "x-vmw-nsx-module": "NodeNsxUpgradeAgent",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNsxUpgradeAgentServiceActionStart"
            }
        },
        "/aaa/user-info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserInfo"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get information about logged-in user. The permissions parameter of the NsxRole has been deprecated.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Get information about logged-in user. The permissions parameter of the NsxRole has been deprecated.",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetCurrentUserInfo"
            }
        },
        "/upgrade/upgrade-units-stats": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitTypeStatsList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get upgrade units stats",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Synchronize before returning upgrade unit stats",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "sync"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get upgrade units stats",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeUnitsStats"
            }
        },
        "/node/services/ssh?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the ssh service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the ssh service",
                "x-vmw-nsx-module": "NodeSSHService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSSHServiceActionStart"
            }
        },
        "/node/services/liagent": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read liagent service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read liagent service properties",
                "x-vmw-nsx-module": "NodeLiagentService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLiagentService"
            }
        },
        "/dhcp/servers": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LogicalDhcpServer"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a DHCP server",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalDhcpServer"
                        },
                        "required": true,
                        "name": "LogicalDhcpServer",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a DHCP server",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateDhcpServer"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalDhcpServerListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a paginated list of DHCP servers",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a paginated list of DHCP servers",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListDhcpServers"
            }
        },
        "/trust-management/crls?action=import": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/CrlList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new certificate revocation list (CRL). The CRL is used to verify the\nclient certificate status against the revocation lists published by the CA.\nFor this reason, the administrator needs to add the CRL in certificate\nrepository as well.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/CrlObjectData"
                        },
                        "required": true,
                        "name": "CrlObjectData",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Add a New Certificate Revocation List",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddCrlImport"
            }
        },
        "/dhcp/servers/{server-id}/ip-pools/{pool-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpIpPool"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a DHCP server's IP pool",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/DhcpIpPool"
                        },
                        "required": true,
                        "name": "DhcpIpPool",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a DHCP server's IP pool",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateDhcpIpPool"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpIpPool"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a DHCP server's IP pool with the specified pool ID",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a DHCP server's IP pool with the specified pool ID",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadDhcpIpPool"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a DHCP server's IP pool",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a DHCP server's IP pool",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteDhcpIpPool"
            }
        },
        "/firewall/sections/{section-id}?action=revise_with_rules": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionRuleList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies an existing firewall section along with its relative position\namong other firewall sections with rules. When invoked on a large number\nof rules, this API is supported only at low rates of invocation (not more\nthan 2 times per minute). The typical latency of this API with about 1024\nrules is about 15 seconds in a cluster setup. This API should not be\ninvoked with large payloads at automation speeds.\n\nInstead, to move a section above or below another section, use:\nPOST /api/v1/firewall/sections/&lt;section-id&gt;?action=revise\n\nTo modify rules, use:\nPUT /api/v1/firewall/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt;\n\nSimultaneous update (modify) operations on same section are not allowed to\nprevent overwriting stale contents to firewall section. If a concurrent\nupdate is performed, HTTP response code 409 will be returned to the client\noperating on stale data. That client should retrieve the firewall section\nagain and re-apply its update.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionRuleList"
                        },
                        "required": true,
                        "name": "FirewallSectionRuleList",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Section with Rules",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReviseSectionWithRulesRevise_with_rules"
            }
        },
        "/transport-nodes/{transportnode-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportNode"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the transport node information. Modifiable parameters include the\nhost_switch_spec and transport_zone_endpoints. The host_switch_name field must\nmatch the host_switch_name value specified in the transport zone\n(API: transport-zones). You must create the associated uplink profile\n(API: host-switch-profiles) before you can specify an uplink_name here.\nIf the host is an ESX and has only one physical NIC being used by a vSphere\nstandard switch, TransportNodeUpdateParameters should be used to migrate\nthe management interface and the physical NIC into a logical switch that\nis in a transport zone this transport node will join or has already joined.\nIf the migration is already done, TransportNodeUpdateParameters can also be\nused to migrate the management interface and the physical NIC back to a\nvSphere standard switch.\nIn other cases, the TransportNodeUpdateParameters should NOT be used.\nWhen updating transport node user should follow pattern where he should fetch\nthe existing transport node and then only modify the required properties\nkeeping other properties as is. For API backward compatibility, property\nhost_switches will be still returned in response and will contain the configuration\nmatching the one in host_switch_spec. In update call user should only\nmodify configuration in either host_switch_spec or host_switches, but\nnot both. Property host_switch_spec should be preferred over deprecated\nhost_switches property when creating or updating transport nodes.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "transportnode-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/TransportNode"
                        },
                        "required": true,
                        "name": "TransportNode",
                        "in": "body"
                    },
                    {
                        "description": "The network ids to which the ESX vmk interfaces will be migrated",
                        "required": false,
                        "type": "string",
                        "name": "esx_mgmt_if_migration_dest",
                        "in": "query"
                    },
                    {
                        "description": "The ESX vmk interfaces to migrate",
                        "required": false,
                        "type": "string",
                        "name": "if_id",
                        "in": "query"
                    },
                    {
                        "description": "The ESX vmk interfaces and/or VM NIC to migrate",
                        "required": false,
                        "type": "string",
                        "name": "vnic",
                        "in": "query"
                    },
                    {
                        "description": "The migration destinations of ESX vmk interfaces and/or VM NIC",
                        "required": false,
                        "type": "string",
                        "name": "vnic_migration_dest",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update a Transport Node",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateTransportNode"
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Put transport node into maintenance mode or exit from maintenance mode.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "transportnode-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "enter_maintenance_mode",
                            "forced_enter_maintenance_mode",
                            "exit_maintenance_mode"
                        ],
                        "type": "string",
                        "name": "action",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update transport node maintenance mode",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateTransportNodeMaintenanceMode"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified transport node. Query param force can be used to\nforce delete the host nodes. Force deletion of edge and public cloud\ngateway nodes is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "transportnode-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete a Transport Node",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteTransportNode"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportNode"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified transport node.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "transportnode-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get a Transport Node",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTransportNode"
            }
        },
        "/fabric/compute-managers/{compute-manager-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeManagerStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns connection and version information about a compute manager\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "compute-manager-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return runtime status information for a compute manager",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadComputeManagerStatus"
            }
        },
        "/logical-routers/{logical-router-id}/routing/redistribution": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RedistributionConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies existing route redistribution rules for the specified TIER0 logical\nrouter.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/RedistributionConfig"
                        },
                        "required": true,
                        "name": "RedistributionConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update the Redistribution Configuration on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateRedistributionConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RedistributionConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about configured route redistribution for the specified\nlogical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read the Redistribution Configuration on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadRedistributionConfig"
            }
        },
        "/upgrade/eula/accept": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Accept end user license agreement\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Accept end user license agreement\n",
                "x-vmw-nsx-module": "UpgradeEULA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AcceptUpgradeEULA"
            }
        },
        "/license": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/License"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deprecated. Use the POST /licenses API instead\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/License"
                        },
                        "required": true,
                        "name": "License",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Deprecated. Assign an Updated Enterprise License Key\n",
                "x-vmw-nsx-module": "License",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLicense"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/License"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deprecated. Use the GET /licenses API instead.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Deprecated. Return the Enterprise License\n",
                "x-vmw-nsx-module": "License",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLicense"
            }
        },
        "/compute-collection-transport-node-templates": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionTransportNodeTemplate"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "If automated transport node creation is configured on compute collection, this template will serve as the default setting for transport node creation.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionTransportNodeTemplate"
                        },
                        "required": true,
                        "name": "ComputeCollectionTransportNodeTemplate",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create transport node template for compute collection.",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateComputeCollectionTransportNodeTemplate"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportNodeTemplateListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns all eligible compute collection transportnode templates",
                "parameters": [
                    {
                        "description": "Compute collection id",
                        "required": false,
                        "type": "string",
                        "name": "compute_collection_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List compute collection transportnode templates",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListComputeCollectionTransportNodeTemplates"
            }
        },
        "/logical-routers/{logical-router-id}/routing/bgp/community-lists/{community-list-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BGPCommunityList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read a specific BGP community list from a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "community-list-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read a specific BGP community list from a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadBGPCommunityList"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a specific BGP community list from a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "community-list-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a specific BGP community list from a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteBGPCommunityList"
            }
        },
        "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-endpoints": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InstanceEndpoint"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new instance endpoint. It belongs to one service instance and is attached\nto one service attachment. It represents a redirection target for a Rule.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/InstanceEndpoint"
                        },
                        "required": true,
                        "name": "InstanceEndpoint",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Add an InstanceEndpoint for a Service Instance",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddInstanceEndpoint"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InstanceEndpointListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List all InstanceEndpoints of a service instance.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "List all InstanceEndpoints of a Service Instance.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListInstanceEndpoints"
            }
        },
        "/firewall/sections/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionsSummaryList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List the summary of number of sections and number of rules for each firewall\ncategory (L2DFW, L3DFW).\n",
                "parameters": [
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the summary of sections in the firewall configuration.",
                "x-vmw-nsx-module": "FirewallSummary",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetSectionsSummary"
            }
        },
        "/dhcp/servers/{server-id}/static-bindings": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DhcpStaticBinding"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a static binding for a DHCP server",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/DhcpStaticBinding"
                        },
                        "required": true,
                        "name": "DhcpStaticBinding",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a static binding for a DHCP server",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateDhcpStaticBinding"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpStaticBindingListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a paginated list of a DHCP server's static bindings",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a paginated list of a DHCP server's static bindings",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListDhcpStaticBindings"
            }
        },
        "/cluster/restore/backuptimestamps": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterBackupInfoListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns timestamps for all backup files that are available\non the SFTP server.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List timestamps of all available Cluster Backups.",
                "x-vmw-nsx-module": "ClusterRestore",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListClusterBackupTimestamps"
            }
        },
        "/node/services/mgmt-plane-bus?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the Rabbit MQ service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the Rabbit MQ service",
                "x-vmw-nsx-module": "NodeRabbitMQService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateRabbitMQServiceActionStop"
            }
        },
        "/migration/bundles/{bundle-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationBundleInfo"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get uploaded migration bundle information\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bundle-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get uploaded migration bundle information",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationBundleInfo"
            }
        },
        "/administration/support-bundles?action=collect": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SupportBundleResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "502": {
                        "description": "Bad Gateway"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Collect support bundles from registered cluster and fabric nodes.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/SupportBundleRequest"
                        },
                        "required": true,
                        "name": "SupportBundleRequest",
                        "in": "body"
                    },
                    {
                        "default": false,
                        "description": "Override any existing support bundle async response",
                        "type": "boolean",
                        "name": "override_async_response",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Collect support bundles from registered cluster and fabric nodes",
                "x-vmw-nsx-module": "NodeSupportBundle",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CollectSupportBundlesCollect"
            }
        },
        "/switching-profiles/{switching-profile-id}/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SwitchingProfileStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get Counts of Ports and Switches Using This Switching Profile",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "switching-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get Counts of Ports and Switches Using This Switching Profile",
                "x-vmw-nsx-module": "BaseSwitchingProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetSwitchingProfileStatus"
            }
        },
        "/vpn/ipsec/tunnel-profiles/{ipsec-vpn-tunnel-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNTunnelProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Edit custom IPSec Tunnel Profile. System owned profiles are non editable.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-tunnel-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNTunnelProfile"
                        },
                        "required": true,
                        "name": "IPSecVPNTunnelProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Edit custom IPSecTunnelProfile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIPSecVPNTunnelProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNTunnelProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get custom IPSec Tunnel Profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-tunnel-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec tunnel profile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNTunnelProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete custom IPSec Tunnel Profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-tunnel-profile-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Delete custom IPSecTunnelProfile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIPSecVPNTunnelProfile"
            }
        },
        "/upgrade/plan?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Start upgrade",
                "tags": [
                    "Upgrade"
                ],
                "summary": "Start upgrade",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "StartUpgradeStart"
            }
        },
        "/fabric/nodes/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeStatusListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns connectivity, heartbeat, and version information about all fabric nodes\n(host or edge).\n",
                "parameters": [
                    {
                        "description": "List of requested Nodes.",
                        "required": true,
                        "type": "string",
                        "name": "node_ids",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return Runtime Status Information for given Nodes",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodesStatus"
            }
        },
        "/vpn/ipsec/peer-endpoints/{ipsec-vpn-peer-endpoint-id}?action=show-sensitive-data": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNPeerEndpoint"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get custom IPSec VPN peer endpoint with PSK.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-peer-endpoint-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec VPN peer endpoint with PSK",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNPeerEndpointWithPSKShow-sensitive-data"
            }
        },
        "/vpn/l2vpn/sessions/{session-id}/remote-mac": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VPNSessionRemoteMacs"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get L2VPN session remote mac for logical switch.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "description": "logical switch identifier",
                        "type": "string",
                        "name": "logical_switch_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get L2VPN session remote mac for logical switch",
                "x-vmw-nsx-module": "L2VPNStatistics",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetL2VPNSessionRemoteMacsForLS"
            }
        },
        "/telemetry/config": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TelemetryConfig"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates or creates the telemetry configuration, and returns the new configuration.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/TelemetryConfig"
                        },
                        "required": true,
                        "name": "TelemetryConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Creates or updates the telemetry configuration",
                "x-vmw-nsx-module": "TelemetryConfig",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateTelemetryConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TelemetryConfig"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the telemetry configuration.",
                "produces": [
                    "application/json"
                ],
                "summary": "Returns the telemetry configuration",
                "x-vmw-nsx-module": "TelemetryConfig",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTelemetryConfig"
            }
        },
        "/traceflows": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Traceflow"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Initiate a Traceflow Operation on the Specified Port",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/TraceflowRequest"
                        },
                        "required": true,
                        "name": "TraceflowRequest",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Initiate a Traceflow Operation on the Specified Port",
                "x-vmw-nsx-module": "Traceflow",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateTraceflow"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TraceflowListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List all Traceflow rounds; if a logical port id is given as a query parameter,\nonly those originated from the logical port are returned.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "id of the source logical port where the trace flows originated",
                        "required": false,
                        "type": "string",
                        "name": "lport_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "List all Traceflow rounds",
                "x-vmw-nsx-module": "Traceflow",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListTraceflows"
            }
        },
        "/firewall/status/{context-type}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update global firewall status for dfw context",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "context-type",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallStatus"
                        },
                        "required": true,
                        "name": "FirewallStatus",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update global firewall status for dfw context",
                "x-vmw-nsx-module": "FirewallStatus",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateFirewallStatus"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get firewall global status for dfw context",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "context-type",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get firewall global status for dfw context",
                "x-vmw-nsx-module": "FirewallStatus",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetFirewallStatus"
            }
        },
        "/vpn/services/{service-id}/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNIKEServiceSummary"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Cumulative statistics for one IKE service instance. Query parameter source supports only cached mode.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Cumulative statistics for one IKE service instance",
                "x-vmw-nsx-module": "VPNStatistics",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNIKEService"
            }
        },
        "/firewall/status/{context-type}/{id}?action=enable_firewall": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TargetResourceStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Enable firewall on target resource in dfw context",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "context-type",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Enable firewall on target resource in dfw context",
                "x-vmw-nsx-module": "FirewallStatus",
                "consumes": [
                    "application/json"
                ],
                "operationId": "EnableFirewallOnTargetResourceEnable_firewall"
            }
        },
        "/bridge-endpoints": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpoint"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a Bridge Endpoint. It describes the physical attributes of the\nbridge like vlan. A logical port can be attached to a vif providing\nbridging functionality from the logical overlay network to the physical\nvlan network\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpoint"
                        },
                        "required": true,
                        "name": "BridgeEndpoint",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create a Bridge Endpoint",
                "x-vmw-nsx-module": "BridgeEndpoint",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateBridgeEndpoint"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpointListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all configured bridge endoints\n",
                "parameters": [
                    {
                        "description": "Bridge Cluster Identifier",
                        "required": false,
                        "type": "string",
                        "name": "bridge_cluster_id",
                        "in": "query"
                    },
                    {
                        "description": "Bridge endpoint profile used by the edge cluster",
                        "required": false,
                        "type": "string",
                        "name": "bridge_endpoint_profile_id",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Logical Switch Identifier",
                        "required": false,
                        "type": "string",
                        "name": "logical_switch_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "VLAN transport zone id used by the edge cluster",
                        "required": false,
                        "type": "string",
                        "name": "vlan_transport_zone_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List All Bridge Endpoints",
                "x-vmw-nsx-module": "BridgeEndpoint",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListBridgeEndpoints"
            }
        },
        "/transport-zones/{zone-id}/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportZoneStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified transport zone, including the number\nof logical switches in the transport zone, number of logical spitch ports\nassigned to the transport zone, and number of transport nodes in the\ntransport zone.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "zone-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get a Transport Zone's Current Runtime Status Information",
                "x-vmw-nsx-module": "TransportZone",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTransportZoneStatus"
            }
        },
        "/vpn/ipsec/local-endpoints": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNLocalEndpoint"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create custom IPSec local endpoint.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNLocalEndpoint"
                        },
                        "required": true,
                        "name": "IPSecVPNLocalEndpoint",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Create custom local endpoint",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIPSecVPNLocalEndpoint"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNLocalEndpointListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get paginated list of all local endpoints.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Id of the IPSec VPN service",
                        "required": false,
                        "type": "string",
                        "name": "ipsec_vpn_service_id",
                        "in": "query"
                    },
                    {
                        "description": "Id of logical router",
                        "required": false,
                        "type": "string",
                        "name": "logical_router_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec local endpoint list result",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIPSecVPNLocalEndpoints"
            }
        },
        "/node/services/http/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read http service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read http service status",
                "x-vmw-nsx-module": "NodeProxyService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadProxyServiceStatus"
            }
        },
        "/edge-clusters/{edge-cluster-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EdgeCluster"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified edge cluster. Modifiable parameters include the\ndescription, display_name, transport-node-id. If the optional\nfabric_profile_binding is included, resource_type and profile_id are required.\nUser should do a GET on the edge-cluster and obtain the payload and retain the\nmember_index of the existing members as returning in the GET output. For new member\nadditions, the member_index cannot be defined by the user, user can read the system\nallocated index to the new member in the output of this API call or by doing a GET call.\nUser cannot use this PUT api to replace the transport_node of an existing member because\nthis is a disruption action, we have exposed a explicit API for doing so, refer to\n\"ReplaceEdgeClusterMemberTransportNode\"\nEdgeCluster only supports homogeneous members. The TransportNodes backed by EdgeNode are\nonly allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these\nEdgeNodes is recommended to be the same. EdgeCluster supports members of different\ndeployment types.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "edge-cluster-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/EdgeCluster"
                        },
                        "required": true,
                        "name": "EdgeCluster",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update Edge Cluster",
                "x-vmw-nsx-module": "EdgeClusters",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateEdgeCluster"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified edge cluster.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "edge-cluster-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete Edge Cluster",
                "x-vmw-nsx-module": "EdgeClusters",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteEdgeCluster"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EdgeCluster"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified edge cluster.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "edge-cluster-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Read Edge Cluster",
                "x-vmw-nsx-module": "EdgeClusters",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadEdgeCluster"
            }
        },
        "/cluster/restore?action=retry": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    }
                },
                "description": "Retry any currently in-progress, failed restore operation. Only the last\nstep of the multi-step restore operation would have failed,and only that\nstep is retried. This operation is only valid when a\nGET cluster/restore/status returns a status with value FAILED. Otherwise,\na 409 response is returned.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Retry any failed restore operation",
                "x-vmw-nsx-module": "ClusterRestore",
                "consumes": [
                    "application/json"
                ],
                "operationId": "RetryClusterRestoreRetry"
            }
        },
        "/logical-switches": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitch"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new logical switch. The request must include the\ntransport_zone_id, display_name, and admin_state (UP or DOWN). The\nreplication_mode (MTEP or SOURCE) is required for overlay logical\nswitches, but not for VLAN-based logical switches. A vlan needs to be\nprovided for VLAN-based logical switches\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitch"
                        },
                        "required": true,
                        "name": "LogicalSwitch",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Create a Logical Switch",
                "x-vmw-nsx-module": "LogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLogicalSwitch"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitchListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all configured logical switches.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Flag to enable showing of transit logical switch.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "diagnostic"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Switching Profile identifier",
                        "required": false,
                        "type": "string",
                        "name": "switching_profile_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "OVERLAY",
                            "VLAN"
                        ],
                        "description": "Mode of transport supported in the transport zone for this logical switch",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "transport_type"
                    },
                    {
                        "description": "Transport zone identifier",
                        "required": false,
                        "type": "string",
                        "name": "transport_zone_id",
                        "in": "query"
                    },
                    {
                        "description": "The logical switch's uplink teaming policy name",
                        "required": false,
                        "type": "string",
                        "name": "uplink_teaming_policy_name",
                        "in": "query"
                    },
                    {
                        "description": "Virtual Local Area Network Identifier",
                        "format": "int64",
                        "required": false,
                        "maximum": 4094,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "vlan"
                    },
                    {
                        "description": "VNI of the OVERLAY LogicalSwitch(es) to return.",
                        "format": "int32",
                        "required": false,
                        "in": "query",
                        "type": "integer",
                        "name": "vni"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "List all Logical Switches",
                "x-vmw-nsx-module": "LogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLogicalSwitches"
            }
        },
        "/hpm/global-config": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GlobalCollectionConfiguration"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Set the global configuration for aggregation service related data collection",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/GlobalCollectionConfiguration"
                        },
                        "required": true,
                        "name": "GlobalCollectionConfiguration",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aggregation Service"
                ],
                "summary": "Set the global configuration for aggregation service related data collection",
                "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateAggregationServiceGlobalConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GlobalCollectionConfiguration"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read global health performance monitoring configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aggregation Service"
                ],
                "summary": "Read global health performance monitoring configuration",
                "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAggregationServiceGlobalConfig"
            }
        },
        "/node/services/install-upgrade?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX install-upgrade service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX install-upgrade service",
                "x-vmw-nsx-module": "NodeInstallUpgradeService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateRepositoryServiceActionStart"
            }
        },
        "/host-switch-profiles/{host-switch-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BaseHostSwitchProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies a specified hostswitch profile. The body of the PUT request must\ninclude the resource_type. For uplink profiles, the put request must also\ninclude teaming parameters. Modifiable attributes include display_name, mtu,\nand transport_vlan. For uplink teaming policies, uplink_name and policy are\nalso modifiable.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "host-switch-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BaseHostSwitchProfile"
                        },
                        "required": true,
                        "name": "BaseHostSwitchProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update a Hostswitch Profile",
                "x-vmw-nsx-module": "BaseHostSwitchProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateHostSwitchProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BaseHostSwitchProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified hostswitch profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "host-switch-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get a Hostswitch Profile by ID",
                "x-vmw-nsx-module": "BaseHostSwitchProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetHostSwitchProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes a specified hostswitch profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "host-switch-profile-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete a Hostswitch Profile",
                "x-vmw-nsx-module": "BaseHostSwitchProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteHostSwitchProfile"
            }
        },
        "/fabric/compute-collections": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all compute collections.",
                "parameters": [
                    {
                        "description": "Local Id of the compute collection in the Compute Manager",
                        "required": false,
                        "type": "string",
                        "name": "cm_local_id",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Id of the discovered node which belongs to this Compute Collection\n",
                        "required": false,
                        "type": "string",
                        "name": "discovered_node_id",
                        "in": "query"
                    },
                    {
                        "description": "Name of the ComputeCollection in source compute manager",
                        "required": false,
                        "type": "string",
                        "name": "display_name",
                        "in": "query"
                    },
                    {
                        "description": "External ID of the ComputeCollection in the source Compute manager,\ne.g. mo-ref in VC\n",
                        "required": false,
                        "type": "string",
                        "name": "external_id",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Id of the fabric node created from a discovered node belonging to\nthis Compute Collection\n",
                        "required": false,
                        "type": "string",
                        "name": "node_id",
                        "in": "query"
                    },
                    {
                        "description": "Id of the compute manager from where this Compute Collection was discovered",
                        "required": false,
                        "type": "string",
                        "name": "origin_id",
                        "in": "query"
                    },
                    {
                        "description": "ComputeCollection type like VC_Cluster. Here the Compute Manager\ntype prefix would help in differentiating similar named Compute\nCollection types from different Compute Managers\n",
                        "required": false,
                        "type": "string",
                        "name": "origin_type",
                        "in": "query"
                    },
                    {
                        "description": "Id of the owner of compute collection in the Compute Manager",
                        "required": false,
                        "type": "string",
                        "name": "owner_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return the List of Compute Collections",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListComputeCollections"
            }
        },
        "/vpn/ipsec/peer-endpoints": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNPeerEndpoint"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create custom IPSec peer endpoint.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNPeerEndpoint"
                        },
                        "required": true,
                        "name": "IPSecVPNPeerEndpoint",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Create custom peer endpoint",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIPSecVPNPeerEndPoint"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNPeerEndpointListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get paginated list of all peer endpoint.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSecVPNPeerEndpoint List Result",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIPSecVPNPeerEndpoints"
            }
        },
        "/node/tasks/{task-id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete task",
                "parameters": [
                    {
                        "description": "ID of task to delete",
                        "required": true,
                        "type": "string",
                        "name": "task-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Delete task",
                "x-vmw-nsx-module": "ApplianceManagementTaskModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteApplianceManagementTask"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApplianceManagementTaskProperties"
                        }
                    },
                    "303": {
                        "description": "See Other",
                        "schema": {
                            "$ref": "#/definitions/ApplianceManagementTaskProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read task properties",
                "parameters": [
                    {
                        "description": "ID of task to read",
                        "required": true,
                        "type": "string",
                        "name": "task-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Suppress redirect status if applicable",
                        "type": "boolean",
                        "name": "suppress_redirect",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read task properties",
                "x-vmw-nsx-module": "ApplianceManagementTaskModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadApplianceManagementTaskProperties"
            }
        },
        "/cluster/node?action=repo_sync": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Attempts to synchronize the repository partition on nsx manager. Repository partition contains packages required for the\ninstall and upgrade of nsx components.Normally there is no need to call this API explicitely by the user.\n",
                "tags": [
                    "Cluster"
                ],
                "summary": "Synchronizes the repository data between nsx managers.",
                "x-vmw-nsx-module": "ClusterNodeVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "PerformRepoSyncRepo_sync"
            }
        },
        "/switching-profiles/{switching-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BaseSwitchingProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates the user-configurable parameters of a switching profile. Only the qos,\nport-mirroring, spoof-guard and port-security switching profiles can be modified.\nYou cannot modify the ipfix or ip-discovery switching profiles.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "switching-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BaseSwitchingProfile"
                        },
                        "required": true,
                        "name": "BaseSwitchingProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Update a Switching Profile",
                "x-vmw-nsx-module": "BaseSwitchingProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateSwitchingProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BaseSwitchingProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified switching profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "switching-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get Switching Profile by ID",
                "x-vmw-nsx-module": "BaseSwitchingProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetSwitchingProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified switching profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "switching-profile-id",
                        "in": "path"
                    },
                    {
                        "description": "force unbinding of logical switches and ports from a switching profile",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "unbind"
                    }
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Delete a Switching Profile",
                "x-vmw-nsx-module": "BaseSwitchingProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteSwitchingProfile"
            }
        },
        "/dhcp/relays/{relay-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified dhcp relay service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "relay-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayService"
                        },
                        "required": true,
                        "name": "DhcpRelayService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a DHCP Relay Service",
                "x-vmw-nsx-module": "DhcpRelay",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateDhcpRelay"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the dhcp relay service information.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "relay-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read a DHCP Relay Service",
                "x-vmw-nsx-module": "DhcpRelay",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadDhcpRelay"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified dhcp relay service.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "relay-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a DHCP Relay Service",
                "x-vmw-nsx-module": "DhcpRelay",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteDhcpRelay"
            }
        },
        "/node/services/http?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Start the http service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Start the http service",
                "x-vmw-nsx-module": "NodeProxyService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateProxyServiceActionStart"
            }
        },
        "/vpn/l2vpn/sessions/{l2vpn-session-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VpnSession"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Edit a specific L2VPN session",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "l2vpn-session-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/L2VpnSession"
                        },
                        "required": true,
                        "name": "L2VpnSession",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Edit a L2VPN session",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateL2VpnSession"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a specific L2VPN session. If there are any logical switch ports attached to it, those needs to be deleted first.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "l2vpn-session-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Delete a L2VPN session",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteL2VpnSession"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VpnSession"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a specific L2VPN session",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "l2vpn-session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get a L2VPN session",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetL2VpnSession"
            }
        },
        "/node?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restarts or shuts down the NSX Manager appliance.",
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart or shutdown node",
                "x-vmw-nsx-module": "Node",
                "consumes": [
                    "application/json"
                ],
                "operationId": "RestartOrShutdownNodeRestart"
            }
        },
        "/node/network/interfaces/{interface-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeNetworkInterfaceProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates the specified interface properties. You cannot change\nthe properties <code>ip_configuration</code>,\n<code>ip_addresses</code>, or <code>plane</code>. NSX\nManager must have a static IP address.\nYou must use NSX CLI to configure a controller or an edge node.\n",
                "parameters": [
                    {
                        "description": "ID of interface to update",
                        "required": true,
                        "type": "string",
                        "name": "interface-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeNetworkInterfaceProperties"
                        },
                        "required": true,
                        "name": "NodeNetworkInterfaceProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update the NSX Manager's Network Interface",
                "x-vmw-nsx-module": "NetworkInterfaceModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNodeInterface"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeNetworkInterfaceProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns detailed information about the specified interface. Interface\ninformation includes MTU, broadcast and host IP addresses, link and admin\nstatus, MAC address, network  mask, and the IP configuration method.\n",
                "parameters": [
                    {
                        "description": "ID of interface to read",
                        "required": true,
                        "type": "string",
                        "name": "interface-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read the NSX Manager's Network Interface",
                "x-vmw-nsx-module": "NetworkInterfaceModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeInterface"
            }
        },
        "/node/services/ssh": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeSshServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update ssh service properties",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeSshServiceProperties"
                        },
                        "required": true,
                        "name": "NodeSshServiceProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update ssh service properties",
                "x-vmw-nsx-module": "NodeSSHService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateSSHService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeSshServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read ssh service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read ssh service properties",
                "x-vmw-nsx-module": "NodeSSHService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadSSHService"
            }
        },
        "/bridge-endpoints/{endpoint-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpointStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the status for the Bridge Endpoint of the given Endpoint id",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "endpoint-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Returns status of a specified Bridge Endpoint",
                "x-vmw-nsx-module": "AggSvcBridging",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetBridgeEndpointStatus"
            }
        },
        "/loadbalancer/pools/{pool-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPool"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a load balancer pool.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbPool"
                        },
                        "required": true,
                        "name": "LbPool",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer pool",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerPool"
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPool"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "For ADD_MEMBERS, pool members will be created and added to load balancer\npool. This action is only valid for static pool members.\nFor REMOVE_MEMBERS, pool members will be removed from load balancer pool\nvia IP and port in pool member settings. This action is only valid for\nstatic pool members.\nFor UPDATE_MEMBERS, pool members admin state will be updated. This action\nis valid for both static pool members and dynamic pool members. For dynamic\npool members, this update will be stored in customized_members field in load\nbalancer pool member group.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/PoolMemberSettingList"
                        },
                        "required": true,
                        "name": "PoolMemberSettingList",
                        "in": "body"
                    },
                    {
                        "enum": [
                            "ADD_MEMBERS",
                            "REMOVE_MEMBERS",
                            "UPDATE_MEMBERS"
                        ],
                        "description": "Specifies addition, removal and modification action",
                        "required": true,
                        "in": "query",
                        "type": "string",
                        "name": "action"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Add, remove, or modify load balancer pool members",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "PerformPoolMemberAction"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a load balancer pool.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a load balancer pool",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLoadBalancerPool"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPool"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a load balancer pool.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a load balancer pool",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerPool"
            }
        },
        "/firewall/sections/{section-id}?action=update_with_rules": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionRuleList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies existing firewall section along with its association with rules.\nWhen invoked on a large number of rules, this API is supported only at low\nrates of invocation (not more than 2 times per minute). The typical latency\nof this API with about 1024 rules is about 15 seconds in a cluster setup.\nThis API should not be invoked with large payloads at automation speeds.\n\nInstead, to update rule content, use:\nPUT /api/v1/firewall/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt;\n\nSimultaneous update (modify) operations on same section are not allowed to\nprevent overwriting stale contents to firewall section. If a concurrent\nupdate is performed, HTTP response code 409 will be returned to the client\noperating on stale data. That client should retrieve the firewall section\nagain and re-apply its update.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionRuleList"
                        },
                        "required": true,
                        "name": "FirewallSectionRuleList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Section, Including Its Rules",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateSectionWithRulesUpdate_with_rules"
            }
        },
        "/node/rabbitmq-management-port": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Set RabbitMQ management port",
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Set RabbitMQ management port",
                "x-vmw-nsx-module": "RabbitMQModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "SetRabbitMQManagementPort"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PortStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns status as true if RabbitMQ management port is enabled else false",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Check if RabbitMQ management port is enabled or not",
                "x-vmw-nsx-module": "RabbitMQModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CheckRabbitMQManagementPort"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete RabbitMQ management port",
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Delete RabbitMQ management port",
                "x-vmw-nsx-module": "RabbitMQModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DELETERabbitMQManagementPort"
            }
        },
        "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes?action=upgrade": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Upgrade service VMs using newer version of OVF.\n\nIn case of HA, the stand-by service VM will be upgrade first. Once it has been upgraded,\nit switches to be the Active one and then the other VM will be upgrade.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Upgrade service VMs using newer version of OVF",
                "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpgradeServiceVMsUpgrade"
            }
        },
        "/licenses/{license-key}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/License"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deprecated. Use GET /licenses API instead.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "license-key",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Deprecated. Get license properties for license identified by the license-key",
                "x-vmw-nsx-module": "License",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLicenseByKey"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deprecated. Use POST /licenses?action=delete API instead.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "license-key",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Deprecated. Remove a license identified by the license-key",
                "x-vmw-nsx-module": "License",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLicense"
            }
        },
        "/licenses/licenses-usage": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FeatureUsageList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns usage report of all registered modules\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Get usage report of all registered modules",
                "x-vmw-nsx-module": "License",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLicenseUsageReport"
            }
        },
        "/aaa/vidm/groups": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VidmInfoListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get all the User Groups where vIDM display name matches the search key case insensitively. The search key is checked to be a substring of display name. This is a non paginated API.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "Search string to search for.\n",
                        "required": true,
                        "type": "string",
                        "name": "search_string",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Get all the User Groups where vIDM display name matches the search key case insensitively. The search key is checked to be a substring of display name. This is a non paginated API.",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetGroupVidmSearchResult"
            }
        },
        "/logical-ports": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LogicalPort"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new logical switch port. The required parameters are the\nassociated logical_switch_id and admin_state (UP or DOWN). Optional\nparameters are the attachment and switching_profile_ids. If you don't\nspecify switching_profile_ids, default switching profiles are assigned to\nthe port. If you don't specify an attachment, the switch port remains\nempty. To configure an attachment, you must specify an id, and\noptionally you can specify an attachment_type (VIF or LOGICALROUTER).\nThe attachment_type is VIF by default.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalPort"
                        },
                        "required": true,
                        "name": "LogicalPort",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Create a Logical Port",
                "x-vmw-nsx-module": "LogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLogicalPort"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalPortListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all configured logical switch ports. Logical\nswitch ports connect to VM virtual network interface cards (NICs). Each\nlogical port is associated with one logical switch.\n",
                "parameters": [
                    {
                        "description": "Logical Port attachment Id",
                        "required": false,
                        "type": "string",
                        "name": "attachment_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "VIF",
                            "LOGICALROUTER",
                            "BRIDGEENDPOINT",
                            "DHCP_SERVICE",
                            "METADATA_PROXY",
                            "L2VPN_SESSION",
                            "NONE"
                        ],
                        "description": "Type of attachment for logical port; for query only.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "attachment_type"
                    },
                    {
                        "description": "Bridge Cluster identifier",
                        "required": false,
                        "type": "string",
                        "name": "bridge_cluster_id",
                        "in": "query"
                    },
                    {
                        "description": "Only container VIF logical ports will be returned if true",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "container_ports_only"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Flag to enable showing of transit logical port.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "diagnostic"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Logical Switch identifier",
                        "required": false,
                        "type": "string",
                        "name": "logical_switch_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "ID of the VIF of type PARENT",
                        "required": false,
                        "type": "string",
                        "name": "parent_vif_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Network Profile identifier",
                        "required": false,
                        "type": "string",
                        "name": "switching_profile_id",
                        "in": "query"
                    },
                    {
                        "description": "Transport node identifier",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    },
                    {
                        "description": "Transport zone identifier",
                        "required": false,
                        "type": "string",
                        "name": "transport_zone_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "List All Logical Ports",
                "x-vmw-nsx-module": "LogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLogicalPorts"
            }
        },
        "/cluster?action=summarize_inventory_to_remote": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Request one-time inventory summary. The backup will be uploaded using the\nsame server configuration as for an automatic backup.\n",
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Request one-time inventory summary.",
                "x-vmw-nsx-module": "BackupConfiguration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "RequestOnetimeInventorySummarySummarize_inventory_to_remote"
            }
        },
        "/logical-routers/{logical-router-id}/routing/static-routes/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StaticRoute"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a specific static route on the specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/StaticRoute"
                        },
                        "required": true,
                        "name": "StaticRoute",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a specific Static Route Rule on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateStaticRoute"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StaticRoute"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read a specific static routes on the specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get a specific Static Route on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadStaticRoute"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes a specific static route on the specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a specific Static Route on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteStaticRoute"
            }
        },
        "/logical-ports/{lport-id}/state": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalPortState"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns transport node id for a specified logical port. Also returns\ninformation about all address bindings of the specified logical port. This\nincludes address bindings discovered via various snooping methods like ARP\nsnooping, DHCP snooping etc. and addressing bindings that are realized\nbased on user configuration.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lport-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get realized state & location of a logical port",
                "x-vmw-nsx-module": "LogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalPortState"
            }
        },
        "/fabric/nodes/{node-id}?action=restart_inventory_sync": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart the inventory sync for the node if it is currently internally paused.\nAfter this action the next inventory sync coming from the node is processed.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Restart the inventory sync for the node if it is paused currently.",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "RestartInventorySyncRestart_inventory_sync"
            }
        },
        "/node/tasks/{task-id}/response": {
            "get": {
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "200": {
                        "description": "OK"
                    },
                    "202": {
                        "description": "Accepted"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "303": {
                        "description": "See Other"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "410": {
                        "description": "Gone"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "502": {
                        "description": "Bad Gateway"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                },
                "description": "Read asynchronous task response",
                "parameters": [
                    {
                        "description": "ID of task to read",
                        "required": true,
                        "type": "string",
                        "name": "task-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read asynchronous task response",
                "x-vmw-nsx-module": "ApplianceManagementTaskModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadAsnycApplianceManagementTaskResponse"
            }
        },
        "/node/services/cluster_manager?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the cluster boot manager service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the cluster boot manager service",
                "x-vmw-nsx-module": "NodeClusterBootManagerService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateClusterBootManagerServiceActionStop"
            }
        },
        "/cluster/backups/history": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BackupOperationHistory"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get history of previous backup operations\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Get backup history",
                "x-vmw-nsx-module": "BackupConfiguration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetBackupHistory"
            }
        },
        "/bridge-endpoints/{bridgeendpoint-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpoint"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies a existing bridge endpoint.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bridgeendpoint-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpoint"
                        },
                        "required": true,
                        "name": "BridgeEndpoint",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update a Bridge Endpoint",
                "x-vmw-nsx-module": "BridgeEndpoint",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateBridgeEndpoint"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpoint"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified bridge endpoint.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bridgeendpoint-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get Information about a bridge endpoint",
                "x-vmw-nsx-module": "BridgeEndpoint",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetBridgeEndpoint"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified Bridge Endpoint.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bridgeendpoint-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete a Bridge Endpoint",
                "x-vmw-nsx-module": "BridgeEndpoint",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteBridgeEndpoint"
            }
        },
        "/cluster?action=backup_to_remote": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Request one-time backup. The backup will be uploaded using the\nsame server configuration as for automatic backup.\n",
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Request one-time backup",
                "x-vmw-nsx-module": "BackupConfiguration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "RequestOnetimeBackupBackup_to_remote"
            }
        },
        "/cluster/backups/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CurrentBackupOperationStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get status of active backup operations\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Get backup status",
                "x-vmw-nsx-module": "BackupConfiguration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetBackupStatus"
            }
        },
        "/upgrade/version-whitelist/{component_type}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update the version whitelist for the specified component type (HOST, EDGE, CCP, MP).",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "component_type",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/VersionList"
                        },
                        "required": true,
                        "name": "VersionList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Update the version whitelist for the specified component type",
                "x-vmw-nsx-module": "VersionWhitelist",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateVersionWhitelist"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AcceptableComponentVersion"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get whitelist of versions for a component. Component can include HOST, EDGE, CCP, MP",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "component_type",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get the version whitelist for the specified component",
                "x-vmw-nsx-module": "VersionWhitelist",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetVersionWhitelistByComponent"
            }
        },
        "/node/services/telemetry?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop Telemetry service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop Telemetry service",
                "x-vmw-nsx-module": "NodePhonehomeCoordinatorService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreatePhonehomeCoordinatorServiceActionStop"
            }
        },
        "/node/logs/{log-name}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeLogProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "For a single specified log file, lists the filename, file size, and\nlast-modified time.\n",
                "parameters": [
                    {
                        "description": "Name of log file to read properties",
                        "required": true,
                        "type": "string",
                        "name": "log-name",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json",
                    "application/octet-stream"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Read node log properties",
                "x-vmw-nsx-module": "NodeLogs",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeLog"
            }
        },
        "/serviceinsertion/sections/{section-id}?action=revise_with_rules": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSectionRuleList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies an existing serviceinsertion section along with its relative position\namong other serviceinsertion sections with rules. When invoked on a large number\nof rules, this API is supported only at low rates of invocation (not more\nthan 2 times per minute). The typical latency of this API with about 1024\nrules is about 15 seconds in a cluster setup. This API should not be\ninvoked with large payloads at automation speeds.\n\nInstead, to move a section above or below another section, use:\nPOST /api/v1/serviceinsertion/sections/&lt;section-id&gt;?action=revise\n\nTo modify rules, use:\nPUT /api/v1/serviceinsertion/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt;\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSectionRuleList"
                        },
                        "required": true,
                        "name": "ServiceInsertionSectionRuleList",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Section with Rules",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReviseServiceInsertionSectionWithRulesRevise_with_rules"
            }
        },
        "/serviceinsertion/sections/{section-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSection"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified section, but does not modify the section's associated rules.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSection"
                        },
                        "required": true,
                        "name": "ServiceInsertionSection",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Section",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateServiceInsertionSection"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Removes serviceinsertion section from the system. ServiceInsertion section with\nrules can only be deleted by passing \"cascade=true\" parameter.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "description": "Flag to cascade delete of this object to all it's child objects.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "cascade"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete an Existing Section and Its Associated Rules",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteServiceInsertionSection"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSection"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about serviceinsertion section for the identifier.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get an Existing Section",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetServiceInsertionSection"
            }
        },
        "/ipfix/configs/{config-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixConfig"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update an existing IPFIX configuration",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "config-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IpfixConfig"
                        },
                        "required": true,
                        "name": "IpfixConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Update an existing IPFIX configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIpfixConfig"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete an existing IPFIX configuration",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "config-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Delete an existing IPFIX configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIpfixConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixConfig"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get an existing IPFIX configuration",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "config-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Get an existing IPFIX configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIpfixConfig"
            }
        },
        "/dhcp/servers/{server-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalDhcpServer"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a DHCP server",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalDhcpServer"
                        },
                        "required": true,
                        "name": "LogicalDhcpServer",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a DHCP server",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateDhcpServer"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a DHCP server",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a DHCP server",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteDhcpServer"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalDhcpServer"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a DHCP server",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a DHCP server",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadDhcpServer"
            }
        },
        "/vpn/l2vpn/sessions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/L2VpnSession"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create L2VPN session and bind to a L2VPNService",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/L2VpnSession"
                        },
                        "required": true,
                        "name": "L2VpnSession",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Create L2VPN session",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateL2VpnSession"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VpnSessionListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get paginated list of all L2VPN sessions",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Id of the L2Vpn Service",
                        "required": false,
                        "type": "string",
                        "name": "l2vpn_service_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get all L2VPN sessions",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListL2VpnSessions"
            }
        },
        "/loadbalancer/tcp-profiles/{tcp-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbTcpProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a load balancer TCP profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "tcp-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbTcpProfile"
                        },
                        "required": true,
                        "name": "LbTcpProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer TCP profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerTcpProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a load balancer TCP profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "tcp-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a load balancer TCP profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLoadBalancerTcpProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbTcpProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a load balancer TCP profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "tcp-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a load balancer TCP profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerTcpProfile"
            }
        },
        "/app-discovery/sessions/{session-id}/report/app-info-and-vm?format=csv": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppInfoHostVmListInCsvFormat"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns app discovery results in CSV format, each row contains discovered app information\nand the id of the vms this app is discovered from for a given set of vms\n(or for all vms belong to this session when no vm id is passed in)\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ReportAppResultsForVmsRequestParameters"
                        },
                        "required": true,
                        "name": "ReportAppResultsForVmsRequestParameters",
                        "in": "body"
                    }
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Export app discovery results in CSV format",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppdiscoveryResultAppInfoAndHostVmInCsvFormatCsv"
            }
        },
        "/serviceinsertion/sections/{section-id}/rules/{rule-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionRule"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies existing serviceinsertion rule in a serviceinsertion section.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionRule"
                        },
                        "required": true,
                        "name": "ServiceInsertionRule",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Rule",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateServiceInsertionRule"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete existing serviceinsertion rule in a serviceinsertion section.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete an Existing Rule",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteServiceInsertionRule"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionRule"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return existing serviceinsertion rule information in a serviceinsertion section.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Read an Existing Rule",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetServiceInsertionRule"
            }
        },
        "/node/services/telemetry/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read Telemetry service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read Telemetry service status",
                "x-vmw-nsx-module": "NodePhonehomeCoordinatorService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadPhonehomeCoordinatorServiceStatus"
            }
        },
        "/node/mode": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeMode"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns current Node Mode.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "NodeMode",
                "x-vmw-nsx-module": "ApplianceModes",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNodeMode"
            }
        },
        "/edge-clusters": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/EdgeCluster"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new edge cluster.\nIt only supports homogeneous members.\nThe TransportNodes backed by EdgeNode are only allowed in cluster members.\nDeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is\nrecommended to be the same. EdgeCluster supports members of different\ndeployment types.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/EdgeCluster"
                        },
                        "required": true,
                        "name": "EdgeCluster",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create Edge Cluster",
                "x-vmw-nsx-module": "EdgeClusters",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateEdgeCluster"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EdgeClusterListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the configured edge clusters, which enable you to\ngroup together transport nodes of the type EdgeNode and apply fabric\nprofiles to all members of the edge cluster. Each edge node can participate\nin only one edge cluster.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List Edge Clusters",
                "x-vmw-nsx-module": "EdgeClusters",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListEdgeClusters"
            }
        },
        "/fabric/nodes/{target-node-id}/{target-uri}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Invoke PUT request on target fabric node",
                "parameters": [
                    {
                        "description": "Target node UUID",
                        "required": true,
                        "type": "string",
                        "name": "target-node-id",
                        "in": "path"
                    },
                    {
                        "description": "URI of API to invoke on target node",
                        "required": true,
                        "type": "string",
                        "name": "target-uri",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Invoke PUT request on target fabric node",
                "x-vmw-nsx-module": "CentralApiModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "InvokePutFabricCentralAPI"
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Invoke POST request on target fabric node",
                "parameters": [
                    {
                        "description": "Target node UUID",
                        "required": true,
                        "type": "string",
                        "name": "target-node-id",
                        "in": "path"
                    },
                    {
                        "description": "URI of API to invoke on target node",
                        "required": true,
                        "type": "string",
                        "name": "target-uri",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Invoke POST request on target fabric node",
                "x-vmw-nsx-module": "CentralApiModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "InvokePostFabricCentralAPI"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Invoke DELETE request on target fabric node",
                "parameters": [
                    {
                        "description": "Target node UUID",
                        "required": true,
                        "type": "string",
                        "name": "target-node-id",
                        "in": "path"
                    },
                    {
                        "description": "URI of API to invoke on target node",
                        "required": true,
                        "type": "string",
                        "name": "target-uri",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Invoke DELETE request on target fabric node",
                "x-vmw-nsx-module": "CentralApiModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "InvokeDeleteFabricCentralAPI"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Invoke GET request on target fabric node",
                "parameters": [
                    {
                        "description": "Target node UUID",
                        "required": true,
                        "type": "string",
                        "name": "target-node-id",
                        "in": "path"
                    },
                    {
                        "description": "URI of API to invoke on target node",
                        "required": true,
                        "type": "string",
                        "name": "target-uri",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Invoke GET request on target fabric node",
                "x-vmw-nsx-module": "CentralApiModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "InvokeGetFabricCentralAPI"
            }
        },
        "/trust-management/csrs/{csr-id}?action=import": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/CertificateList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Imports a certificate authority (CA)-signed certificate for a CSR. This\naction links the certificate to the private key created by the CSR. The\npem_encoded string in the request body is the signed certificate provided by\nyour CA in response to the CSR that you provide to them. The import POST\naction automatically deletes the associated CSR.\n",
                "parameters": [
                    {
                        "description": "CSR this certificate is associated with",
                        "required": true,
                        "type": "string",
                        "name": "csr-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/TrustObjectData"
                        },
                        "required": true,
                        "name": "TrustObjectData",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Import a Certificate Associated with an Approved CSR",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ImportCertificateImport"
            }
        },
        "/pktcap/session/{session-id}?action=terminate": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PacketCaptureSession"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Terminate the packet capture session by session id.\n",
                "parameters": [
                    {
                        "description": "Packet capture session id",
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Terminate the packet capture session by session id",
                "x-vmw-nsx-module": "PacketCapture",
                "consumes": [
                    "application/json"
                ],
                "operationId": "TerminatePacketCaptureSessionTerminate"
            }
        },
        "/cluster/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns status information for the NSX cluster control role and management\nrole.\n",
                "parameters": [
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read Cluster Status",
                "x-vmw-nsx-module": "ClusterManagement",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterStatus"
            }
        },
        "/fabric/vifs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VirtualNetworkInterfaceListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all VIFs. A virtual network interface aggregates\nnetwork interfaces into a logical interface unit that is indistinuishable\nfrom a physical network interface.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Id of the host where this vif is located.",
                        "required": false,
                        "type": "string",
                        "name": "host_id",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "LPort Attachment Id of the virtual network interface.",
                        "required": false,
                        "type": "string",
                        "name": "lport_attachment_id",
                        "in": "query"
                    },
                    {
                        "description": "External id of the virtual machine.",
                        "required": false,
                        "type": "string",
                        "name": "owner_vm_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "External id of the virtual machine.",
                        "required": false,
                        "type": "string",
                        "name": "vm_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return the List of Virtual Network Interfaces (VIFs)",
                "x-vmw-nsx-module": "Inventory",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListVifs"
            }
        },
        "/logical-routers/{logical-router-id}/routing/bgp/community-lists": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BGPCommunityList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Add a new BGP Community List on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BGPCommunityList"
                        },
                        "required": true,
                        "name": "BGPCommunityList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Create a new BGP community list on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateBGPCommunityList"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BGPCommunityListListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Paginated list of BGP Community Lists on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Paginated list of BGP community lists on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListBGPCommunityLists"
            }
        },
        "/node/services/cm-inventory/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read manager service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read manager service status",
                "x-vmw-nsx-module": "NodeCminventoryService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadCminventoryServiceStatus"
            }
        },
        "/node/services/telemetry": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read Telemetry service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read Telemetry service properties",
                "x-vmw-nsx-module": "NodePhonehomeCoordinatorService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadPhonehomeCoordinatorService"
            }
        },
        "/node/services/ui-service/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read ui service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read ui service status",
                "x-vmw-nsx-module": "NodeUiServiceService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNsxUiServiceServiceStatus"
            }
        },
        "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes?action=deploy": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deploys one service VM as standalone, or two service VMs as HA where one VM is active and another one is standby.\n\nDuring the deployment of service VMs, service will be set up based on deployment events using callbacks.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Deploy and set up service VMs either as standalone or HA",
                "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeployServiceVMsDeploy"
            }
        },
        "/vpn/ipsec/ike-profiles/{ipsec-vpn-ike-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNIKEProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Edit custom IKE Profile. System owned profiles are non editable.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-ike-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNIKEProfile"
                        },
                        "required": true,
                        "name": "IPSecVPNIKEProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Edit custom IKE Profile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIPSecVPNIKEProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNIKEProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get custom IKE Profile, given the particular id.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-ike-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IKE Profile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNIKEProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete custom IKE Profile. Profile can not be deleted if profile has references to it.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-ike-profile-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Delete custom IKE Profile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIPSecVPNIKEProfile"
            }
        },
        "/node/users/{userid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeUserProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates attributes of an existing NSX Manager appliance user. This method\ncannot be used to add a new user. Modifiable attributes include the\nusername, full name of the user, and password. If you specify a password in\na PUT request, it is not returned in the response. Nor is it returned in a\nGET request.\n",
                "parameters": [
                    {
                        "description": "User id of the user",
                        "required": true,
                        "type": "string",
                        "name": "userid",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeUserProperties"
                        },
                        "required": true,
                        "name": "NodeUserProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update node user",
                "x-vmw-nsx-module": "NodeUsers",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNodeUser"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeUserProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified user who is configued to log in to the\nNSX Manager appliance\n",
                "parameters": [
                    {
                        "description": "User id of the user",
                        "required": true,
                        "type": "string",
                        "name": "userid",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read node user",
                "x-vmw-nsx-module": "NodeUsers",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeUser"
            }
        },
        "/loadbalancer/rules": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbRule"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a load balancer rule.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbRule"
                        },
                        "required": true,
                        "name": "LbRule",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer rule",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerRule"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbRuleListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a paginated list of load balancer rules.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a paginated list of load balancer rules",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerRules"
            }
        },
        "/ipfix-collector-profiles/{ipfix-collector-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorUpmProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update an existing IPFIX collector profile with profile ID and modified\nproperties.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipfix-collector-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorUpmProfile"
                        },
                        "required": true,
                        "name": "IpfixCollectorUpmProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unified Nsgroup Profile Management"
                ],
                "summary": "Update an existing IPFIX collector profile",
                "x-vmw-nsx-module": "UpmIpfixCollector",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIpfixCollectorUpmProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorUpmProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get an existing IPFIX collector profile by profile ID.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipfix-collector-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unified Nsgroup Profile Management"
                ],
                "summary": "Get an existing IPFIX collector profile",
                "x-vmw-nsx-module": "UpmIpfixCollector",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIpfixCollectorUpmProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete an existing IPFIX collector profile by ID.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipfix-collector-profile-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Unified Nsgroup Profile Management"
                ],
                "summary": "Delete an existing IPFIX collector profile",
                "x-vmw-nsx-module": "UpmIpfixCollector",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIpfixCollectorUpmProfile"
            }
        },
        "/upgrade/upgrade-unit-groups/{group-id}/upgrade-unit/{upgrade-unit-id}?action=reorder": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Reorder an upgrade unit within the upgrade unit group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "upgrade-unit-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ReorderRequest"
                        },
                        "required": true,
                        "name": "ReorderRequest",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Reorder an upgrade unit within the upgrade unit group",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReorderUpgradeUnitReorder"
            }
        },
        "/migration/plan?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Start migration",
                "tags": [
                    "Migration"
                ],
                "summary": "Start migration",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "StartMigrationStart"
            }
        },
        "/configs/inventory": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InventoryConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return inventory configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configs"
                ],
                "summary": "Return inventory configuration",
                "x-vmw-nsx-module": "Inventory",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetInventoryConfig"
            }
        },
        "/firewall/sections/{section-id}/rules": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallRule"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new firewall rule in existing firewall section. Adding firewall rule\nto a section modifies parent section entity and simultaneous update (modify)\noperations on same section are not allowed to prevent overwriting stale\ncontent to firewall section. If a concurrent update is performed, HTTP\nresponse code 409 will be returned to the client operating on stale data.\nThat client should retrieve the firewall section again and re-apply its\nupdate.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallRule"
                        },
                        "required": true,
                        "name": "FirewallRule",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Add a Single Rule in a Section",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddRuleInSection"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallRuleListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return all firewall rule(s) information for a given firewall section.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "description": "AppliedTo's referenced by this section or section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "applied_tos",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Destinations referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "destinations",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "FILTER",
                            "SEARCH"
                        ],
                        "description": "Filter type",
                        "default": "FILTER",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "filter_type"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "Return invalid references in results.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "search_invalid_references"
                    },
                    {
                        "description": "NSService referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "services",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Sources referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "sources",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get All the Rules for a Section",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRules"
            }
        },
        "/migration/migration-units-stats": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitTypeStatsList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get migration units stats",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Synchronize before returning migration unit stats",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "sync"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get migration units stats",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationUnitsStats"
            }
        },
        "/transport-nodes/{transportnode-id}?action=resync_host_config": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Resync the TransportNode configuration on a host.\nIt is similar to updating the TransportNode with existing configuration,\nbut force synce these configurations to the host (no backend optimizations).\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "transportnode-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Resync a Transport Node",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ResyncTransportNodeResync_host_config"
            }
        },
        "/logical-switches/{lswitch-id}/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitchStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the number of ports assigned to a logical switch.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lswitch-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get Logical Switch runtime status info for a given logical switch",
                "x-vmw-nsx-module": "LogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalSwitchStatus"
            }
        },
        "/dhcp/servers/{server-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpStatistics"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the statistics of the given dhcp server.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get DHCP statistics with given dhcp server id",
                "x-vmw-nsx-module": "AggSvcDhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetDhcpStatistics"
            }
        },
        "/dhcp/relay-profiles/{relay-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified dhcp relay profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "relay-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayProfile"
                        },
                        "required": true,
                        "name": "DhcpRelayProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a DHCP Relay Profile",
                "x-vmw-nsx-module": "DhcpRelay",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateDhcpRelayProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified dhcp relay profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "relay-profile-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a DHCP Relay Profile",
                "x-vmw-nsx-module": "DhcpRelay",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteDhcpRelayProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified dhcp relay profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "relay-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read a DHCP Relay Profile",
                "x-vmw-nsx-module": "DhcpRelay",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadDhcpRelayProfile"
            }
        },
        "/administration/audit-logs": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuditLogListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "502": {
                        "description": "Bad Gateway"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "This API is executed on a manager node to display audit logs from all nodes\ninside the management plane cluster. An audit log collection will be\ntriggered if the local master audit log is outdated.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AuditLogRequest"
                        },
                        "required": true,
                        "name": "AuditLogRequest",
                        "in": "body"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "format": "int64",
                        "type": "integer",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Fields to include in query results",
                        "type": "string",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 100,
                        "maximum": 100,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Collect audit logs from registered manager nodes",
                "x-vmw-nsx-module": "NodeAuditLog",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CollectAuditLogs"
            }
        },
        "/loadbalancer/pools": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbPool"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a load balancer pool.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbPool"
                        },
                        "required": true,
                        "name": "LbPool",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer pool",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerPool"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPoolListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a paginated list of load balancer pools.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a paginated list of load balancer pools",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerPools"
            }
        },
        "/logical-switches/{lswitch-id}/mac-table?format=csv": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MacAddressCsvListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns MAC table of a specified logical switch in CSV format from the given transport\nnode if a transport node id is given in the query parameter from the\nCentral Controller Plane.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lswitch-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get MAC Table for Logical Switch of the Given ID (lswitch-id)",
                "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalSwitchMacTableInCsvFormatCsv"
            }
        },
        "/migration/migration-unit-groups/{group-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update the migration unit group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitGroup"
                        },
                        "required": true,
                        "name": "MigrationUnitGroup",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Update the migration unit group",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateMigrationUnitGroup"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete the migration unit group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Delete the migration unit group",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteMigrationUnitGroup"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return migration unit group information",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "description": "Flag indicating whether to return the summary",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "summary"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Return migration unit group information",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationUnitGroup"
            }
        },
        "/normalizations": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NormalizedResourceListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the list of normalized resources based on the query parameters.\nId and Type of the resource on which the normalizations is to be performed,\nare to be specified as query parameters in the URI. The target resource\ntypes to which normalization is to be done should also be specified as\nquery parameter.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "enum": [
                            "NSGroup",
                            "IPSet",
                            "MACSet",
                            "LogicalSwitch",
                            "LogicalPort",
                            "DirectoryGroup"
                        ],
                        "description": "Resource type valid for use as target in normalization API.",
                        "required": true,
                        "in": "query",
                        "type": "string",
                        "name": "preferred_normalization_type"
                    },
                    {
                        "description": "Identifier of the resource on which normalization is to be performed",
                        "required": true,
                        "type": "string",
                        "name": "resource_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "NSGroup"
                        ],
                        "description": "Resource type valid for use as source in normalization API.",
                        "required": true,
                        "in": "query",
                        "type": "string",
                        "name": "resource_type"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Normalization"
                ],
                "summary": "Get normalizations based on the query parameters",
                "x-vmw-nsx-module": "Normalization",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNormalizations"
            }
        },
        "/vpn/ipsec/sessions/{session-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNSessionStatistics"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get statistics of a vpn session across all tunnels and IKE session. Query parameter \"source=realtime\" is the only supported source.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec VPN session statistics",
                "x-vmw-nsx-module": "VPNStatistics",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNSessionStatistics"
            }
        },
        "/logical-routers/{logical-router-id}?action=reprocess": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Reprocess logical router configuration and configuration of related entities like logical router ports, static routing, etc.\nAny missing Updates are published to controller.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Reprocesses a logical router configuration and publish updates to controller",
                "x-vmw-nsx-module": "LogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReProcessLogicalRouterReprocess"
            }
        },
        "/bridge-clusters": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/BridgeCluster"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a bridge cluster. It is collection of transport nodes\nthat will do the bridging for overlay network to vlan networks.\nBridge cluster may have one or more transport nodes\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/BridgeCluster"
                        },
                        "required": true,
                        "name": "BridgeCluster",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create a Bridge Cluster",
                "x-vmw-nsx-module": "BridgeCluster",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateBridgeCluster"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeClusterListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all configured bridge clusters\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List All Bridge Clusters",
                "x-vmw-nsx-module": "BridgeCluster",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListBridgeClusters"
            }
        },
        "/app-discovery/sessions/{session-id}/ns-groups": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSGroupMetaInfoListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the ns groups that was part of the application discovery session |\nwhile it was started\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "ns-groups in this application discovery session",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppDiscoverySessionNsGroups"
            }
        },
        "/node/services/nsx-message-bus?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX Message Bus service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX Message Bus service",
                "x-vmw-nsx-module": "NodeNSXMessageBusService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNSXMessageBusServiceActionStart"
            }
        },
        "/realization-state-barrier/current": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CurrentRealizationStateBarrier"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the current global realization barrier number for NSX.\nThis method has been deprecated. To track realization state, use\nX-NSX-REQUESTID request header instead.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Realization"
                ],
                "summary": "Gets the current barrier number",
                "x-vmw-nsx-module": "RealizationStateBarrier",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetCurrentBarrier"
            }
        },
        "/cluster/nodes/deployments/{node-id}?action=delete": {
            "post": {
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Attempts to unregister and undeploy a specified auto-deployed cluster\nnode VM. If it is a member of a cluster, then the VM will be automatically\ndetached from the cluster before being unregistered and undeployed.\nAlternatively, if the original deployment attempt failed or the VM is\nnot found, cleans up the deployment information associated with the\ndeployment attempt.\nNote: If a VM has been successfully auto-deployed, then the associated\ndeployment information will not be deleted unless and until the VM is\nsuccessfully deleted.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "description": "Delete by force",
                        "type": "boolean",
                        "name": "force_delete",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Attempt to delete an auto-deployed cluster node VM",
                "x-vmw-nsx-module": "ClusterNodeVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteAutoDeployedClusterNodeVMDelete"
            }
        },
        "/cluster-profiles/{cluster-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifie a specified cluster profile. The body of the PUT request must\ninclude the resource_type.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "cluster-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ClusterProfile"
                        },
                        "required": true,
                        "name": "ClusterProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update a cluster profile",
                "x-vmw-nsx-module": "ClusterProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateClusterProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a specified cluster profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "cluster-profile-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete a cluster profile",
                "x-vmw-nsx-module": "ClusterProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteClusterProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified cluster profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "cluster-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get cluster profile by Id",
                "x-vmw-nsx-module": "ClusterProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetClusterProfile"
            }
        },
        "/fabric/nodes/{node-id}/network/interfaces/{interface-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInterfaceProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns detailed information about the specified interface. Interface\ninformation includes MTU, broadcast and host IP addresses, link and admin\nstatus, MAC address, network  mask, and the IP configuration method (static\nor DHCP).\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "interface-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Read the node's Network Interface",
                "x-vmw-nsx-module": "ApplianceStats",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadFabricNodeInterface"
            }
        },
        "/logical-routers/{logical-router-id}/debug-info?format=text": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "API to download below information as text which will be used\nfor debugging and troubleshooting.\n1) Logical router sub-components and ports.\n2) Routing configuration as sent to central control plane.\n3) TIER1 advertised network information.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "text/plain; charset=utf-8"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read the debug information for the logical router",
                "x-vmw-nsx-module": "LogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadDebugInfoText"
            }
        },
        "/logical-routers/{logical-router-id}/routing/bgp/neighbors/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BgpNeighborsStatusListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the status of all the BGP neighbors for the Logical Router of the given id. To get BGP neighbors status for the logical router from particular node, parameter \"transport_node_id=<transportnode_id>\" needs to be specified. The query parameter \"source=cached\" is not supported.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "Transport node id",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get the status of all the BGP neighbors for the Logical Router of the given id",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetBgpNeighborsStatus"
            }
        },
        "/transport-nodes/{node-id}/tunnels": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TunnelList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List of tunnels",
                "parameters": [
                    {
                        "description": "ID of transport node",
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "description": "BFD diagnostic code of Tunnel as defined in RFC 5880",
                        "enum": [
                            "0",
                            "NO_DIAGNOSTIC",
                            "1",
                            "CONTROL_DETECTION_TIME_EXPIRED",
                            "2",
                            "ECHO_FUNCTION_FAILED",
                            "3",
                            "NEIGHBOR_SIGNALED_SESSION_DOWN",
                            "4",
                            "FORWARDING_PLANE_RESET",
                            "5",
                            "PATH_DOWN",
                            "6",
                            "CONCATENATED_PATH_DOWN",
                            "7",
                            "ADMINISTRATIVELY_DOWN",
                            "8",
                            "REVERSE_CONCATENATED_PATH_DOWN"
                        ],
                        "type": "string",
                        "name": "bfd_diagnostic_code",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "string",
                        "name": "remote_node_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "Tunnel status",
                        "enum": [
                            "UP",
                            "DOWN"
                        ],
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transport Entities"
                ],
                "summary": "List of tunnels",
                "x-vmw-nsx-module": "Tunnel",
                "consumes": [
                    "application/json"
                ],
                "operationId": "QueryTunnels"
            }
        },
        "/upgrade/upgrade-unit-groups/aggregate-info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitGroupAggregateInfoListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return aggregate information of all upgrade unit groups",
                "parameters": [
                    {
                        "description": "Component type based on which upgrade unit groups to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Flag indicating whether to return summary",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "summary"
                    },
                    {
                        "description": "Synchronize before returning upgrade unit groups",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "sync"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Return aggregate information of all upgrade unit groups",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeUnitGroupAggregateInfo"
            }
        },
        "/pools/ip-subnets": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IpBlockSubnet"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Carves out a subnet of requested size from the specified IP block. The \"size\"\nparameter  and the \"block_id \" are the requireds field while invoking this API.\nIf the IP block has sufficient resources/space to allocate a subnet of specified size,\nthe response will contain all the details of the newly created subnet including the\ndisplay_name, description, cidr & allocation_ranges. Returns a conflict error\nif the IP block does not have enough resources/space to allocate a subnet of\nthe requested size.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IpBlockSubnet"
                        },
                        "required": true,
                        "name": "IpBlockSubnet",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Create subnet of specified size within an IP block",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIpBlockSubnet"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpBlockSubnetListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all subnets present within an IP address\nblock. Information includes subnet's id, display_name, description, cidr and\nallocation ranges.\n",
                "parameters": [
                    {
                        "required": false,
                        "type": "string",
                        "name": "block_id",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "List subnets within an IP block",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIpBlockSubnets"
            }
        },
        "/logical-routers/{logical-router-id}/routing/redistribution/rules": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RedistributionRuleList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies all route redistribution rules for the specified TIER0 logical\nrouter. Set the rules list to empty to delete/clear all rules.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/RedistributionRuleList"
                        },
                        "required": true,
                        "name": "RedistributionRuleList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update All the Redistribution Rules on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateRedistributionRuleList"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RedistributionRuleList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns all the route redistribution rules for the specified\nlogical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read All the Redistribution Rules on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadRedistributionRuleList"
            }
        },
        "/cluster/nodes/{node-id}/network/interfaces/{interface-id}/stats": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInterfaceStatisticsProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "On the specified interface, returns the number of received (rx), transmitted\n(tx), and dropped packets; the number of bytes and errors received and\ntransmitted on the interface; and the number of detected collisions.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "interface-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read the NSX Manager/Controller's Network Interface Statistics",
                "x-vmw-nsx-module": "ApplianceStats",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterNodeInterfaceStatistics"
            }
        },
        "/firewall/excludelist?action=remove_member": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceReference"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Remove an existing object from the exclude list",
                "parameters": [
                    {
                        "in": "query",
                        "description": "identifier of the object",
                        "required": true,
                        "maxLength": 64,
                        "type": "string",
                        "name": "object_id"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Remove an existing object from the exclude list",
                "x-vmw-nsx-module": "ExcludeList",
                "consumes": [
                    "application/json"
                ],
                "operationId": "RemoveMemberRemove_member"
            }
        },
        "/configs/management": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ManagementConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the NSX Management nodes global configuration.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ManagementConfig"
                        },
                        "required": true,
                        "name": "ManagementConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update NSX Management nodes global configuration",
                "x-vmw-nsx-module": "ConfigManagement",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateManagementConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ManagementConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the NSX Management nodes global configuration.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read NSX Management nodes global configuration.",
                "x-vmw-nsx-module": "ConfigManagement",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadManagementConfig"
            }
        },
        "/node/services/ntp/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read NTP service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read NTP service status",
                "x-vmw-nsx-module": "NodeNTPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNTPServiceStatus"
            }
        },
        "/logical-switches/{lswitch-id}/state": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitchState"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns current state of the logical switch configuration and details of only\nout-of-sync transport nodes.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lswitch-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get the realized state associated with provided logical switch id",
                "x-vmw-nsx-module": "LogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalSwitchState"
            }
        },
        "/node/logs/{log-name}/data": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "206": {
                        "description": "Partial Content"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "For a single specified log file, returns the content of the log file.\nThis method supports byte-range requests. To request just a portion of a\nlog file, supply an HTTP Range header, e.g. \"Range: bytes=<start>-<end>\".\n<end> is optional, and, if omitted, the file contents from start to the\nend of the file are returned.'\n",
                "parameters": [
                    {
                        "description": "Name of log to read",
                        "required": true,
                        "type": "string",
                        "name": "log-name",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Read node log contents",
                "x-vmw-nsx-module": "NodeLogs",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeLogData"
            }
        },
        "/vpn/l2vpn/services": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/L2VpnService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create L2VPN service for a given logical router",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/L2VpnService"
                        },
                        "required": true,
                        "name": "L2VpnService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Create L2VPN service",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateL2VpnService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VpnServiceListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get paginated list of all L2VPN services",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get all L2VPN services",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListL2VpnServices"
            }
        },
        "/ns-groups/{ns-group-id}/effective-ip-address-members": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EffectiveIPAddressMemberListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns effective ip address members of the specified NSGroup.\n",
                "parameters": [
                    {
                        "description": "NSGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-group-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Get Effective IPAddress translated from the NSGroup",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetEffectiveIPAddressMembers"
            }
        },
        "/fabric/discovered-nodes/{node-ext-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DiscoveredNode"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specific discovered node.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-ext-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return Discovered Node Information",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadDiscoveredNode"
            }
        },
        "/services": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LogicalService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a service that can be applied to one or more logical router ports.\nFor some service types, you must create a service-profile before you can\ncreate a service.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalService"
                        },
                        "required": true,
                        "name": "LogicalService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Create a Logical Router Service",
                "x-vmw-nsx-module": "LogicalService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalServiceListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all configured logical router services that can be\napplied to one or more logical router ports. You must create a\nservice-profile before you can create a service. Currently, only\nDhcpRelayService is supported.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "name": "resource_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "List all Logical Router Services",
                "x-vmw-nsx-module": "LogicalService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListServices"
            }
        },
        "/dhcp/relay-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a dhcp relay profile.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayProfile"
                        },
                        "required": true,
                        "name": "DhcpRelayProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Create a DHCP Relay Profile",
                "x-vmw-nsx-module": "DhcpRelay",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateDhcpRelayProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all dhcp relay profiles.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "List All DHCP Relay Profiles",
                "x-vmw-nsx-module": "DhcpRelay",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListDhcpRelayProfiles"
            }
        },
        "/upgrade/upgrade-units/{upgrade-unit-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnit"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a specific upgrade unit",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "upgrade-unit-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get a specific upgrade unit",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeUnit"
            }
        },
        "/upgrade/upgrade-unit-groups/{group-id}?action=reorder": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Reorder upgrade unit group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ReorderRequest"
                        },
                        "required": true,
                        "name": "ReorderRequest",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Reorder upgrade unit group",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReorderUpgradeUnitGroupReorder"
            }
        },
        "/lldp/transport-nodes/{node-id}/interfaces/{interface-name}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InterfaceNeighborProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read LLDP Neighbor Properties",
                "parameters": [
                    {
                        "description": "ID of transport node",
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "description": "Interface name to read",
                        "required": true,
                        "type": "string",
                        "name": "interface-name",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Read LLDP Neighbor Properties",
                "x-vmw-nsx-module": "Lldp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNeighborProperties"
            }
        },
        "/loadbalancer/virtual-servers/{virtual-server-id}?action=update_with_rules": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServerWithRule"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "It is used to update virtual servers, the associated rules and update the\nbinding of virtual server and rules.\nTo add new rules, make sure the rules which have no identifier specified,\nthe new rules are automatically generated and associated to the virtual\nserver.\nTo delete old rules, the rules should not be configured in new action, the\nUUID of deleted rules should be also removed from rule_ids.\nTo update rules, the rules should be specified with new change and\nconfigured with identifier.\nIf there are some rules which are not modified, those rule should not be\nspecified in the rules list, the UUID list of rules should be specified in\nrule_ids of LbVirtualServer.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "virtual-server-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServerWithRule"
                        },
                        "required": true,
                        "name": "LbVirtualServerWithRule",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer virtual server with rules",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerVirtualServerWithRulesUpdate_with_rules"
            }
        },
        "/loadbalancer/persistence-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbPersistenceProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a load balancer persistence profile.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbPersistenceProfile"
                        },
                        "required": true,
                        "name": "LbPersistenceProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer persistence profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerPersistenceProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPersistenceProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a paginated list of load balancer persistence profiles.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "LbCookiePersistenceProfile",
                            "LbSourceIpPersistenceProfile"
                        ],
                        "description": "persistence profile type",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "type"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a paginated list of load balancer persistence profiles",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerPersistenceProfiles"
            }
        },
        "/cluster/restore/instruction-resources": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ActionableResourceListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "For restore operations requiring user input e.g. performing an action,\naccepting/rejecting an action, etc. the information to be conveyed to users\nis provided in this call.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Id of the instruction set whose instructions are to be returned",
                        "required": true,
                        "type": "string",
                        "name": "instruction_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List resources for a given instruction, to be\nshown to/executed by users.\n",
                "x-vmw-nsx-module": "ClusterRestore",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListRestoreInstructionResources"
            }
        },
        "/vpn/l2vpn/sessions/{l2vpn-session-id}/peer-codes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VpnSessionPeerCodes"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get peer codes for the L2VPN session to program the remote side of the tunnel.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "l2vpn-session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get peer codes for the L2VpnSession",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetL2VpnSessionPeerCodes"
            }
        },
        "/transport-nodes/{node-id}/pnic-bond-status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PnicBondStatusListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get high-level summary of a transport node",
                "parameters": [
                    {
                        "description": "ID of transport node",
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get high-level summary of a transport node",
                "x-vmw-nsx-module": "Heatmap",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetPnicStatusesForTransportNode"
            }
        },
        "/loadbalancer/server-ssl-profiles/{server-ssl-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbServerSslProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a load balancer server-ssl profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-ssl-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbServerSslProfile"
                        },
                        "required": true,
                        "name": "LbServerSslProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer server-ssl profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerServerSslProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a load balancer server-ssl profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-ssl-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a load balancer server-ssl profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLoadBalancerServerSslProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbServerSslProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a load balancer server-ssl profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-ssl-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a load balancer server-ssl profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerServerSslProfile"
            }
        },
        "/dns/forwarders": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DnsForwarder"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a dns forwader upon a logical router. There is only\none dns forwarder can be created upon a given logical router.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/DnsForwarder"
                        },
                        "required": true,
                        "name": "DnsForwarder",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a dns forwader",
                "x-vmw-nsx-module": "DnsForwarder",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateDnsForwader"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DnsForwarderListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a paginated list of dns forwarders.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a paginated list of dns forwarders",
                "x-vmw-nsx-module": "DnsForwarder",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListDnsForwaders"
            }
        },
        "/vpn/ipsec/sessions/{session-id}/statistics?action=reset": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Reset the statistics of the given VPN session.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Reset the statistics of the given VPN session",
                "x-vmw-nsx-module": "VPNStatistics",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ResetIPSecVPNSessionStatisticsReset"
            }
        },
        "/serviceinsertion/sections/{section-id}/rules": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionRule"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new serviceinsertion rule in existing serviceinsertion section.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionRule"
                        },
                        "required": true,
                        "name": "ServiceInsertionRule",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Add a Single Rule in a Section",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddServiceInsertionRuleInSection"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionRuleListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return all serviceinsertion rule(s) information for a given serviceinsertion section.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "description": "AppliedTo's referenced by this section or section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "applied_tos",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Destinations referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "destinations",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "FILTER",
                            "SEARCH"
                        ],
                        "description": "Filter type",
                        "default": "FILTER",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "filter_type"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "NSService referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "services",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Sources referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "sources",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get All the Rules for a Section",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetServiceInsertionRules"
            }
        },
        "/logical-switches/{lswitch-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitchStatistics"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns statistics  of a specified logical switch.\nThe query parameter \"source=realtime\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lswitch-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get Statistics for Logical Switch of the Given ID (lswitch-id)",
                "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalSwitchStatistics"
            }
        },
        "/edge-clusters/{edge-cluster-id}?action=replace_transport_node": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EdgeCluster"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Replace the transport node in the specified member of the edge-cluster.\nThis is a disruptive action. This will move all the LogicalRouterPorts(uplink and routerLink)\nhost on the old transport_node to the new transport_node. The transportNode cannot be\npresent in another member of any edgeClusters.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "edge-cluster-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/EdgeClusterMemberTransportNode"
                        },
                        "required": true,
                        "name": "EdgeClusterMemberTransportNode",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Replace the transport node in the specified member of the edge-cluster",
                "x-vmw-nsx-module": "EdgeClusters",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReplaceEdgeClusterMemberTransportNodeReplace_transport_node"
            }
        },
        "/pools/vni-pools": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VniPoolListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the default and configured virtual\nnetwork identifier (VNI) pools for use when building logical network\nsegments. Each virtual network has a unique ID called a VNI. Instead\nof creating a new VNI each time you need a new logical switch, you\ncan instead allocate a VNI from a VNI pool. VNI pools are sometimes\ncalled segment ID pools. Each VNI pool has a range of usable VNIs. By\ndefault, there is one pool with two ranges [5000, 65535] and [65536,\n75000]. To create multiple smaller pools, specify a smaller range for\neach pool such as 75001-75100 and 75101-75200. The VNI range determines\nthe maximum number of logical switches that can be created in each\nnetwork segment.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "List VNI Pools",
                "x-vmw-nsx-module": "Vnim",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListVNIPools"
            }
        },
        "/upgrade/bundles/{bundle-id}/upload-status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeBundleUploadStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get uploaded upgrade bundle upload status\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bundle-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get uploaded upgrade bundle upload status",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeBundleUploadStatus"
            }
        },
        "/bridge-clusters/{cluster-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeClusterStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the status for the Bridge Cluster of the given cluster id",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "cluster-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Returns status of a specified Bridge Cluster",
                "x-vmw-nsx-module": "AggSvcBridging",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetBridgeClusterStatus"
            }
        },
        "/upgrade/plan?action=continue": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Continue upgrade",
                "parameters": [
                    {
                        "description": "Skip to upgrade of next component.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "skip"
                    }
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Continue upgrade",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ContinueUpgradeContinue"
            }
        },
        "/logical-switches/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitchStatusSummary"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns Operational status of all logical switches.\nThe query parameter \"source=realtime\" is not supported.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Flag to enable showing of transit logical switch.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "diagnostic"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "Switching Profile identifier",
                        "required": false,
                        "type": "string",
                        "name": "switching_profile_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "OVERLAY",
                            "VLAN"
                        ],
                        "description": "Mode of transport supported in the transport zone for this logical switch",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "transport_type"
                    },
                    {
                        "description": "Transport zone identifier",
                        "required": false,
                        "type": "string",
                        "name": "transport_zone_id",
                        "in": "query"
                    },
                    {
                        "description": "The logical switch's uplink teaming policy name",
                        "required": false,
                        "type": "string",
                        "name": "uplink_teaming_policy_name",
                        "in": "query"
                    },
                    {
                        "description": "Virtual Local Area Network Identifier",
                        "format": "int64",
                        "required": false,
                        "maximum": 4094,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "vlan"
                    },
                    {
                        "description": "VNI of the OVERLAY LogicalSwitch(es) to return.",
                        "format": "int32",
                        "required": false,
                        "in": "query",
                        "type": "integer",
                        "name": "vni"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get Status Summary of All Logical Switches in the System",
                "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalSwitchStatusSummary"
            }
        },
        "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}?action=show-sensitive-data": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BgpNeighbor"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read a specific BGP Neighbor details with password on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read a specific BGP Neighbor with password on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadBgpNeighborWithPasswordShow-sensitive-data"
            }
        },
        "/node/services/cluster_manager?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the cluster boot manager service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the cluster boot manager service",
                "x-vmw-nsx-module": "NodeClusterBootManagerService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateClusterBootManagerServiceActionStart"
            }
        },
        "/firewall/status/{context-type}/{id}?action=disable_firewall": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TargetResourceStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Disable firewall on target resource in dfw context",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "context-type",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Disable firewall on target resource in dfw context",
                "x-vmw-nsx-module": "FirewallStatus",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DisableFirewallOnTargetResourceDisable_firewall"
            }
        },
        "/firewall/excludelist": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ExcludeList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modify exclude list",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ExcludeList"
                        },
                        "required": true,
                        "name": "ExcludeList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Modify exclude list",
                "x-vmw-nsx-module": "ExcludeList",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateExcludeList"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ExcludeList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get list of entities in exclude list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get list of entities in exclude list",
                "x-vmw-nsx-module": "ExcludeList",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetExcludeList"
            }
        },
        "/app-discovery/sessions/{session-id}/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppDiscoverySessionResultSummary"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the summary of the application discovery session\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Returns the summary of the application discovery session",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppDiscoverySessionSummary"
            }
        },
        "/migration/migration-unit-groups/{group-id}/migration-unit/{migration-unit-id}?action=reorder": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Reorder an migration unit within the migration unit group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "migration-unit-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ReorderMigrationRequest"
                        },
                        "required": true,
                        "name": "ReorderMigrationRequest",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Reorder an migration unit within the migration unit group",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReorderMigrationUnitReorder"
            }
        },
        "/upgrade/upgrade-units/aggregate-info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitAggregateInfoListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get upgrade units aggregate-info",
                "parameters": [
                    {
                        "description": "Component type based on which upgrade units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Identifier of group based on which upgrade units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "description": "Flag to indicate whether to return only upgrade units with errors",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "has_errors"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Metadata about upgrade unit to filter on",
                        "required": false,
                        "type": "string",
                        "name": "metadata",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "enum": [
                            "SELECTED",
                            "DESELECTED",
                            "ALL"
                        ],
                        "description": "Flag to indicate whether to return only selected, only deselected or both type of upgrade units",
                        "default": "ALL",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "selection_status"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get upgrade units aggregate-info",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeUnitAggregateInfo"
            }
        },
        "/logical-routers/{logical-router-id}/routing/route-table": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterRouteTable"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deprecated - Please use /logical-routers/<logical-router-id>/routing/routing-table for RIB and\n/logical-routers/<logical-router-id>/routing/forwarding-table for FIB.\nReturns the route table for the logical router on a node of the given transport-node-id.\nQuery parameter \"transport_node_id=<transport-node-id>\" is required.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": true,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get route table on a given node for a logical router",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterRouteTable"
            }
        },
        "/fabric/compute-collections/{cc-ext-id}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Perform action specific to NSX on the compute-collection",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "cc-ext-id",
                        "in": "path"
                    },
                    {
                        "description": "Supported actions on compute-collection",
                        "enum": [
                            "remove_nsx"
                        ],
                        "type": "string",
                        "name": "action",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Perform action specific to NSX on the compute-collection",
                "x-vmw-nsx-module": "ComputeCollectionDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "PerformActionOnComputeCollection"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollection"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specific compute collection.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "cc-ext-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return Compute Collection Information",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadComputeCollection"
            }
        },
        "/ip-sets": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IPSet"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new IPSet that can group either IPv4 or IPv6 individual ip addresses,\nranges or subnets.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSet"
                        },
                        "required": true,
                        "name": "IPSet",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Create IPSet",
                "x-vmw-nsx-module": "IPSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIPSet"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSetListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns paginated list of IPSets\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "List IPSets",
                "x-vmw-nsx-module": "IPSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIPSets"
            }
        },
        "/bridge-endpoint-profiles/{bridgeendpointprofile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpointProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies a existing bridge endpoint profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bridgeendpointprofile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpointProfile"
                        },
                        "required": true,
                        "name": "BridgeEndpointProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update a Bridge Endpoint Profile",
                "x-vmw-nsx-module": "BridgeEndpointProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateBridgeEndpointProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpointProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified bridge endpoint profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bridgeendpointprofile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get Information about a bridge endpoint Profile",
                "x-vmw-nsx-module": "BridgeEndpointProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetBridgeEndpointProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified Bridge Endpoint Profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bridgeendpointprofile-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete a Bridge Endpoint Profile",
                "x-vmw-nsx-module": "BridgeEndpointProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteBridgeEndpointProfile"
            }
        },
        "/trust-management/certificates/{cert-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information for the specified certificate ID, including the\ncertificate's UUID; resource_type (for example, certificate_self_signed,\ncertificate_ca, or certificate_signed); pem_encoded data; and history of the\ncertificate (who created or modified it and when). For additional\ninformation, include the ?details=true modifier at the end of the request\nURI.\n",
                "parameters": [
                    {
                        "description": "ID of certificate to read",
                        "required": true,
                        "type": "string",
                        "name": "cert-id",
                        "in": "path"
                    },
                    {
                        "description": "whether to expand the pem data and show all its details",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "details"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Show Certificate Data for the Given Certificate ID",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetCertificate"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Removes the specified certificate. The private key associated with the\ncertificate is also deleted.\n",
                "parameters": [
                    {
                        "description": "ID of certificate to delete",
                        "required": true,
                        "type": "string",
                        "name": "cert-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Delete Certificate for the Given Certificate ID",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteCertificate"
            }
        },
        "/app-discovery/app-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/AppProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new app profile\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AppProfile"
                        },
                        "required": true,
                        "name": "AppProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Adds a new app profile",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddAppProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns list of app profile IDs created\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Returns list of app profile IDs created",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppProfiles"
            }
        },
        "/node/logs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeLogPropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the number of log files and lists the log files that reside on the\nNSX virtual appliance. The list includes the filename, file size,\nand last-modified time in milliseconds since epoch (1 January 1970) for each\nlog file. Knowing the last-modified time with millisecond accuracy since\nepoch is helpful when you are comparing two times, such as the time of a\nPOST request and the end time on a server.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "List available node logs",
                "x-vmw-nsx-module": "NodeLogs",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNodeLogs"
            }
        },
        "/node/services/mgmt-plane-bus/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read Rabbit MQ service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read Rabbit MQ service status",
                "x-vmw-nsx-module": "NodeRabbitMQService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadRabbitMQServiceStatus"
            }
        },
        "/vpn/l2vpn/services/{l2vpn-service-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VpnService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Edit a specific L2VPN service",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "l2vpn-service-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/L2VpnService"
                        },
                        "required": true,
                        "name": "L2VpnService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Edit a L2VPN service",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateL2VpnService"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a specific L2VPN service. If there are any L2VpnSessions on this L2VpnService, those needs to be deleted first.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "l2vpn-service-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Delete a L2VPN service",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteL2VpnService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VpnService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a specific L2VPN service",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "l2vpn-service-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get L2VPN service",
                "x-vmw-nsx-module": "L2VPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetL2VpnService"
            }
        },
        "/serviceinsertion/sections": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSection"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates new empty Service Insertion section in the system.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSection"
                        },
                        "required": true,
                        "name": "ServiceInsertionSection",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a New Empty Section",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddServiceInsertionSection"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSectionListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List all Service Insertion section in paginated form. A default page size is limited\nto 1000 sections. By default, the list of section is filtered by L3REDIRECT\ntype.\n",
                "parameters": [
                    {
                        "description": "AppliedTo's referenced by this section or section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "applied_tos",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Destinations referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "destinations",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "NSGroup",
                            "LogicalSwitch",
                            "LogicalRouter",
                            "LogicalPort"
                        ],
                        "description": "Resource type valid for use as AppliedTo filter in section API",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "exclude_applied_to_type"
                    },
                    {
                        "enum": [
                            "FILTER",
                            "SEARCH"
                        ],
                        "description": "Filter type",
                        "default": "FILTER",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "filter_type"
                    },
                    {
                        "enum": [
                            "NSGroup",
                            "LogicalSwitch",
                            "LogicalRouter",
                            "LogicalPort"
                        ],
                        "description": "Resource type valid for use as AppliedTo filter in section API",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "include_applied_to_type"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "NSService referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "services",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Sources referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "sources",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "L3REDIRECT"
                        ],
                        "description": "Section Type",
                        "default": "L3REDIRECT",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "type"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "List All Service Insertion Sections",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListServiceInsertionSections"
            }
        },
        "/eula/accept": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Accept end user license agreement\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Accept end user license agreement\n",
                "x-vmw-nsx-module": "EULA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AcceptEULA"
            }
        },
        "/transport-nodes/{node-id}/tunnels/{tunnel-name}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TunnelProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Tunnel properties",
                "parameters": [
                    {
                        "description": "ID of transport node",
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "description": "Tunnel name",
                        "required": true,
                        "type": "string",
                        "name": "tunnel-name",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transport Entities"
                ],
                "summary": "Tunnel properties",
                "x-vmw-nsx-module": "Tunnel",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTunnel"
            }
        },
        "/firewall/sections/{section-id}?action=unlock": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSection"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "423": {
                        "description": "Locked"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Unlock a section\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionLock"
                        },
                        "required": true,
                        "name": "FirewallSectionLock",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Unlock a section",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UnlockSectionUnlock"
            }
        },
        "/pools/vtep-label-pools": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VtepLabelPoolListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns a list of all virtual tunnel endpoint label pools\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "List virtual tunnel endpoint Label Pools",
                "x-vmw-nsx-module": "VtepLabel",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListVtepLabelPools"
            }
        },
        "/migration/plan?action=reset": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Reset the migration plan to default plan. User has an option to change\nthe default plan. But if after making changes, user wants to go\nback to the default plan, this is the way to do so.\n",
                "parameters": [
                    {
                        "description": "Component type",
                        "required": true,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Reset migration plan to default plan",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ResetMigrationPlanReset"
            }
        },
        "/firewall/sections?action=create_with_rules": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionRuleList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new firewall section with rules. The limit on the number of\nrules is defined by maxItems in collection types for FirewallRule\n(FirewallRuleXXXList types). When invoked on a section with a large number\nof rules, this API is supported only at low rates of invocation (not more\nthan 4-5 times per minute). The typical latency of this API with about 1024\nrules is about 4-5 seconds. This API should not be invoked with large\npayloads at automation speeds. More than 50 rules with a large number of\nrule references is not supported.\n\nInstead, to create sections, use:\nPOST /api/v1/firewall/sections\n\nTo create rules, use:\nPOST /api/v1/firewall/sections/&lt;section-id&gt;/rules\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionRuleList"
                        },
                        "required": true,
                        "name": "FirewallSectionRuleList",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a Section with Rules",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddSectionWithRulesCreate_with_rules"
            }
        },
        "/node/network/search-domains": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeSearchDomainsProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the list of domain names that the NSX Manager node uses to complete\nunqualified host names. If DHCP is configured, this method returns\na 409 CONFLICT error, because DHCP manages the list of name servers.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeSearchDomainsProperties"
                        },
                        "required": true,
                        "name": "NodeSearchDomainsProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update the NSX Manager's Search Domains",
                "x-vmw-nsx-module": "NodeNetworkDnsModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNodeSearchDomains"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeSearchDomainsProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the domain list that the NSX Manager node uses to complete\nunqualified host names. When a host name does not include a fully\nqualified domain name (FQDN), the NSX Management node appends the\nfirst-listed domain name to the host name before the host name is looked\nup. The NSX Management node continues this for each entry in the domain\nlist until it finds a match.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read the NSX Manager's Search Domains",
                "x-vmw-nsx-module": "NodeNetworkDnsModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeSearchDomains"
            }
        },
        "/realization-state-barrier/current?action=increment": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/CurrentRealizationStateBarrier"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Increment the current barrier number by 1 for NSX.\nThis method has been deprecated. To track realization state, use\nX-NSX-REQUESTID request header instead.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Realization"
                ],
                "summary": "Increments the barrier count by 1",
                "x-vmw-nsx-module": "RealizationStateBarrier",
                "consumes": [
                    "application/json"
                ],
                "operationId": "IncrementRealizationStateBarrierIncrement"
            }
        },
        "/transport-nodes/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HeatMapTransportZoneStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get high-level summary of all transport nodes. The service layer does not support source = realtime or cached.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get high-level summary of all transport nodes. The service layer does not support source = realtime or cached.",
                "x-vmw-nsx-module": "Heatmap",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAllTransportNodesStatus"
            }
        },
        "/ns-groups/{ns-group-id}/effective-logical-switch-members": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EffectiveMemberResourceListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns effective logical switch members of the specified NSGroup.\n",
                "parameters": [
                    {
                        "description": "NSGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-group-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Get Effective switch members translated from the NSGroup",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetEffectiveLogicalSwitchMembers"
            }
        },
        "/migration/migration-unit-groups-status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitGroupStatusListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get migration status for migration unit groups",
                "parameters": [
                    {
                        "description": "Component type based on which migration unit groups to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get migration status for migration unit groups",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationUnitGroupsStatus"
            }
        },
        "/network-migration-specs/{template-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NetworkMigrationSpec"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification. For a HostProfileNetworkMigrationSpec which is already associated with a compute collection, updating it would mean next time the system needs to trigger migration for hosts managed by compute collection, it will use the updated migration specification.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "template-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/NetworkMigrationSpec"
                        },
                        "required": true,
                        "name": "NetworkMigrationSpec",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update a template of network migration specification.",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNetworkMigrationSpec"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NetworkMigrationSpec"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "template-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get network migration specification template by id.",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNetworkMigrationSpec"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete the specified network migration specification template. Delete will fail if this is a HostProfileNetworkMigrationSpec and is associated with certain compute collection.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "template-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete a network migration specification template",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteNetworkMigrationSpec"
            }
        },
        "/vpn/ipsec/sessions/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNSessionSummary"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "VPN session summary gets summary per vpn sessions and IKE session. Query parameter source supports only cached mode.",
                "parameters": [
                    {
                        "description": "Peer site id",
                        "type": "string",
                        "name": "site_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "VPN session summary",
                "x-vmw-nsx-module": "VPNStatistics",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNSessionSummary"
            }
        },
        "/logical-routers/{logical-router-id}/routing/bgp/neighbors": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BgpNeighbor"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Add a new BGP Neighbor on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BgpNeighbor"
                        },
                        "required": true,
                        "name": "BgpNeighbor",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Add a new BGP Neighbor on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddBgpNeighbor"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BgpNeighborListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Paginated list of BGP Neighbors on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Paginated list of BGP Neighbors on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListBgpNeighbors"
            }
        },
        "/transport-nodes/{node-id}/remote-transport-node-status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportNodeStatusListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read status of all transport nodes with tunnel connections to transport node\n",
                "parameters": [
                    {
                        "description": "ID of transport node",
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "description": "BFD diagnostic code of Tunnel as defined in RFC 5880",
                        "enum": [
                            "0",
                            "NO_DIAGNOSTIC",
                            "1",
                            "CONTROL_DETECTION_TIME_EXPIRED",
                            "2",
                            "ECHO_FUNCTION_FAILED",
                            "3",
                            "NEIGHBOR_SIGNALED_SESSION_DOWN",
                            "4",
                            "FORWARDING_PLANE_RESET",
                            "5",
                            "PATH_DOWN",
                            "6",
                            "CONCATENATED_PATH_DOWN",
                            "7",
                            "ADMINISTRATIVELY_DOWN",
                            "8",
                            "REVERSE_CONCATENATED_PATH_DOWN"
                        ],
                        "type": "string",
                        "name": "bfd_diagnostic_code",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "Tunnel Status",
                        "enum": [
                            "UP",
                            "DOWN"
                        ],
                        "type": "string",
                        "name": "tunnel_status",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Read status of all transport nodes with tunnel connections to transport node\n",
                "x-vmw-nsx-module": "Heatmap",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListRemoteTransportNodeStatus"
            }
        },
        "/migration/plan?action=pause": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Pause migration",
                "tags": [
                    "Migration"
                ],
                "summary": "Pause migration",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "PauseMigrationPause"
            }
        },
        "/node/services/node-mgmt?action=restart": {
            "post": {
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart the node management service",
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart the node management service",
                "x-vmw-nsx-module": "NodeApplianceManagementService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateApplianceManagementServiceActionRestart"
            }
        },
        "/migration/bundles": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationBundleId"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Fetch migration bundle from given url",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/MigrationBundleFetchRequest"
                        },
                        "required": true,
                        "name": "MigrationBundleFetchRequest",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Fetch migration bundle from given url",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "FetchMigrationBundleFromUrl"
            }
        },
        "/pktcap/session/{session-id}?action=delete": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PacketCaptureSession"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Before calling this method, terminate any running capture session.\n",
                "parameters": [
                    {
                        "description": "Packet capture session id",
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Delete the packet capture session by session id.",
                "x-vmw-nsx-module": "PacketCapture",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeletePacketCaptureSessionDelete"
            }
        },
        "/error-resolver/{error_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ErrorResolverInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns some metadata about the given error_id. This includes\ninformation of whether there is a resolver present for the\ngiven error_id and its associated user input data\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "error_id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Error Resolver"
                ],
                "summary": "Fetches metadata about the given error_id",
                "x-vmw-nsx-module": "ErrorResolver",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetErrorResolverInfo"
            }
        },
        "/node/services/ui-service?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, Start and Stop the ui service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, Start and Stop the ui service",
                "x-vmw-nsx-module": "NodeUiServiceService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNsxUiServiceServiceActionRestart"
            }
        },
        "/node/services/ssh?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the ssh service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the ssh service",
                "x-vmw-nsx-module": "NodeSSHService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSSHServiceActionRestart"
            }
        },
        "/node/services/syslog/exporters/{exporter-name}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeSyslogExporterProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specific syslog collection point.",
                "parameters": [
                    {
                        "description": "Name of syslog exporter",
                        "required": true,
                        "type": "string",
                        "name": "exporter-name",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read node syslog exporter",
                "x-vmw-nsx-module": "NodeSyslogExporters",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeSyslogExporter"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Removes a specified rule from the collection of syslog exporter rules.\n",
                "parameters": [
                    {
                        "description": "Name of syslog exporter to delete",
                        "required": true,
                        "type": "string",
                        "name": "exporter-name",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Delete node syslog exporter",
                "x-vmw-nsx-module": "NodeSyslogExporters",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteNodeSyslogExporter"
            }
        },
        "/cluster/nodes/{node-id}/network/interfaces/{interface-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInterfaceProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns detailed information about the specified interface. Interface\ninformation includes MTU, broadcast and host IP addresses, link and admin\nstatus, MAC address, network  mask, and the IP configuration method (static\nor DHCP).\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "interface-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read the node's Network Interface",
                "x-vmw-nsx-module": "ApplianceStats",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterNodeInterface"
            }
        },
        "/fabric/virtual-machines": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all virtual machines.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Display Name of the virtual machine",
                        "required": false,
                        "type": "string",
                        "name": "display_name",
                        "in": "query"
                    },
                    {
                        "description": "External id of the virtual machine",
                        "required": false,
                        "type": "string",
                        "name": "external_id",
                        "in": "query"
                    },
                    {
                        "description": "Id of the host where this vif is located",
                        "required": false,
                        "type": "string",
                        "name": "host_id",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return the List of Virtual Machines",
                "x-vmw-nsx-module": "Inventory",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListVirtualMachines"
            }
        },
        "/app-discovery/app-profiles/{app-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update AppProfile\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "app-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/AppProfile"
                        },
                        "required": true,
                        "name": "AppProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Update AppProfile",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateAppProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns detail of the app profile\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "app-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Returns detail of the app profile",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppProfileDetails"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified AppProfile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "app-profile-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Delete App Profile",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteAppProfile"
            }
        },
        "/node/services/ntp?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NTP service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NTP service",
                "x-vmw-nsx-module": "NodeNTPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNTPServiceActionStart"
            }
        },
        "/logical-routers/{logical-router-id}/routing/forwarding-table?format=csv": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterRouteTableInCsvFormat"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the FIB table in CSV format for the logical router on a node of the given\ntransport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required.\nTo filter the result by network address, paramter \"network_prefix=<a.b.c.d/mask>\"\nneeds to be specified.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "IPv4 CIDR Block",
                        "format": "ipv4-cidr-block",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "network_prefix"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": true,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get FIB table on a specified node for a logical router",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterForwardingTableInCsvFormatCsv"
            }
        },
        "/serviceinsertion/sections/{section-id}/rules/{rule-id}?action=revise": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionRule"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies existing serviceinsertion rule along with relative position among\nother serviceinsertion rules inside a serviceinsertion section.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionRule"
                        },
                        "required": true,
                        "name": "ServiceInsertionRule",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Rule and Reorder the Rule",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReviseServiceInsertionRuleRevise"
            }
        },
        "/md-proxies/{proxy-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MetadataProxy"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a metadata proxy",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "proxy-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/MetadataProxy"
                        },
                        "required": true,
                        "name": "MetadataProxy",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a metadata proxy",
                "x-vmw-nsx-module": "MetadataProxy",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateMetadataProxy"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MetadataProxy"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a metadata proxy",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "proxy-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a metadata proxy",
                "x-vmw-nsx-module": "MetadataProxy",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadMetadataProxy"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a metadata proxy",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "proxy-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a metadata proxy",
                "x-vmw-nsx-module": "MetadataProxy",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteMetadataProxy"
            }
        },
        "/fabric/nodes/{node-id}/network/interfaces": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInterfacePropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the number of interfaces on the node and detailed\ninformation about each interface. Interface information includes MTU,\nbroadcast and host IP addresses, link and admin status, MAC address, network\nmask, and the IP configuration method (static or DHCP).\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "List the specified node's Network Interfaces",
                "x-vmw-nsx-module": "ApplianceStats",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListFabricNodeInterfaces"
            }
        },
        "/fabric/nodes/{node-id}?action=upgrade_infra": {
            "post": {
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/Node"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Perform a service deployment upgrade on a host node",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "description": "Should VM migration be disabled during upgrade",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "disable_vm_migration"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Perform a service deployment upgrade on a host node",
                "x-vmw-nsx-module": "HostPrepServiceFabric",
                "consumes": [
                    "application/json"
                ],
                "operationId": "PerformHostNodeUpgradeActionUpgrade_infra"
            }
        },
        "/logical-ports/{lport-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalPort"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies an existing logical switch port. Parameters that can be modified\ninclude attachment_type (LOGICALROUTER, VIF), admin_state (UP or DOWN),\nattachment id and switching_profile_ids. You cannot modify the logical_switch_id.\nIn other words, you cannot move an existing port from one switch to another switch.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lport-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalPort"
                        },
                        "required": true,
                        "name": "LogicalPort",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Update a Logical Port",
                "x-vmw-nsx-module": "LogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLogicalPort"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalPort"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified logical port.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lport-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get Information About a Logical Port",
                "x-vmw-nsx-module": "LogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalPort"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified logical switch port. By default, if logical port has\nattachments, or it is added to any NSGroup, the deletion will be failed.\nOption detach could be used for deleting logical port forcibly.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lport-id",
                        "in": "path"
                    },
                    {
                        "description": "force delete even if attached or referenced by a group",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "detach"
                    }
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Delete a Logical Port",
                "x-vmw-nsx-module": "LogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLogicalPort"
            }
        },
        "/dhcp/servers/{server-id}/static-bindings/{binding-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpStaticBinding"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a DHCP server's static binding",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "binding-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/DhcpStaticBinding"
                        },
                        "required": true,
                        "name": "DhcpStaticBinding",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a DHCP server's static binding",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateDhcpStaticBinding"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a static binding",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "binding-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a static binding",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteDhcpStaticBinding"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpStaticBinding"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a DHCP server's static binding with the specified binding ID",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "binding-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a DHCP server's static binding with the specified binding ID",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadDhcpStaticBinding"
            }
        },
        "/logical-routers/{logical-router-id}/routing/routing-table": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterRouteTable"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the route table(RIB) for the logical router on a node of the given transport-node-id.\nQuery parameter \"transport_node_id=<transport-node-id>\" is required.\nTo filter the result by network address, parameter \"network_prefix=<a.b.c.d/mask>\"\nneeds to be specified.\nTo filter the result by route source, parameter \"route_source=<source_type>\" needs to be specified\nwhere source_type can be BGP, STATIC, CONNECTED, NSX_STATIC, TIER1_NAT or TIER0_NAT.\nIt is also possible to filter the RIB table using both network address and\nroute source filter together.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "IPv4 CIDR Block",
                        "format": "ipv4-cidr-block",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "network_prefix"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "enum": [
                            "BGP",
                            "STATIC",
                            "CONNECTED"
                        ],
                        "description": "To filter the RIB table based on the source from which route is learned.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "route_source"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": true,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get RIB table on a specified node for a logical router",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterRoutingTable"
            }
        },
        "/node/services/snmp?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the SNMP service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the SNMP service",
                "x-vmw-nsx-module": "NodeSNMPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSNMPServiceActionStart"
            }
        },
        "/vpn/ipsec/sessions/{session-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNSessionStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List status of IPSec session. Query parameter source supports both realtime and cached mode.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec VPN IKE session status",
                "x-vmw-nsx-module": "VPNStatistics",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNIKESessionStatus"
            }
        },
        "/node/services/snmp?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the SNMP service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the SNMP service",
                "x-vmw-nsx-module": "NodeSNMPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSNMPServiceActionRestart"
            }
        },
        "/node/file-store/{file-name}/thumbprint": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FileThumbprint"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read file thumbprint",
                "parameters": [
                    {
                        "description": "Name of the file for which thumbprint should be computed",
                        "required": true,
                        "type": "string",
                        "name": "file-name",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read file thumbprint",
                "x-vmw-nsx-module": "FileStoreModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadFileThumbprint"
            }
        },
        "/node/services/ssh?action=remove_host_fingerprint": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Remove a host's fingerprint from known hosts file",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/KnownHostParameter"
                        },
                        "required": true,
                        "name": "KnownHostParameter",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Remove a host's fingerprint from known hosts file",
                "x-vmw-nsx-module": "NodeSSHService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSSHServiceRemoveHostFingerprintActionRemove_host_fingerprint"
            }
        },
        "/transport-nodes/{node-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportNodeStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read status of a transport node",
                "parameters": [
                    {
                        "description": "ID of transport node",
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Read status of a transport node",
                "x-vmw-nsx-module": "Heatmap",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTransportNodeStatus"
            }
        },
        "/logical-routers/{logical-router-id}/routing/bgp/communty-lists/{community-list-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BGPCommunityList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a specific BGP community list from a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "community-list-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BGPCommunityList"
                        },
                        "required": true,
                        "name": "BGPCommunityList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a specific BGP community list from a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateBGPCommunityList"
            }
        },
        "/node/services/ui-service?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, Start and Stop the ui service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, Start and Stop the ui service",
                "x-vmw-nsx-module": "NodeUiServiceService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNsxUiServiceServiceActionStop"
            }
        },
        "/pools/ip-blocks": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IpBlock"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new IPv4 address block using the specified cidr. cidr is a required\nparameter. display_name & description are optional parameters\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IpBlock"
                        },
                        "required": true,
                        "name": "IpBlock",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Create a new IP address block.",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIpBlock"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpBlockListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about configured IP address blocks. Information includes\nthe id, display name, description & CIDR of IP address blocks\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Returns list of configured IP address blocks.",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIpBlocks"
            }
        },
        "/loadbalancer/services/{service-id}/virtual-servers/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServerStatusListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the status list of virtual servers in given load balancer service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the status list of virtual servers in given load balancer service",
                "x-vmw-nsx-module": "AggSvcLb",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerVirtualServerStatuses"
            }
        },
        "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-endpoints/{instance-endpoint}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete instance endpoint information for a given instace endpoint.\nPlease make sure to delete all the Service Insertion Rules, which\nrefer to this Endpoint as 'redirect_tos' target.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "instance-endpoint",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a particular InstanceEndpoint.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteInstanceEndpoint"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InstanceEndpoint"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns detailed Endpoint information for a given InstanceEndpoint.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "instance-endpoint",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a particular instance endpoint for a service instance.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetInstanceEndpoint"
            }
        },
        "/dhcp/server-profiles/{profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "If both the edge_cluster_member_indexes are changed in a same PUT API, e.g. change from [a,b] to [x,y],\nthe current dhcp server states will be lost, which could cause the network crash due to ip conflicts.\nHence the suggestion is to change only one member index in one single update, e.g. from [a, b] to [a,y].\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/DhcpProfile"
                        },
                        "required": true,
                        "name": "DhcpProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a DHCP server profile",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateDhcpProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a DHCP server profile",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a DHCP server profile",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadDhcpProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a DHCP server profile",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a DHCP server profile",
                "x-vmw-nsx-module": "Dhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteDhcpProfile"
            }
        },
        "/network-migration-specs": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/NetworkMigrationSpec"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NetworkMigrationSpec"
                        },
                        "required": true,
                        "name": "NetworkMigrationSpec",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create a template of network migration specification.",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNetworkMigrationSpec"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NetworkMigrationSpecListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Network migration specification once created and can be used as a template to indicate associated component which networks should be migrated and where. Currently migration template can be associated with compute collections which are managed by vCenter host profiles, to trigger automatic migration of networks for Stateless ESX hosts. Currently we only support creation of HostProfileNetworkMigrationSpec type of specification.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Whether the list result contains system resources",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "include_system_owned"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "HostProfileNetworkMigrationSpec"
                        ],
                        "description": "Supported network migration specification types.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "type"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List all network migration specification templates.",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNetworkMigrationSpecs"
            }
        },
        "/node/services/liagent/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read liagent service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read liagent service status",
                "x-vmw-nsx-module": "NodeLiagentService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLiagentServiceStatus"
            }
        },
        "/upgrade/upgrade-unit-groups/{group-id}?action=add_upgrade_units": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Add upgrade units to specified upgrade unit group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitList"
                        },
                        "required": true,
                        "name": "UpgradeUnitList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Add upgrade units to specified upgrade unit group",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddUpgradeUnitsToGroupAdd_upgrade_units"
            }
        },
        "/vpn/ipsec/sessions/{ipsec-vpn-session-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNSession"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Edit IPSec VPN session.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-session-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNSession"
                        },
                        "required": true,
                        "name": "IPSecVPNSession",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Edit IPSec VPN session",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIPSecVPNSession"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete IPSec VPN session.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-session-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Delete IPSec VPN session",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIPSecVPNSession"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNSession"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Fetch IPSec VPN session.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Fetch IPSec VPN session",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNSession"
            }
        },
        "/cluster/restore?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    }
                },
                "description": "Start the restore of an NSX cluster, from some previously\nbacked-up configuration. This operation is only valid\nwhen a GET cluster/restore/status returns a status with value NOT_STARTED.\nOtherwise, a 409 response is returned.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/InitiateClusterRestoreRequest"
                        },
                        "required": true,
                        "name": "InitiateClusterRestoreRequest",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Initiate a restore operation",
                "x-vmw-nsx-module": "ClusterRestore",
                "consumes": [
                    "application/json"
                ],
                "operationId": "InitiateClusterRestoreStart"
            }
        },
        "/fabric/compute-managers": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ComputeManager"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Registers compute manager with NSX. Inventory service will collect\ndata from the registered compute manager\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ComputeManager"
                        },
                        "required": true,
                        "name": "ComputeManager",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Register compute manager with NSX",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddComputeManager"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeManagerListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all compute managers.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Compute manager type like vCenter",
                        "required": false,
                        "type": "string",
                        "name": "origin_type",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "IP address or hostname of compute manager",
                        "format": "hostname-or-ip",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "server"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return the List of Compute managers",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListComputeManagers"
            }
        },
        "/loadbalancer/ssl/ciphers-and-protocols": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbSslCipherAndProtocolListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a list of supported SSL ciphers and protocols.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a list of supported SSL ciphers and protocols",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerSslCiphersAndProtocols"
            }
        },
        "/loadbalancer/services/{service-id}/debug-info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbServiceDebugInfo"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "API to download below information which will be used for debugging and\ntroubleshooting.\n1) Load balancer service\n2) Load balancer associated virtual servers\n3) Load balancer associated pools\n4) Load balancer associated profiles such as persistence, SSL, application.\n5) Load balancer associated monitors\n6) Load balancer associated rules\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Read the debug information of the load balancer service",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerServiceDebugInfo"
            }
        },
        "/migration/migration-unit-groups/{group-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitStatusListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get migration status for group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Flag to indicate whether to return only migration units with errors",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "has_errors"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get migration status for group",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationUnitGroupStatus"
            }
        },
        "/compute-collection-transport-node-templates/{template-id}/state": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionTransportNodeTemplateStateList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns detailed transport node states for this compute collection",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "template-id",
                        "in": "path"
                    },
                    {
                        "description": "Compute collection id",
                        "required": false,
                        "type": "string",
                        "name": "compute_collection_id",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get compute collection transportnode template application states",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetComputeCollectionTransportNodeTemplateState"
            }
        },
        "/aaa/vidm/users": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VidmInfoListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get all the users from vIDM whose userName, givenName or familyName matches the search key case insensitively. The search key is checked to be a substring of name or given name or family name. This is a non paginated API.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "Search string to search for.\n",
                        "required": true,
                        "type": "string",
                        "name": "search_string",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Get all the users from vIDM whose userName, givenName or familyName matches the search key case insensitively. The search key is checked to be a substring of name or given name or family name. This is a non paginated API.",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUserVidmSearchResult"
            }
        },
        "/node/services/liagent?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the liagent service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the liagent service",
                "x-vmw-nsx-module": "NodeLiagentService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLiagentServiceActionRestart"
            }
        },
        "/host-switch-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/BaseHostSwitchProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a hostswitch profile. The resource_type is required. For uplink\nprofiles, the teaming and policy parameters are required. By default, the\nmtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280\nthrough 9000.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/BaseHostSwitchProfile"
                        },
                        "required": true,
                        "name": "BaseHostSwitchProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create a Hostswitch Profile",
                "x-vmw-nsx-module": "BaseHostSwitchProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateHostSwitchProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HostSwitchProfilesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the configured hostswitch profiles. Hostswitch\nprofiles define networking policies for hostswitches (sometimes referred to\nas bridges in OVS). Currently, only uplink teaming is supported. Uplink\nteaming allows NSX to load balance traffic across different physical NICs\n(PNICs) on the hypervisor hosts. Multiple teaming policies are supported,\nincluding LACP active, LACP passive, load balancing based on source ID, and\nfailover order.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "UplinkHostSwitchProfile",
                            "LldpHostSwitchProfile",
                            "NiocProfile",
                            "ExtraConfigHostSwitchProfile"
                        ],
                        "description": "Supported HostSwitch profiles.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "hostswitch_profile_type"
                    },
                    {
                        "description": "Whether the list result contains system resources",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "include_system_owned"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "The host switch profile's uplink teaming policy name",
                        "required": false,
                        "type": "string",
                        "name": "uplink_teaming_policy_name",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List Hostswitch Profiles",
                "x-vmw-nsx-module": "BaseHostSwitchProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListHostSwitchProfiles"
            }
        },
        "/logical-router-ports/{logical-router-port-id}/arp-table": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterPortArpTable"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns ARP table for the Logical Router Port of the given id, on a node\nif a query parameter \"transport_node_id=<transport-node-id>\" is given. The\ntransport_node_id parameter is mandatory if the router port is not uplink type.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-port-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get the ARP table for the Logical Router Port of the given id",
                "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterPortArpTable"
            }
        },
        "/logical-router-ports/{logical-router-port-id}/statistics/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterPortStatisticsSummary"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the summation of statistics from all nodes for the Specified\nLogical Router Port.\nThe query parameter \"source=realtime\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-port-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get the statistics summary of a specified logical router port",
                "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterPortStatisticsSummary"
            }
        },
        "/service-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ServiceProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a service profile, which can then be used to create a service.\nServices are then applied to one or more logical router ports.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProfile"
                        },
                        "required": true,
                        "name": "ServiceProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Create a Service Profile",
                "x-vmw-nsx-module": "ServiceProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateServiceProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all service profiles. A service profile is a\nconfiguration that you can use to create a service, which is then applied\nto one or more logical router ports. Currently, only the DhcpRelayProfile\nis supported.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "name": "resource_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "List All Service Profiles",
                "x-vmw-nsx-module": "ServiceProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListServiceProfiles"
            }
        },
        "/fabric/nodes/{node-id}/state": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationState"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "For edge nodes, returns the current install\nstate when deployment is in progress, NODE_READY\nwhen deployment is complete and the failure state\nwhen deployment has failed.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Get the Realized State of a Fabric Node.",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetFabricNodeState"
            }
        },
        "/cluster/backups?action=retrieve_ssh_fingerprint": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RemoteServerFingerprint"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get SHA256 fingerprint of ECDSA key of remote server. The caller should\nindependently verify that the key is trusted.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/RemoteServerFingerprintRequest"
                        },
                        "required": true,
                        "name": "RemoteServerFingerprintRequest",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Get ssh fingerprint of remote(backup) server",
                "x-vmw-nsx-module": "BackupConfiguration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetSshFingerprintOfServerRetrieve_ssh_fingerprint"
            }
        },
        "/logical-router-ports": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterPort"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a logical router port. The required parameters include resource_type\n(LogicalRouterUpLinkPort, LogicalRouterDownLinkPort, LogicalRouterLinkPort,\nLogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort); and\nlogical_router_id (the router to which each logical router port is assigned).\nThe service_bindings parameter is optional.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterPort"
                        },
                        "required": true,
                        "name": "LogicalRouterPort",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Create a Logical Router Port",
                "x-vmw-nsx-module": "LogicalRouterPorts",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLogicalRouterPort"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterPortListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all logical router ports. Information includes the\nresource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort,\nLogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort);\nlogical_router_id (the router to which each logical router port is assigned);\nand any service_bindings (such as DHCP relay service).\nThe GET request can include a query parameter (logical_router_id\nor logical_switch_id).\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Logical Router identifier",
                        "required": false,
                        "type": "string",
                        "name": "logical_router_id",
                        "in": "query"
                    },
                    {
                        "description": "Logical Switch identifier",
                        "required": false,
                        "type": "string",
                        "name": "logical_switch_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "enum": [
                            "LogicalRouterUpLinkPort",
                            "LogicalRouterDownLinkPort",
                            "LogicalRouterLinkPortOnTIER0",
                            "LogicalRouterLinkPortOnTIER1",
                            "LogicalRouterLoopbackPort",
                            "LogicalRouterIPTunnelPort",
                            "LogicalRouterCentralizedServicePort"
                        ],
                        "description": "Resource types of logical router port",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "resource_type"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "List Logical Router Ports",
                "x-vmw-nsx-module": "LogicalRouterPorts",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLogicalRouterPorts"
            }
        },
        "/realization-state-barrier/config": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RealizationStateBarrierConfig"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates the barrier configuration having interval set in milliseconds\nThe new interval that automatically increments the global realization number\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/RealizationStateBarrierConfig"
                        },
                        "required": true,
                        "name": "RealizationStateBarrierConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Realization"
                ],
                "summary": "Updates the barrier configuration",
                "x-vmw-nsx-module": "RealizationStateBarrier",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateRealizationStateBarrierConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RealizationStateBarrierConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the current barrier configuration\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Realization"
                ],
                "summary": "Gets the realization state barrier configuration",
                "x-vmw-nsx-module": "RealizationStateBarrier",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRealizationStateBarrierConfig"
            }
        },
        "/node/services/nsx-message-bus?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX Message Bus service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX Message Bus service",
                "x-vmw-nsx-module": "NodeNSXMessageBusService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNSXMessageBusServiceActionStop"
            }
        },
        "/node/services/snmp/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read SNMP service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read SNMP service status",
                "x-vmw-nsx-module": "NodeSNMPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadSNMPServiceStatus"
            }
        },
        "/mirror-sessions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PortMirroringSession"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a mirror session",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PortMirroringSession"
                        },
                        "required": true,
                        "name": "PortMirroringSession",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Create a mirror session",
                "x-vmw-nsx-module": "PortMirroring",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreatePortMirroringSessions"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PortMirroringSessionListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List all mirror sessions",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "List all mirror sessions",
                "x-vmw-nsx-module": "PortMirroring",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListPortMirroringSession"
            }
        },
        "/cluster/nodes/deployments/{node-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterNodeVMDeploymentRequest"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns deployment request information for a specific attempted\ndeployment of a cluster node VM.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Returns info for a cluster-node VM auto-deployment attempt",
                "x-vmw-nsx-module": "ClusterNodeVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterNodeVMDeploymentRequest"
            }
        },
        "/firewall/sections/{section-id}?action=revise": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSection"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies an existing firewall section along with its relative position\namong other firewall sections in the system. Simultaneous update (modify)\noperations on same section are not allowed to prevent overwriting stale\ncontents to firewall section. If a concurrent update is performed, HTTP\nresponse code 409 will be returned to the client operating on stale data.\nThat client should retrieve the firewall section again and re-apply its\nupdate.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallSection"
                        },
                        "required": true,
                        "name": "FirewallSection",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Section, Including Its Position",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReviseSectionRevise"
            }
        },
        "/firewall/excludelist?action=add_member": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceReference"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Add a new object in the exclude list",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "required": true,
                        "name": "ResourceReference",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Add a new object in the exclude list",
                "x-vmw-nsx-module": "ExcludeList",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddMemberAdd_member"
            }
        },
        "/node/support-bundle": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read node support bundle",
                "parameters": [
                    {
                        "default": false,
                        "description": "Include all files",
                        "type": "boolean",
                        "name": "all",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read node support bundle",
                "x-vmw-nsx-module": "NodeStatusReport",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeSupportBundle"
            }
        },
        "/node/services/search/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read NSX Search service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read NSX Search service status",
                "x-vmw-nsx-module": "NodeSearchService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadSearchServiceStatus"
            }
        },
        "/dns/forwarders/{forwarder-id}/nslookup": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DnsAnswer"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Query the nameserver for an ip-address or a FQDN of the given an address optionally using\nan specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it.\nIf the address is an ip-address, do a reverse lookup and answer fqdn(s).\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "forwarder-id",
                        "in": "path"
                    },
                    {
                        "description": "IP address or FQDN for nslookup",
                        "required": false,
                        "type": "string",
                        "name": "address",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Resolve a given address via the dns forwarder",
                "x-vmw-nsx-module": "DnsForwarder",
                "consumes": [
                    "application/json"
                ],
                "operationId": "LookupAddress"
            }
        },
        "/node/services/telemetry?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop Telemetry service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop Telemetry service",
                "x-vmw-nsx-module": "NodePhonehomeCoordinatorService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreatePhonehomeCoordinatorServiceActionRestart"
            }
        },
        "/node/services/search": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read NSX Search service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read NSX Search service properties",
                "x-vmw-nsx-module": "NodeSearchService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadSearchService"
            }
        },
        "/transport-zones": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/TransportZone"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new transport zone. The required parameters are host_switch_name\nand transport_type (OVERLAY or VLAN). The optional parameters are\ndescription and display_name.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/TransportZone"
                        },
                        "required": true,
                        "name": "TransportZone",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create a Transport Zone",
                "x-vmw-nsx-module": "TransportZone",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateTransportZone"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportZoneListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about configured transport zones. NSX requires at\nleast one transport zone. NSX uses transport zones to provide connectivity\nbased on the topology of the underlying network, trust zones, or\norganizational separations. For example, you might have hypervisors that\nuse one network for management traffic and a different network for VM\ntraffic. This architecture would require two transport zones. The\ncombination of transport zones plus transport connectors enables NSX to\nform tunnels between hypervisors. Transport zones define which interfaces\non the hypervisors can communicate with which other interfaces on other\nhypervisors to establish overlay tunnels or provide connectivity to a VLAN.\nA logical switch can be in one (and only one) transport zone. This means\nthat all of a switch's interfaces must be in the same transport zone.\nHowever, each hypervisor virtual switch (OVS or VDS) has multiple\ninterfaces (connectors), and each connector can be attached to a different\nlogical switch. For example, on a single hypervisor with two connectors,\nconnector A can be attached to logical switch 1 in transport zone A, while\nconnector B is attached to logical switch 2 in transport zone B. In this\nway, a single hypervisor can participate in multiple transport zones. The\nAPI for creating a transport zone requires that a single host switch be\nspecified for each transport zone, and multiple transport zones can share\nthe same host switch.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "The transport zone's uplink teaming policy name",
                        "required": false,
                        "type": "string",
                        "name": "uplink_teaming_policy_name",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List Transport Zones",
                "x-vmw-nsx-module": "TransportZone",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListTransportZones"
            }
        },
        "/vpn/ipsec/dpd-profiles/{ipsec-vpn-dpd-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNDPDProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Edit IPSec dead peer detection (DPD) profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-dpd-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNDPDProfile"
                        },
                        "required": true,
                        "name": "IPSecVPNDPDProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Edit IPSec dead peer detection (DPD) profile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIPSecVPNDPDProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete dead peer detection (DPD) profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-dpd-profile-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Delete dead peer detection (DPD) profile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIPSecVPNDPDProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNDPDProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get IPSec dead peer detection (DPD) profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-dpd-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec dead peer detection (DPD) profile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNDPDProfile"
            }
        },
        "/licenses/licenses-usage?format=csv": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FeatureUsageListInCsvFormat"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns usage report of all registered modules in CSV format\n",
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Get usage report of all registred modules in CSV format",
                "x-vmw-nsx-module": "License",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLicenseUsageReportInCsvFormatCsv"
            }
        },
        "/ui-views/{view-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/View"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update View",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "view-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/View"
                        },
                        "required": true,
                        "name": "View",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Update View",
                "x-vmw-nsx-module": "NsxDashboard",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateView"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/View"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns Information about a specific View.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "view-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Returns View Information",
                "x-vmw-nsx-module": "NsxDashboard",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetView"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete View",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "view-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Delete View",
                "x-vmw-nsx-module": "NsxDashboard",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeletView"
            }
        },
        "/pools/ip-blocks/{block-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpBlock"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the IP address block with specifed id. display_name, description\nand cidr are parameters that can be modified. If a new cidr is specified,\nit should contain all existing subnets in the IP block. Returns a conflict error\nif the IP address block cidr can not be modified due to the presence of\nsubnets that it contains. Eg: If the IP block contains a subnet 192.168.0.1/24\nand we try to change the IP block cidr to 10.1.0.1/16, it results in a conflict.\n",
                "parameters": [
                    {
                        "description": "IP address block id",
                        "required": true,
                        "type": "string",
                        "name": "block-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IpBlock"
                        },
                        "required": true,
                        "name": "IpBlock",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Update an IP Address Block",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIpBlock"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpBlock"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the IP address block with specified id.\nInformation includes id, display_name, description & cidr.\n",
                "parameters": [
                    {
                        "description": "IP address block id",
                        "required": true,
                        "type": "string",
                        "name": "block-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Get IP address block information.",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadIpBlock"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the IP address block with specified id if it exists. IP\nblock cannot be deleted if there are allocated subnets from the block.\n",
                "parameters": [
                    {
                        "description": "IP address block id",
                        "required": true,
                        "type": "string",
                        "name": "block-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Delete an IP Address Block",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIpBlock"
            }
        },
        "/ipfix/collectorconfigs": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a new IPFIX collector configuration",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorConfig"
                        },
                        "required": true,
                        "name": "IpfixCollectorConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Create a new IPFIX collector configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIpfixCollectorConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorConfigListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List IPFIX collector configurations",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "List IPFIX collector configurations",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIpfixCollectorConfig"
            }
        },
        "/cluster/restore?action=cancel": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    }
                },
                "description": "Cancel any currently running restore operation. If there exists a currently\nrunning step, it is allowed to finish. The system is not rolled back to the\npre-restore state. This operation is only valid when a\nGET cluster/restore/status returns a status with value RUNNING or SUSPENDED.\nOtherwise, a 409 response is returned.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Cancel any running restore operation",
                "x-vmw-nsx-module": "ClusterRestore",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CancelClusterRestoreCancel"
            }
        },
        "/trust-management/csrs/{csr-id}/pem-file": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Downloads the CSR PEM file for a specified CSR. Clients must include an Accept: text/plain request header.",
                "parameters": [
                    {
                        "description": "ID of CSR to read",
                        "required": true,
                        "type": "string",
                        "name": "csr-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "text/plain;charset=UTF-8"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Get CSR PEM File for the Given CSR ID",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetCsrPem"
            }
        },
        "/firewall/sections/{section-id}/rules/stats": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallStatsList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get aggregated statistics for all rules for a given firewall section. The\nAPI only supports access to cached (source=cached) statistical data\ncollected offline in the system. Data includes total number of packets,\nbytes, sessions counters and popularity index for a firewall rule and\noverall session count, max session count and max popularity index for\nall firewall rules on transport nodes or edge nodes. Aggregated\nstatistics like maximum popularity index, maximum session count and\ntotal session count are computed with lower frequency compared to\nindividual generic rule statistics, hence they may have a computation\ndelay up to 15 minutes to reflect in response to this API.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get Firewall section level statistics section",
                "x-vmw-nsx-module": "FirewallStatsRule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetFirewallSectionStats"
            }
        },
        "/logical-routers/{logical-router-id}/nat/rules/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NatStatisticsPerLogicalRouter"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the summation of statistics for all rules from all nodes for the Specified\nLogical Router. Also gives the per transport node statistics for provided logical router.\nThe query parameter \"source=realtime\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get the statistics of all rules of the logical router",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNatStatisticsPerLogicalRouter"
            }
        },
        "/cluster/restore?action=advance": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    }
                },
                "description": "Advance any currently suspended restore operation. The operation might\nhave been suspended because (1) the user had suspended it previously, or\n(2) the operation is waiting for user input, to be provided as a\npart of the POST request body. This operation is only valid\nwhen a GET cluster/restore/status returns a status with value SUSPENDED.\nOtherwise, a 409 response is returned.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AdvanceClusterRestoreRequest"
                        },
                        "required": true,
                        "name": "AdvanceClusterRestoreRequest",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Advance any suspended restore operation",
                "x-vmw-nsx-module": "ClusterRestore",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AdvanceClusterRestoreAdvance"
            }
        },
        "/loadbalancer/application-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbAppProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a load balancer application profile.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbAppProfile"
                        },
                        "required": true,
                        "name": "LbAppProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer application profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerApplicationProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbAppProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a paginated list of load balancer application profiles.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "LbHttpProfile",
                            "LbFastTcpProfile",
                            "LbFastUdpProfile"
                        ],
                        "description": "application profile type",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "type"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a paginated list of load balancer application profiles",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerApplicationProfiles"
            }
        },
        "/node/services/ssh/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read ssh service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read ssh service status",
                "x-vmw-nsx-module": "NodeSSHService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadSSHServiceStatus"
            }
        },
        "/migration/migration-unit-groups": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitGroup"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a group",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitGroup"
                        },
                        "required": true,
                        "name": "MigrationUnitGroup",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Create a group",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateMigrationUnitGroup"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitGroupListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return information of all migration unit groups",
                "parameters": [
                    {
                        "description": "Component type based on which migration unit groups to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Flag indicating whether to return summary",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "summary"
                    },
                    {
                        "description": "Synchronize before returning migration unit groups",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "sync"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Return information of all migration unit groups",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationUnitGroups"
            }
        },
        "/pools/mac-pools/{pool-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MacPool"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified MAC pool.\n",
                "parameters": [
                    {
                        "description": "MAC pool ID",
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Read MAC Pool",
                "x-vmw-nsx-module": "MACAM",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadMacPool"
            }
        },
        "/migration/nodes-summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeSummaryList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get summary of nodes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get summary of nodes",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationNodesSummary"
            }
        },
        "/node/services/nsx-message-bus?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX Message Bus service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX Message Bus service",
                "x-vmw-nsx-module": "NodeNSXMessageBusService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNSXMessageBusServiceActionRestart"
            }
        },
        "/fabric/discovered-nodes/{node-ext-id}?action=hostprep": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Node"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Prepares(hostprep) discovered node for NSX. NSX LCP bundles are installed on this discovered node.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-ext-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Prepares discovered Node for NSX",
                "x-vmw-nsx-module": "ComputeCollectionHostPrepFabricService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "HostPrepDiscoveredNodeHostprep"
            }
        },
        "/transport-zones/{zone-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportZone"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates an existing transport zone. Modifiable parameters are\ntransport_type (VLAN or OVERLAY), description, and display_name. The\nrequest must include the existing host_switch_name.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "zone-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/TransportZone"
                        },
                        "required": true,
                        "name": "TransportZone",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update a Transport Zone",
                "x-vmw-nsx-module": "TransportZone",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateTransportZone"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportZone"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a single transport zone.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "zone-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get a Transport Zone",
                "x-vmw-nsx-module": "TransportZone",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTransportZone"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes an existing transport zone.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "zone-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete a Transport Zone",
                "x-vmw-nsx-module": "TransportZone",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteTransportZone"
            }
        },
        "/ipfix-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IpfixUpmProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a new IPFIX profile with essential properties.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IpfixUpmProfile"
                        },
                        "required": true,
                        "name": "IpfixUpmProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unified Nsgroup Profile Management"
                ],
                "summary": "Create a new IPFIX profile",
                "x-vmw-nsx-module": "UpmIpfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIpfixUpmProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixUpmProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Query IPFIX profiles with list parameters. List result can be filtered by\nprofile type defined by IpfixUpmProfileType.\n",
                "parameters": [
                    {
                        "description": "ID of Entity Applied with Profile",
                        "required": false,
                        "type": "string",
                        "name": "applied_to_entity_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "LogicalPort",
                            "LogicalSwitch",
                            "NSGroup"
                        ],
                        "description": "Supported Entity Types",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "applied_to_entity_type"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "IPFIX Profile Type List",
                        "required": false,
                        "type": "string",
                        "name": "profile_types",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unified Nsgroup Profile Management"
                ],
                "summary": "List IPFIX Profies",
                "x-vmw-nsx-module": "UpmIpfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIpfixUpmProfiles"
            }
        },
        "/loadbalancer/monitors/{monitor-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbMonitor"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a load balancer monitor.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "monitor-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbMonitor"
                        },
                        "required": true,
                        "name": "LbMonitor",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer monitor",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerMonitor"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbMonitor"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a load balancer monitor.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "monitor-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a load balancer monitor",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerMonitor"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a load balancer monitor.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "monitor-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a load balancer monitor",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLoadBalancerMonitor"
            }
        },
        "/upgrade/upgrade-units": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get upgrade units",
                "parameters": [
                    {
                        "description": "Component type based on which upgrade units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Current version of upgrade unit based on which upgrade units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "current_version",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "UUID of group based on which upgrade units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "description": "Flag to indicate whether to return only upgrade units with warnings",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "has_warnings"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Metadata about upgrade unit to filter on",
                        "required": false,
                        "type": "string",
                        "name": "metadata",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Upgrade unit type based on which upgrade units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "upgrade_unit_type",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get upgrade units",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeUnits"
            }
        },
        "/cluster/restore/config": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RestoreConfiguration"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Configure file server where the backed-up files used for the Restore\noperation are available.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/RestoreConfiguration"
                        },
                        "required": true,
                        "name": "RestoreConfiguration",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Configure Restore SFTP server credentials",
                "x-vmw-nsx-module": "BackupConfiguration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ConfigureRestoreConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RestoreConfiguration"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get configuration information for the file server used to store backed-up files.\nFields that contain secrets (password, passphrase) are not returned.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Get Restore configuration",
                "x-vmw-nsx-module": "BackupConfiguration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRestoreConfig"
            }
        },
        "/node/services/cm-inventory": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read cm inventory service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read cm inventory service properties",
                "x-vmw-nsx-module": "NodeCminventoryService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadCminventoryService"
            }
        },
        "/switching-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/BaseSwitchingProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new, custom qos, port-mirroring, spoof-guard or port-security\nswitching profile. You can override their default switching profile assignments\nby creating a new switching profile and assigning it to one or more logical\nswitches. You cannot override the default ipfix or ip_discovery switching profiles.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/BaseSwitchingProfile"
                        },
                        "required": true,
                        "name": "BaseSwitchingProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Create a Switching Profile",
                "x-vmw-nsx-module": "BaseSwitchingProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSwitchingProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SwitchingProfilesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the system-default and user-configured switching\nprofiles. Each switching profile has a unique ID, a display name, and\nvarious other read-only and configurable properties. The default switching\nprofiles are assigned automatically to each switch.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Whether the list result contains system resources",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "include_system_owned"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "comma-separated list of switching profile types, e.g. ?switching_profile_type=QosSwitchingProfile,PortMirroringSwitchingProfile",
                        "required": false,
                        "type": "string",
                        "name": "switching_profile_type",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "List Switching Profiles",
                "x-vmw-nsx-module": "BaseSwitchingProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListSwitchingProfiles"
            }
        },
        "/cluster/restore?action=suspend": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ClusterRestoreStatus"
                        }
                    }
                },
                "description": "Suspend any currently running restore operation. The restore operation is\nmade up of a number of steps. When this call is issued, any currently\nrunning step is allowed to finish (successfully or with errors), and the\nnext step (and therefore the entire restore operation) is suspended until\na subsequent resume or cancel call is issued. This operation is only valid\nwhen a GET cluster/restore/status returns a status with value RUNNING.\nOtherwise, a 409 response is returned.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Suspend any running restore operation",
                "x-vmw-nsx-module": "ClusterRestore",
                "consumes": [
                    "application/json"
                ],
                "operationId": "SuspendClusterRestoreSuspend"
            }
        },
        "/ipfix-profiles/{ipfix-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixUpmProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update an existing IPFIX profile with profile ID and modified properties.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipfix-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IpfixUpmProfile"
                        },
                        "required": true,
                        "name": "IpfixUpmProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unified Nsgroup Profile Management"
                ],
                "summary": "Update an existing IPFIX profile",
                "x-vmw-nsx-module": "UpmIpfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIpfixUpmProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixUpmProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get an existing IPFIX profile by profile ID.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipfix-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unified Nsgroup Profile Management"
                ],
                "summary": "Get an existing IPFIX profile",
                "x-vmw-nsx-module": "UpmIpfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIpfixUpmProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete an existing IPFIX profile by ID.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipfix-profile-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Unified Nsgroup Profile Management"
                ],
                "summary": "Delete an existing IPFIX profile",
                "x-vmw-nsx-module": "UpmIpfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIpfixUpmProfile"
            }
        },
        "/loadbalancer/client-ssl-profiles/{client-ssl-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbClientSslProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a load balancer client-ssl profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "client-ssl-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbClientSslProfile"
                        },
                        "required": true,
                        "name": "LbClientSslProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer client-ssl profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerClientSslProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbClientSslProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a load balancer client-ssl profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "client-ssl-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a load balancer client-ssl profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerClientSslProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a load balancer client-ssl profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "client-ssl-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a load balancer client-ssl profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLoadBalancerClientSslProfile"
            }
        },
        "/ns-groups/{ns-group-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates the specified NSGroup. Modifiable parameters include the\ndescription, display_name and members.\n",
                "parameters": [
                    {
                        "description": "NSGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-group-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/NSGroup"
                        },
                        "required": true,
                        "name": "NSGroup",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Update NSGroup",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNSGroup"
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Add/remove the expressions passed in the request body to/from the NSGroup\n",
                "parameters": [
                    {
                        "description": "NSGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-group-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/NSGroupExpressionList"
                        },
                        "required": true,
                        "name": "NSGroupExpressionList",
                        "in": "body"
                    },
                    {
                        "enum": [
                            "ADD_MEMBERS",
                            "REMOVE_MEMBERS"
                        ],
                        "description": "Specifies addition or removal action",
                        "required": true,
                        "in": "query",
                        "type": "string",
                        "name": "action"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Add NSGroup expression",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddOrRemoveNSGroupExpression"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified NSGroup.\n",
                "parameters": [
                    {
                        "description": "NSGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-group-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Populate metadata of resource referenced by NSGroupExpressions\n",
                        "type": "boolean",
                        "name": "populate_references",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Read NSGroup",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNSGroup"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified NSGroup. By default, if the NSGroup is added to\nanother NSGroup, it won't be deleted. In such situations, pass\n\"force=true\" as query param to force delete the NSGroup.\n",
                "parameters": [
                    {
                        "description": "NSGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-group-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Delete NSGroup",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteNSGroup"
            }
        },
        "/transport-nodes/{node-id}/statistics/nat-rules": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NatStatisticsPerTransportNode"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the summation of statistics for all rules from all logical routers\nwhich are present on given transport node. Only cached statistics are supported.\nThe query parameter \"source=realtime\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get statistics for all logical router NAT rules on a transport node",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNatStatisticsPerTransportNode"
            }
        },
        "/upgrade/eula/content": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EULAContent"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return the content of end user license agreement in the specified format.\nBy default, it's pure string without line break\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "End User License Agreement content output format",
                        "type": "string",
                        "name": "format",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Return the content of end user license agreement\n",
                "x-vmw-nsx-module": "UpgradeEULA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeEULAContent"
            }
        },
        "/loadbalancer/services/{service-id}/pools/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPoolStatisticsListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the statistics list of load balancer pools in given load balancer service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the statistics list of load balancer pools",
                "x-vmw-nsx-module": "AggSvcLb",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerPoolStatistics"
            }
        },
        "/cluster/nodes/{node-id}/repo_sync/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RepoSyncStatusReport"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the synchronization status for the manager represented by given <node-id>.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Synchronizes the repository data between nsx managers.",
                "x-vmw-nsx-module": "ClusterNodeVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRepoSyncStatus"
            }
        },
        "/loadbalancer/services/{service-id}/virtual-servers/{virtual-server-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServerStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the status of the virtual server by given load balancer serives id\nand load balancer virtual server id.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "virtual-server-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the status of the load balancer virtual server",
                "x-vmw-nsx-module": "AggSvcLb",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLoadBalancerVirtualServerStatus"
            }
        },
        "/serviceinsertion/sections/{section-id}?action=revise": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSection"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies an existing serviceinsertion section along with its relative position\namong other serviceinsertion sections in the system.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSection"
                        },
                        "required": true,
                        "name": "ServiceInsertionSection",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Section, Including Its Position",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReviseServiceInsertionSectionRevise"
            }
        },
        "/loadbalancer/services/{service-id}/virtual-servers/{virtual-server-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServerStatistics"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the statistics of the load balancer virtual server by given load\n balancer serives id and load balancer virtual server id.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "virtual-server-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the statistics of the given load balancer virtual server",
                "x-vmw-nsx-module": "AggSvcLb",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLoadBalancerVirtualServerStatistics"
            }
        },
        "/ns-groups/{ns-group-id}/effective-virtual-machine-members": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns effective virtual machine members of the specified NSGroup.\n",
                "parameters": [
                    {
                        "description": "NSGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-group-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Get Effective Virtual Machine members of the specified NSGroup.",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetEffectiveVirtualMachineMembers"
            }
        },
        "/firewall/sections/{section-id}/rules/{rule-id}?action=revise": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallRule"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies existing firewall rule along with relative position among\nother firewall rules inside a firewall section. Revising firewall rule in a\nsection modifies parent section entity and simultaneous update (modify)\noperations on same section are not allowed to prevent overwriting stale\ncontents to firewall section. If a concurrent update is performed, HTTP\nresponse code 409 will be returned to the client operating on stale data.\nThat client should retrieve the firewall section again and re-apply its\nupdate.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallRule"
                        },
                        "required": true,
                        "name": "FirewallRule",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Rule and Reorder the Rule",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReviseRuleRevise"
            }
        },
        "/app-discovery/sessions/{session-id}/report/app-profile-and-app-info?format=csv": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppProfileMemberAppsListInCsvFormat"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns app profiles information for a given session in CSV format\nEach row will contain detailed info of an app profile, and the id of\napps which is member of this app profile in this session\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Export app profiles in CSV format for a given sessiom",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppdiscoverySessionAppProfileMemberAppsInCsvFormatCsv"
            }
        },
        "/node/tasks/{task-id}?action=cancel": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Cancel specified task",
                "parameters": [
                    {
                        "description": "ID of task to delete",
                        "required": true,
                        "type": "string",
                        "name": "task-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Cancel specified task",
                "x-vmw-nsx-module": "ApplianceManagementTaskModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CancelApplianceManagementTaskCancel"
            }
        },
        "/fabric/compute-collections/{cc-ext-id}/network/physical-interfaces": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionNetworkInterfacesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns list of physical network interfaces for all discovered nodes in\ncompute collection. Interface information includes PNIC name, hostswitch\nname it's attached to(if any) and MAC address.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "cc-ext-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "List the Physical Network Interface for all discovered nodes",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListComputeCollectionPhysicalNetworkInterfaces"
            }
        },
        "/trust-management/principal-identities/{principal-identity-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PrincipalIdentity"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a stored principal identity\n",
                "parameters": [
                    {
                        "description": "ID of Principal Identity to get",
                        "required": true,
                        "type": "string",
                        "name": "principal-identity-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Get a Principal Identity",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetPrincipalIdentity"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a principal identity. It does not delete the certificate.\n",
                "parameters": [
                    {
                        "description": "Unique id of the principal identity to delete",
                        "required": true,
                        "type": "string",
                        "name": "principal-identity-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Delete a principal identity",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeletePrincipalIdentity"
            }
        },
        "/node/file-store/{file-name}": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/FileProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "When you issue this API, the client must specify:\n- HTTP header Content-Type:application/octet-stream.\n- Request body with the contents of the file in the filestore.\nIn the CLI, you can view the filestore with the <em>get files</em> command.\n",
                "parameters": [
                    {
                        "description": "Destination filename",
                        "required": true,
                        "type": "string",
                        "name": "file-name",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Upload a file to the file store",
                "x-vmw-nsx-module": "FileStoreModule",
                "consumes": [
                    "application/octet-stream"
                ],
                "operationId": "CreateFile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete file",
                "parameters": [
                    {
                        "description": "Name of the file to delete",
                        "required": true,
                        "type": "string",
                        "name": "file-name",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Delete file",
                "x-vmw-nsx-module": "FileStoreModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteFile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FileProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read file properties",
                "parameters": [
                    {
                        "description": "Name of the file to retrieve information about",
                        "required": true,
                        "type": "string",
                        "name": "file-name",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read file properties",
                "x-vmw-nsx-module": "FileStoreModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadFileProperties"
            }
        },
        "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InstanceRuntimeListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns list of instance runtimes of service VMs being deployed for a given service instance id\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Returns list of instance runtimes of service VM being deployed",
                "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListInstanceRuntimes"
            }
        },
        "/vpn/ipsec/dpd-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNDPDProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create dead peer detection (DPD) profile. Any change in profile affects all sessions consuming this profile.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNDPDProfile"
                        },
                        "required": true,
                        "name": "IPSecVPNDPDProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Create dead peer detection (DPD) profile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIPSecVPNDPDProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNDPDProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get paginated list of all dead peer detection (DPD) profiles.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec dead peer detection (DPD)  profile list result",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIPSecVPNDPDProfiles"
            }
        },
        "/migration/plan?action=rollback": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Rollbabck migration",
                "tags": [
                    "Migration"
                ],
                "summary": "Rollbabck migration",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "StartRollbackMigrationRollback"
            }
        },
        "/node/aaa/auth-policy": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyProperties"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update the currently configured authentication policy on the node.\nIf any of api_max_auth_failures, api_failed_auth_reset_period, or\napi_failed_auth_lockout_period are modified, the http service is\nautomatically restarted.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyProperties"
                        },
                        "required": true,
                        "name": "AuthenticationPolicyProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Services"
                ],
                "summary": "Update node authentication policy configuration",
                "x-vmw-nsx-module": "AuthenticationPolicyModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateAuthenticationPolicyProperties"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the currently configured authentication\npolicies on the node.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Services"
                ],
                "summary": "Read node authentication policy configuration",
                "x-vmw-nsx-module": "AuthenticationPolicyModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadAuthenticationPolicyProperties"
            }
        },
        "/loadbalancer/services/{service-id}/pools/{pool-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPoolStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the status of the given load balancer pool by given load balancer\nserives id and load balancer pool id.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the status of load balancer pool",
                "x-vmw-nsx-module": "AggSvcLb",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLoadBalancerPoolStatus"
            }
        },
        "/tasks/{task-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TaskProperties"
                        }
                    },
                    "303": {
                        "description": "See Other",
                        "schema": {
                            "$ref": "#/definitions/TaskProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get information about the specified task",
                "parameters": [
                    {
                        "description": "ID of task to read",
                        "required": true,
                        "type": "string",
                        "name": "task-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Services"
                ],
                "summary": "Get information about the specified task",
                "x-vmw-nsx-module": "Tasks",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadTaskProperties"
            }
        },
        "/mirror-sessions/{mirror-session-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PortMirroringSession"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update the mirror session",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "mirror-session-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/PortMirroringSession"
                        },
                        "required": true,
                        "name": "PortMirroringSession",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Update the mirror session",
                "x-vmw-nsx-module": "PortMirroring",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdatePortMirroringSession"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PortMirroringSession"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the mirror session",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "mirror-session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get the mirror session",
                "x-vmw-nsx-module": "PortMirroring",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetPortMirroringSession"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete the mirror session",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "mirror-session-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Delete the mirror session",
                "x-vmw-nsx-module": "PortMirroring",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeletePortMirroringSession"
            }
        },
        "/node/services/cm-inventory?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the manager service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the manager service",
                "x-vmw-nsx-module": "NodeCminventoryService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateCminventoryServiceActionRestart"
            }
        },
        "/logical-routers/{logical-router-id}/routing/static-routes/bfd-peers": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/StaticHopBfdPeer"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a BFD peer for static route. The required parameters includes peer IP address.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/StaticHopBfdPeer"
                        },
                        "required": true,
                        "name": "StaticHopBfdPeer",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Create a static hop BFD peer",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateStaticHopBfdPeer"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StaticHopBfdPeerListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all BFD peers created on specified logical router for static routes.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "List static routes BFD Peers",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListStaticHopBfdPeers"
            }
        },
        "/md-proxies": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/MetadataProxy"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a metadata proxy",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/MetadataProxy"
                        },
                        "required": true,
                        "name": "MetadataProxy",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a metadata proxy",
                "x-vmw-nsx-module": "MetadataProxy",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateMetadataProxy"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MetadataProxyListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a paginated list of metadata proxies",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a paginated list of metadata proxies",
                "x-vmw-nsx-module": "MetadataProxy",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListMetadataProxy"
            }
        },
        "/ui-views": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/View"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new View.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/View"
                        },
                        "required": true,
                        "name": "View",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Creates a new View.",
                "x-vmw-nsx-module": "NsxDashboard",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateView"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ViewList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "If no query params are specified then all the views entitled for the user\nare returned. The views to which a user is entitled to include the views\ncreated by the user and the shared views.\n",
                "parameters": [
                    {
                        "description": "Ids of the Views",
                        "maxLength": 8192,
                        "type": "string",
                        "name": "view_ids",
                        "in": "query"
                    },
                    {
                        "description": "Id of widget configuration",
                        "maxLength": 255,
                        "type": "string",
                        "name": "widget_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Returns the Views based on query criteria defined in ViewQueryParameters.",
                "x-vmw-nsx-module": "NsxDashboard",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListViews"
            }
        },
        "/ns-service-groups/{ns-service-group-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSServiceGroup"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates the specified NSService. Modifiable parameters include the description,\ndisplay_name and members.\n",
                "parameters": [
                    {
                        "description": "NSServiceGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-service-group-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/NSServiceGroup"
                        },
                        "required": true,
                        "name": "NSServiceGroup",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Update NSServiceGroup",
                "x-vmw-nsx-module": "NSServiceGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNSServiceGroup"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified NSServiceGroup. By default, if the NSServiceGroup is\nconsumed in a Firewall rule, it won't get deleted. In such situations, pass\n\"force=true\" as query param to force delete the NSServiceGroup.\n",
                "parameters": [
                    {
                        "description": "NSServiceGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-service-group-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Delete NSServiceGroup",
                "x-vmw-nsx-module": "NSServiceGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteNSServiceGroup"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSServiceGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified NSServiceGroup\n",
                "parameters": [
                    {
                        "description": "NSServiceGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-service-group-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Read NSServiceGroup",
                "x-vmw-nsx-module": "NSServiceGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNSServiceGroup"
            }
        },
        "/batch": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BatchResponse"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Enables you to make multiple API requests using a single request. The batch\nAPI takes in an array of logical HTTP requests represented as JSON arrays.\nEach request has a method (GET, PUT, POST, or DELETE), a relative_url (the\nportion of the URL after https://&lt;nsx-mgr&gt;/api/), optional headers\narray (corresponding to HTTP headers) and an optional body (for POST and PUT\nrequests). The batch API returns an array of logical HTTP responses\nrepresented as JSON arrays. Each response has a status code, an optional\nheaders array and an optional body (which is a JSON-encoded string).\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/BatchRequest"
                        },
                        "required": true,
                        "name": "BatchRequest",
                        "in": "body"
                    },
                    {
                        "description": "transactional atomicity for the batch of requests embedded in the batch list",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "atomic"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Services"
                ],
                "summary": "Register a Collection of API Calls at a Single End Point",
                "x-vmw-nsx-module": "Batch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "RegisterBatchRequest"
            }
        },
        "/vpn/ipsec/sessions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNSession"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create new VPN session.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNSession"
                        },
                        "required": true,
                        "name": "IPSecVPNSession",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Create new VPN session",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIPSecVPNSession"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNSessionListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get paginated list of all IPSec VPN sessions.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Id of the IPSec VPN service",
                        "required": false,
                        "type": "string",
                        "name": "ipsec_vpn_service_id",
                        "in": "query"
                    },
                    {
                        "description": "Id of logical router",
                        "required": false,
                        "type": "string",
                        "name": "logical_router_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "enum": [
                            "PolicyBasedIPSecVPNSession",
                            "RouteBasedIPSecVPNSession"
                        ],
                        "description": "Resource types of IPsec VPN session",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "session_type"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec VPN session list result",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIPSecVPNSessions"
            }
        },
        "/logical-ports/{lport-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalPortOperationalStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns operational status of a specified logical port.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lport-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get Operational Status for Logical Port of a Given Port ID (lport-id)",
                "x-vmw-nsx-module": "AggSvcLogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalPortOperationalStatus"
            }
        },
        "/licenses?action=delete": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "This will delete the license key identified in the request body\nby \"license_key\" and its properties from the system.\nAttempting to delete the last license key will result in an error.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/License"
                        },
                        "required": true,
                        "name": "License",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Remove a license",
                "x-vmw-nsx-module": "License",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLicenseKeyDelete"
            }
        },
        "/ipfix-collector-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorUpmProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a new IPFIX collector profile with essential properties.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorUpmProfile"
                        },
                        "required": true,
                        "name": "IpfixCollectorUpmProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unified Nsgroup Profile Management"
                ],
                "summary": "Create a new IPFIX collector profile",
                "x-vmw-nsx-module": "UpmIpfixCollector",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIpfixCollectorUpmProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorUpmProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Query IPFIX collector profiles with list parameters. List result can be\nfiltered by profile type defined by IpfixCollectorUpmProfileType.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "IPFIX Collector Profile Type List",
                        "required": false,
                        "type": "string",
                        "name": "profile_types",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unified Nsgroup Profile Management"
                ],
                "summary": "List IPFIX Collector Profies",
                "x-vmw-nsx-module": "UpmIpfixCollector",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIpfixCollectorUpmProfiles"
            }
        },
        "/upgrade/status-summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get upgrade status summary",
                "parameters": [
                    {
                        "description": "Component type based on which upgrade units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "SELECTED",
                            "DESELECTED",
                            "ALL"
                        ],
                        "description": "Flag to indicate whether to return status for only selected, only deselected or both type of upgrade units",
                        "default": "ALL",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "selection_status"
                    },
                    {
                        "description": "Get upgrade activity for a given component",
                        "required": false,
                        "type": "boolean",
                        "name": "show_history",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get upgrade status summary",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeStatusSummary"
            }
        },
        "/logical-ports/{lport-id}/mac-table?format=csv": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalPortMacAddressCsvListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns MAC table in CSV format of a specified logical port. If the target transport node id is not provided,\nthe NSX manager will ask the controller for the transport node where the logical port is located.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lport-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get MAC table of a logical port with a given port id (lport-id)",
                "x-vmw-nsx-module": "AggSvcLogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalPortMacTableInCsvFormatCsv"
            }
        },
        "/loadbalancer/services/{service-id}/virtual-servers/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServerStatisticsListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the statistics list of virtual servers in given load balancer service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the statistics list of virtual servers",
                "x-vmw-nsx-module": "AggSvcLb",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerVirtualServersStatistics"
            }
        },
        "/node/users/{userid}/ssh-keys?action=add_ssh_key": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Add SSH public key to authorized_keys file for node user",
                "parameters": [
                    {
                        "description": "User id of the user",
                        "required": true,
                        "type": "string",
                        "name": "userid",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/SshKeyProperties"
                        },
                        "required": true,
                        "name": "SshKeyProperties",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Add SSH public key to authorized_keys file for node user",
                "x-vmw-nsx-module": "NodeUsers",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddNodeUserSshKeyAdd_ssh_key"
            }
        },
        "/upgrade/upgrade-unit-groups/{group-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitStatusListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get upgrade status for group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Flag to indicate whether to return only upgrade units with errors",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "has_errors"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get upgrade status for group",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeUnitGroupStatus"
            }
        },
        "/node/tasks": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ApplianceManagementTaskListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List appliance management tasks",
                "parameters": [
                    {
                        "description": "Fields to include in query results",
                        "type": "string",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "pattern": "/^(=|!=|~|!~)?.+$/",
                        "description": "Request method(s) to include in query result",
                        "type": "string",
                        "name": "request_method",
                        "in": "query"
                    },
                    {
                        "pattern": "/^(=|!=|~|!~)?.+$/",
                        "description": "Request URI path(s) to include in query result",
                        "type": "string",
                        "name": "request_path",
                        "in": "query"
                    },
                    {
                        "pattern": "/^(=|!=|~|!~)?.+$/",
                        "description": "Request URI(s) to include in query result",
                        "type": "string",
                        "name": "request_uri",
                        "in": "query"
                    },
                    {
                        "pattern": "/^(=|!=|~|!~)?.+$/",
                        "description": "Status(es) to include in query result",
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "pattern": "/^(=|!=|~|!~)?.+$/",
                        "description": "Names of users to include in query result",
                        "type": "string",
                        "name": "user",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List appliance management tasks",
                "x-vmw-nsx-module": "ApplianceManagementTaskModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListApplianceManagementTasks"
            }
        },
        "/fabric/compute-managers/{compute-manager-id}/state": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationState"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the realized state of a compute manager",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "compute-manager-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Get the realized state of a compute manager",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetComputeManagerState"
            }
        },
        "/aaa/role-bindings/{binding-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RoleBinding"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update User or Group's roles",
                "parameters": [
                    {
                        "description": "User/Group's id",
                        "required": true,
                        "type": "string",
                        "name": "binding-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/RoleBinding"
                        },
                        "required": true,
                        "name": "RoleBinding",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Update User or Group's roles",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateRoleBinding"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete user/group's roles assignment",
                "parameters": [
                    {
                        "description": "User/Group's id",
                        "required": true,
                        "type": "string",
                        "name": "binding-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Delete user/group's roles assignment",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteRoleBinding"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RoleBinding"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get user/group's role information",
                "parameters": [
                    {
                        "description": "User/Group's id",
                        "required": true,
                        "type": "string",
                        "name": "binding-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Get user/group's role information",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRoleBinding"
            }
        },
        "/logical-routers/{logical-router-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouter"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified logical router. Modifiable attributes include the\ninternal_transit_network, external_transit_networks, and edge_cluster_id\n(for TIER0 routers).\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalRouter"
                        },
                        "required": true,
                        "name": "LogicalRouter",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a Logical Router",
                "x-vmw-nsx-module": "LogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLogicalRouter"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouter"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified logical router.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read Logical Router",
                "x-vmw-nsx-module": "LogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLogicalRouter"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified logical router. You must delete associated logical\nrouter ports before you can delete a logical router. Otherwise use force\ndelete which will delete all related ports and other entities associated\nwith that LR. To force delete logical router pass force=true in query param.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a Logical Router",
                "x-vmw-nsx-module": "LogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLogicalRouter"
            }
        },
        "/node/services/mgmt-plane-bus?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the Rabbit MQ service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the Rabbit MQ service",
                "x-vmw-nsx-module": "NodeRabbitMQService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateRabbitMQServiceActionStart"
            }
        },
        "/associations": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AssociationListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about resources that are associated with the given\nresource. Id and type of the resource for which associated resources are\nto be fetched are to be specified as query parameter in the URI. Resource\ntype of the associated resources must be specified as query\nparameter.\n",
                "parameters": [
                    {
                        "enum": [
                            "NSGroup"
                        ],
                        "description": "Resource type valid for use as target in association API",
                        "required": true,
                        "in": "query",
                        "type": "string",
                        "name": "associated_resource_type"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Fetch complete list of associated resources considering\ncontainment and nesting\n",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "fetch_ancestors"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "The resource for which associated resources are to be fetched",
                        "required": true,
                        "type": "string",
                        "name": "resource_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "NSGroup",
                            "IPSet",
                            "MACSet",
                            "LogicalSwitch",
                            "LogicalPort",
                            "VirtualMachine",
                            "DirectoryGroup"
                        ],
                        "description": "Resource type valid for use as source in association API",
                        "required": true,
                        "in": "query",
                        "type": "string",
                        "name": "resource_type"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Associations"
                ],
                "summary": "Get ResourceReference objects to which the given resource belongs to\n",
                "x-vmw-nsx-module": "Association",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAssociations"
            }
        },
        "/firewall/sections/{section-id}?action=lock": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSection"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "423": {
                        "description": "Locked"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Lock a section\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionLock"
                        },
                        "required": true,
                        "name": "FirewallSectionLock",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Lock a section",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "LockSectionLock"
            }
        },
        "/migration?action=upgrade_mc": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Upgrade the migration coordinator.",
                "tags": [
                    "Migration"
                ],
                "summary": "Upgrade the migration coordinator.",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "TriggerMcUpgradeUpgrade_mc"
            }
        },
        "/vpn/ipsec/local-endpoints/{ipsec-vpn-local-endpoint-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNLocalEndpoint"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Edit custom IPSec local endpoint.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-local-endpoint-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNLocalEndpoint"
                        },
                        "required": true,
                        "name": "IPSecVPNLocalEndpoint",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Edit custom IPSec local endpoint",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIPSecVPNLocalEndpoint"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNLocalEndpoint"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get custom IPSec local endpoint.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-local-endpoint-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get custom IPSec local endpoint",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNLocalEndpoint"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete custom IPSec local endpoint.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-local-endpoint-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Delete custom IPSec local endpoint",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIPSecVPNLocalEndpoint"
            }
        },
        "/node/services/nsx-message-bus/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read NSX Message Bus service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read NSX Message Bus service status",
                "x-vmw-nsx-module": "NodeNSXMessageBusService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNSXMessageBusServiceStatus"
            }
        },
        "/ip-sets/{ip-set-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSet"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates the specified IPSet. Modifiable parameters include description,\ndisplay_name and ip_addresses.\n",
                "parameters": [
                    {
                        "description": "IPSet Id",
                        "required": true,
                        "type": "string",
                        "name": "ip-set-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSet"
                        },
                        "required": true,
                        "name": "IPSet",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Update IPSet",
                "x-vmw-nsx-module": "IPSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIPSet"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified IPSet.  By default, if the IPSet is added to an\nNSGroup, it won't be deleted. In such situations, pass \"force=true\" as\nquery param to force delete the IPSet.\n",
                "parameters": [
                    {
                        "description": "IPSet Id",
                        "required": true,
                        "type": "string",
                        "name": "ip-set-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Delete IPSet",
                "x-vmw-nsx-module": "IPSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIPSet"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSet"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified IPSet\n",
                "parameters": [
                    {
                        "description": "IPSet Id",
                        "required": true,
                        "type": "string",
                        "name": "ip-set-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Read IPSet",
                "x-vmw-nsx-module": "IPSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadIPSet"
            }
        },
        "/tasks": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TaskListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get information about all tasks",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "Request URI(s) to include in query result",
                        "type": "string",
                        "name": "request_uri",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Status(es) to include in query result",
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "description": "Names of users to include in query result",
                        "type": "string",
                        "name": "user",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Services"
                ],
                "summary": "Get information about all tasks",
                "x-vmw-nsx-module": "Tasks",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListTasks"
            }
        },
        "/logical-ports/{lport-id}/mac-table": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalPortMacAddressListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns MAC table of a specified logical port. If the target transport node id is not provided,\nthe NSX manager will ask the controller for the transport node where the logical port is located.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lport-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get MAC table of a logical port with a given port id (lport-id)",
                "x-vmw-nsx-module": "AggSvcLogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalPortMacTable"
            }
        },
        "/logical-routers/{logical-router-id}/routing/advertisement/rules": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AdvertiseRuleList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the advertisement rules on the specified logical\nrouter. The PUT request must include all the rules with the networks parameter. Modifiable\nparameters are networks, display_name, and description. Set the rules list to empty to delete/clear all rules.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/AdvertiseRuleList"
                        },
                        "required": true,
                        "name": "AdvertiseRuleList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update the Advertisement Rules on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateAdvertiseRuleList"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AdvertiseRuleList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the advertisement rule list for the specified\nTIER1 logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read the Advertisement Rules on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadAdvertiseRuleList"
            }
        },
        "/logical-routers/{logical-router-id}/routing/routing-table?format=csv": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterRouteTableInCsvFormat"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the route table in CSV format for the logical router on a node of the given\ntransport-node-id. Query parameter \"transport_node_id=<transport-node-id>\" is required.\nTo filter the result by network address, paramter \"network_prefix=<a.b.c.d/mask>\"\nneeds to be specified.\nTo filter the result by route source, parameter \"route_source=<source_type>\" needs to be specified\nwhere source_type can be BGP, STATIC, CONNECTED, NSX_STATIC, TIER1_NAT or TIER0_NAT.\nIt is also possible to filter the RIB table using both network address and\nroute source filter together.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "IPv4 CIDR Block",
                        "format": "ipv4-cidr-block",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "network_prefix"
                    },
                    {
                        "enum": [
                            "BGP",
                            "STATIC",
                            "CONNECTED"
                        ],
                        "description": "To filter the RIB table based on the source from which route is learned.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "route_source"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": true,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get RIB table on a specified node for a logical router",
                "x-vmw-nsx-module": "AggSvcLogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterRoutingTableInCsvFormatCsv"
            }
        },
        "/transport-nodes": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/TransportNode"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Enables a fabric node to act as a transport node.\n\nAdditional documentation on creating a transport node can be found\nin the NSX-T Installation Guide.\n\nTransport nodes are hypervisor hosts and NSX Edges that will participate\nin an NSX-T overlay. For a hypervisor host, this means that it hosts\nVMs that will communicate over NSX-T logical switches. For NSX Edges,\nthis means that it will have logical router uplinks and downlinks.\n\nWhen creating a transport node, you must provide the node id of\nan existing fabric node (hypervisor host or NSX Edge node) in the\nnode_id property of the payload. This property is required.\n\nAdditionally, in order for the transport node to forward packets,\nthe host_switch_spec property must be specified.\n\nHost switches (called bridges in OVS on KVM hypervisors) are the\nindividual switches within the host virtual switch. Virtual machines\nare connected to the host switches.\n\nWhen creating a transport node, you need to specify if the host switches\nare already manually preconfigured on the node, or if NSX should create\nand manage the host switches. You specify this choice by the type\nof host switches you pass in the host_switch_spec property of the\nTransportNode request payload.\n\nFor a KVM host, you can preconfigure the host switch, or you can have\nNSX Manager perform the configuration. For an ESXi host or NSX Edge\nnode, NSX Manager always configures the host switch.\n\nTo preconfigure the host switches on a KVM host, pass an array\nof PreconfiguredHostSwitchSpec objects that describes those host\nswitches. In the current NSX-T release, only one prefonfigured host\nswitch can be specified.  See the PreconfiguredHostSwitchSpec schema\ndefinition for documentation on the properties that must be provided.\nPreconfigured host switches are only supported on KVM hosts, not on\nESXi hosts or NSX Edge nodes.\n\nTo allow NSX to manage the host switch configuration on KVM hosts,\nESXi hosts, or NSX Edge nodes, pass an array of StandardHostSwitchSpec\nobjects in the host_switch_spec property, and NSX will automatically\ncreate host switches with the properties you provide. In the current\nNSX-T release, up to 5 host switches can be automatically managed.\nSee the StandardHostSwitchSpec schema definition for documentation on\nthe properties that must be provided.\n\nNote: previous versions of NSX-T used a property named host_switches\nto specify the host switch configuration on the transport node. That\nproperty is deprecated, but still functions. You should configure new\nhost switches using the host_switch_spec property.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/TransportNode"
                        },
                        "required": true,
                        "name": "TransportNode",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create a Transport Node",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateTransportNode"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportNodeListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all transport nodes. A transport node is a\nfabric node (host or edge) that contains hostswitches. A hostswitch can\nhave virtual machines connected to them.\n\nBecause each transport node has HostSwitches, transport nodes can also have\nvirtual tunnel endpoints, which means that they can be part of the overlay.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "maintenance mode flag",
                        "required": false,
                        "type": "boolean",
                        "name": "in_maintenance_mode",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "node identifier",
                        "required": false,
                        "type": "string",
                        "name": "node_id",
                        "in": "query"
                    },
                    {
                        "description": "Fabric node IP address",
                        "required": false,
                        "type": "string",
                        "name": "node_ip",
                        "in": "query"
                    },
                    {
                        "description": "a list of fabric node types separated by comma or a single type",
                        "required": false,
                        "type": "string",
                        "name": "node_types",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Transport zone identifier",
                        "required": false,
                        "type": "string",
                        "name": "transport_zone_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List Transport Nodes",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListTransportNodes"
            }
        },
        "/migration/nodes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInfoListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get list of nodes across all types",
                "parameters": [
                    {
                        "description": "Component type based on which nodes will be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Component version based on which nodes will be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_version",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get list of nodes across all types",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationNodes"
            }
        },
        "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes/{instance-runtime-id}/interfaces/{interface_index}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RuntimeInterfaceStatistics"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns statistics of a specified interface via associated logical port. If the logical port is attached to\na logical router port, query parameter \"source=realtime\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "instance-runtime-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "interface_index",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get statistics for a given interface identified by the interface index",
                "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRuntimeInterfaceStatistics"
            }
        },
        "/upgrade/plan?action=upgrade_selected_units": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Upgrade selected units",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitList"
                        },
                        "required": true,
                        "name": "UpgradeUnitList",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Upgrade selected units",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpgradeSelectedUnitsUpgrade_selected_units"
            }
        },
        "/dhcp/relays": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a dhcp relay service.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayService"
                        },
                        "required": true,
                        "name": "DhcpRelayService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Create a DHCP Relay Service",
                "x-vmw-nsx-module": "DhcpRelay",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateDhcpRelay"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpRelayServiceListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all configured dhcp relay services.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "List all DHCP Relay Services",
                "x-vmw-nsx-module": "DhcpRelay",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListDhcpRelays"
            }
        },
        "/node/services/node-mgmt/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read appliance management service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read appliance management service status",
                "x-vmw-nsx-module": "NodeApplianceManagementService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadApplianceManagementServiceStatus"
            }
        },
        "/vpn/ipsec/services/{ipsec-vpn-service-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Edit IPSec VPN service for given logical router.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-service-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNService"
                        },
                        "required": true,
                        "name": "IPSecVPNService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Edit IPSec VPN service",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIPSecVPNService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get IPSec VPN service for given logical router.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-service-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec VPN service",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIPSecVPNService"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete IPSec VPN service for given router.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-service-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Delete IPSec VPN service",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIPSecVPNService"
            }
        },
        "/cluster/nodes/{node-id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Removes the specified controller node from the NSX cluster. Before you can\nremove a controller node from the cluster, you must shut down the controller\nservice with the \"stop service controller\" command.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Remove a controller node from the cluster",
                "x-vmw-nsx-module": "ClusterManagement",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteClusterNodeConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterNodeConfig"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified NSX cluster node.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read Cluster Node Configuration",
                "x-vmw-nsx-module": "ClusterManagement",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterNodeConfig"
            }
        },
        "/migration/setup": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationSetupInfo"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "NSX-V setup details",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/MigrationSetupInfo"
                        },
                        "required": true,
                        "name": "MigrationSetupInfo",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "NSX-V setup details",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNsxvSetupDetails"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationSetupInfo"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "NSX-V setup details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "NSX-V setup details",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNsxvSetupDetails"
            }
        },
        "/hpm/alarms": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AlarmListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "This API is executed on a manager node to return current alarms from all NSX nodes.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "format": "int64",
                        "type": "integer",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Fields to include in query results",
                        "type": "string",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 100,
                        "maximum": 100,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Collect alarms from all NSX nodes",
                "x-vmw-nsx-module": "NodeAuditLog",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CollectAlarms"
            }
        },
        "/node/services/ntp?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NTP service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NTP service",
                "x-vmw-nsx-module": "NodeNTPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNTPServiceActionStop"
            }
        },
        "/node/services/syslog?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the syslog service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the syslog service",
                "x-vmw-nsx-module": "NodeSyslogService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSyslogServiceActionRestart"
            }
        },
        "/fabric/compute-collection-fabric-templates": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionFabricTemplate"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionFabricTemplate"
                        },
                        "required": true,
                        "name": "ComputeCollectionFabricTemplate",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Create a compute collection fabric template",
                "x-vmw-nsx-module": "ComputeCollectionHostPrepFabricService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateComputeCollectionFabricTemplate"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionFabricTemplateListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns compute collection fabric templates",
                "parameters": [
                    {
                        "description": "Compute collection id",
                        "required": false,
                        "type": "string",
                        "name": "compute_collection_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Get compute collection fabric templates",
                "x-vmw-nsx-module": "ComputeCollectionHostPrepFabricService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListComputeCollectionFabricTemplates"
            }
        },
        "/upgrade/upgrade-unit-groups-status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitGroupStatusListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get upgrade status for upgrade unit groups",
                "parameters": [
                    {
                        "description": "Component type based on which upgrade unit groups to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get upgrade status for upgrade unit groups",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeUnitGroupsStatus"
            }
        },
        "/firewall/sections": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/FirewallSection"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates new empty firewall section in the system.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallSection"
                        },
                        "required": true,
                        "name": "FirewallSection",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a New Empty Section",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddSection"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List all firewall section in paginated form. A default page size is limited\nto 1000 firewall sections. By default list of section is filtered by LAYER3\ntype.\n",
                "parameters": [
                    {
                        "description": "AppliedTo's referenced by this section or section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "applied_tos",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Destinations referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "destinations",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "VIF",
                            "LOGICALROUTER",
                            "BRIDGEENDPOINT",
                            "DHCP_SERVICE",
                            "METADATA_PROXY",
                            "L2VPN_SESSION",
                            "NONE"
                        ],
                        "description": "Type of attachment for logical port; for query only.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "enforced_on"
                    },
                    {
                        "enum": [
                            "NSGroup",
                            "LogicalSwitch",
                            "LogicalRouter",
                            "LogicalPort"
                        ],
                        "description": "Resource type valid for use as AppliedTo filter in section API",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "exclude_applied_to_type"
                    },
                    {
                        "enum": [
                            "FILTER",
                            "SEARCH"
                        ],
                        "description": "Filter type",
                        "default": "FILTER",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "filter_type"
                    },
                    {
                        "enum": [
                            "NSGroup",
                            "LogicalSwitch",
                            "LogicalRouter",
                            "LogicalPort"
                        ],
                        "description": "Resource type valid for use as AppliedTo filter in section API",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "include_applied_to_type"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Limit results to sections which are locked/unlocked",
                        "required": false,
                        "type": "boolean",
                        "name": "locked",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "Return invalid references in results.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "search_invalid_references"
                    },
                    {
                        "description": "Limit result to sections of a specific enforcement point",
                        "required": false,
                        "type": "string",
                        "name": "search_scope",
                        "in": "query"
                    },
                    {
                        "description": "NSService referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "services",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Sources referenced by this section's Distributed Service Rules .",
                        "required": false,
                        "type": "string",
                        "name": "sources",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "LAYER2",
                            "LAYER3"
                        ],
                        "description": "Section Type",
                        "default": "LAYER3",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "type"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "List All Firewall Sections",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListSections"
            }
        },
        "/firewall/sections/{section-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSection"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified section, but does not modify the section's\nassociated rules. Simultaneous update (modify) operations on same section\nare not allowed to prevent overwriting stale contents to firewall section.\nIf a concurrent update is performed, HTTP response code 409 will be\nreturned to the client operating on stale data. That client should retrieve\nthe firewall section again and re-apply its update.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallSection"
                        },
                        "required": true,
                        "name": "FirewallSection",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Section",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateSection"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSection"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about firewall section for the identifier.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get an Existing Section",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetSection"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Removes firewall section from the system. Firewall section with\nrules can only be deleted by passing \"cascade=true\" parameter.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "description": "Flag to cascade delete of this object to all it's child objects.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "cascade"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete an Existing Section and Its Associated Rules",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteSection"
            }
        },
        "/node/services/http?action=restart": {
            "post": {
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart the http service",
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart the http service",
                "x-vmw-nsx-module": "NodeProxyService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateProxyServiceActionRestart"
            }
        },
        "/firewall/sections/{section-id}/rules/{rule-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallRule"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies existing firewall rule in a firewall section. Updating firewall\nrule in a section modifies parent section entity and simultaneous update\n(modify) operations on same section are not allowed to prevent overwriting\nstale contents to firewall section. If a concurrent update is performed,\nHTTP response code 409 will be returned to the client operating on stale\ndata. That client should retrieve the firewall section again and re-apply\nits update.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallRule"
                        },
                        "required": true,
                        "name": "FirewallRule",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Rule",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateRule"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete existing firewall rule in a firewall section. Deleting firewall rule\nin a section modifies parent section and simultaneous update (modify)\noperations on same section are not allowed to prevent overwriting stale\ncontents to firewall section. If a concurrent update is performed, HTTP\nresponse code 409 will be returned to the client operating on stale data.\nThat client should retrieve the firewall section again and re-apply its\nupdate.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete an Existing Rule",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteRule"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallRule"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return existing firewall rule information in a firewall section.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Read an Existing Rule",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRule"
            }
        },
        "/upgrade/upgrade-unit-groups/{group-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update the upgrade unit group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitGroup"
                        },
                        "required": true,
                        "name": "UpgradeUnitGroup",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Update the upgrade unit group",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateUpgradeUnitGroup"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete the upgrade unit group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Delete the upgrade unit group",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteUpgradeUnitGroup"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeUnitGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return upgrade unit group information",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "description": "Flag indicating whether to return the summary",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "summary"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Return upgrade unit group information",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeUnitGroup"
            }
        },
        "/logical-switches/{lswitch-id}/vtep-table?format=csv": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VtepCsvListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns virtual tunnel endpoint table of a specified logical switch in\nCSV format from the given transport node if a transport node id is\ngiven in the query parameter from the Central Controller Plane.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lswitch-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get virtual tunnel endpoint table for logical switch of the given\nID (lswitch-id)\n",
                "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalSwitchVtepTableInCsvFormatCsv"
            }
        },
        "/migration/migration-unit-groups/{group-id}?action=reorder": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Reorder migration unit group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ReorderMigrationRequest"
                        },
                        "required": true,
                        "name": "ReorderMigrationRequest",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Reorder migration unit group",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReorderMigrationUnitGroupReorder"
            }
        },
        "/node/services/manager?action=reset-manager-logging-levels": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Reset the logging levels to default values",
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Reset the logging levels to default values",
                "x-vmw-nsx-module": "NodeProtonService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ResetProtonServiceLoggingLevelActionReset-manager-logging-levels"
            }
        },
        "/fabric/nodes/{node-id}/capabilities": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeCapabilitiesResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about capabilities of a single fabric host node. Edge nodes do not have capabilities.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return the List of Capabilities of a Single Node",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNodeCapabilities"
            }
        },
        "/vpn/ipsec/services": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create VPN service for given logical router.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNService"
                        },
                        "required": true,
                        "name": "IPSecVPNService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Create VPN service",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIPSecVPNService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNServiceListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get paginated list of all IPSec VPN services.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSec VPN service list result",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIPSecVPNServices"
            }
        },
        "/logical-switches/{lswitch-id}/mac-table": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MacAddressListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns MAC table of a specified logical switch from the given transport\nnode if a transport node id is given in the query parameter from the\nCentral Controller Plane.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lswitch-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get MAC Table for Logical Switch of the Given ID (lswitch-id)",
                "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalSwitchMacTable"
            }
        },
        "/pools/vni-pools/{pool-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VniPool"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates the specified VNI pool. Modifiable parameters include description, display_name and ranges.\nRanges can be added, modified or deleted. Overlapping ranges are not allowed.\nOnly range end can be modified for any existing range.\nRange shrinking or deletion is not allowed if there are any allocated VNIs.\n",
                "parameters": [
                    {
                        "description": "VNI pool ID",
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/VniPool"
                        },
                        "required": true,
                        "name": "VniPool",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Update a VNI Pool",
                "x-vmw-nsx-module": "Vnim",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateVNIPool"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VniPool"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified virtual network identifier (VNI) pool.\n",
                "parameters": [
                    {
                        "description": "VNI pool ID",
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Read VNI Pool",
                "x-vmw-nsx-module": "Vnim",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadVNIPool"
            }
        },
        "/licenses": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/License"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "This will add a license key to the system.\nThe API supports adding only one license key for each license edition\ntype - Standard, Advanced or Enterprise. If a new license key is tried\nto add for an edition for which the license key already exists,\nthen this API will return an error.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/License"
                        },
                        "required": true,
                        "name": "License",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Add a new license key",
                "x-vmw-nsx-module": "License",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLicense"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LicensesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns all licenses.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Get all licenses",
                "x-vmw-nsx-module": "License",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLicenses"
            }
        },
        "/node/services/telemetry?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop Telemetry service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop Telemetry service",
                "x-vmw-nsx-module": "NodePhonehomeCoordinatorService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreatePhonehomeCoordinatorServiceActionStart"
            }
        },
        "/node/services/cm-inventory?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the manager service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the manager service",
                "x-vmw-nsx-module": "NodeCminventoryService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateCminventoryServiceActionStart"
            }
        },
        "/logical-routers/{logical-router-id}/routing/ip-prefix-lists/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPPrefixList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a specific IPPrefixList on the specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IPPrefixList"
                        },
                        "required": true,
                        "name": "IPPrefixList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a specific IPPrefixList on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIPPrefixList"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPPrefixList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read a specific IPPrefixList on the specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get a specific IPPrefixList on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadIPPrefixList"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes a specific IPPrefixList on the specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a specific IPPrefixList on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIPPrefixList"
            }
        },
        "/mac-sets/{mac-set-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MACSet"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates the specified MACSet. Modifiable parameters include the\ndescription, display_name and mac_addresses.\n",
                "parameters": [
                    {
                        "description": "MACSet Id",
                        "required": true,
                        "type": "string",
                        "name": "mac-set-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/MACSet"
                        },
                        "required": true,
                        "name": "MACSet",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Update MACSet",
                "x-vmw-nsx-module": "MACSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateMACSet"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified MACSet. By default, if the MACSet is added to an\nNSGroup, it won't be deleted. In such situations, pass \"force=true\" as\nquery param to force delete the MACSet.\n",
                "parameters": [
                    {
                        "description": "MACSet Id",
                        "required": true,
                        "type": "string",
                        "name": "mac-set-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Delete MACSet",
                "x-vmw-nsx-module": "MACSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteMACSet"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MACSet"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified MACSet\n",
                "parameters": [
                    {
                        "description": "MACSet Id",
                        "required": true,
                        "type": "string",
                        "name": "mac-set-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Read MACSet",
                "x-vmw-nsx-module": "MACSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadMACSet"
            }
        },
        "/logical-ports/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalPortStatusSummary"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns operational status of all logical ports.\nThe query parameter \"source=realtime\" is not supported.\n",
                "parameters": [
                    {
                        "description": "Logical Port attachment Id",
                        "required": false,
                        "type": "string",
                        "name": "attachment_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "VIF",
                            "LOGICALROUTER",
                            "BRIDGEENDPOINT",
                            "DHCP_SERVICE",
                            "METADATA_PROXY",
                            "L2VPN_SESSION",
                            "NONE"
                        ],
                        "description": "Type of attachment for logical port; for query only.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "attachment_type"
                    },
                    {
                        "description": "Bridge Cluster identifier",
                        "required": false,
                        "type": "string",
                        "name": "bridge_cluster_id",
                        "in": "query"
                    },
                    {
                        "description": "Only container VIF logical ports will be returned if true",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "container_ports_only"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Flag to enable showing of transit logical port.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "diagnostic"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Logical Switch identifier",
                        "required": false,
                        "type": "string",
                        "name": "logical_switch_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "ID of the VIF of type PARENT",
                        "required": false,
                        "type": "string",
                        "name": "parent_vif_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "Network Profile identifier",
                        "required": false,
                        "type": "string",
                        "name": "switching_profile_id",
                        "in": "query"
                    },
                    {
                        "description": "Transport node identifier",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    },
                    {
                        "description": "Transport zone identifier",
                        "required": false,
                        "type": "string",
                        "name": "transport_zone_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get Operational Status Summary of All Logical Ports in the System",
                "x-vmw-nsx-module": "AggSvcLogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalPortStatusSummary"
            }
        },
        "/md-proxies/{proxy-id}/{logical-switch-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MetadataProxyStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the status of the given metadata proxy and attached logical switch.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "proxy-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-switch-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get Metadata Proxy status with given proxy id and attached logical switch.",
                "x-vmw-nsx-module": "AggSvcMetadataProxy",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMetadataProxyStatus"
            }
        },
        "/firewall/sections/{section-id}/state": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionState"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return realized state information of a firewall section.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "name": "barrier_id",
                        "format": "int64",
                        "required": false,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "description": "Realization request ID",
                        "required": false,
                        "type": "string",
                        "name": "request_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the Realized State of a Firewall Section",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetSectionState"
            }
        },
        "/node/version": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeVersion"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read node version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read node version",
                "x-vmw-nsx-module": "NodeVersion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeVersion"
            }
        },
        "/ns-services": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/NSService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new NSService which allows users to specify characteristics to use\nfor matching network traffic.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NSService"
                        },
                        "required": true,
                        "name": "NSService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Create NSService",
                "x-vmw-nsx-module": "NSService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNSService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSServiceListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns paginated list of NSServices\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Fetch all default NSServices",
                        "type": "boolean",
                        "name": "default_service",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "List all NSServices",
                "x-vmw-nsx-module": "NSService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNSServices"
            }
        },
        "/node/services/manager?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the service",
                "x-vmw-nsx-module": "NodeProtonService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateProtonServiceActionStart"
            }
        },
        "/cluster-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ClusterProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a cluster profile. The resource_type is required.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ClusterProfile"
                        },
                        "required": true,
                        "name": "ClusterProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create a Cluster Profile",
                "x-vmw-nsx-module": "ClusterProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateClusterProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns paginated list of cluster profiles\nCluster profiles define policies for edge cluster and bridge cluster.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Whether the list result contains system resources",
                        "default": true,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "include_system_owned"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "enum": [
                            "EdgeHighAvailabilityProfile",
                            "BridgeHighAvailabilityClusterProfile"
                        ],
                        "description": "Supported cluster profiles.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "resource_type"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List Cluster Profiles",
                "x-vmw-nsx-module": "ClusterProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListClusterProfiles"
            }
        },
        "/logical-router-ports/{logical-router-port-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterPortStatistics"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the statistics for the Logical Router Port. If query parameter\n\"transport_node_id=<transport-node-id>\" is given,  only the statistics\nfrom the given node for the logical router port will be returned.\nOtherwise the statistics from each node for the same logical router port\nwill be returned. The transport_node_id is mandatory if the router port\nis not uplink type.\nThe query parameter \"source=realtime\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-port-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get the statistics of a specified logical router port on all or a specified node",
                "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterPortStatistics"
            }
        },
        "/pools/ip-subnets/{subnet-id}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AllocationIpAddress"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Allocates or releases an IP address from the specified IP subnet. To allocate\nan address, include ?action=ALLOCATE in the request and a \"{}\"\nin the request body. When the request is successful, the response is\n\"allocation_id\": \"<ip-address>\", where <ip-address> is an IP address from\nthe specified pool. To release an IP address (return it back to the pool),\ninclude ?action=RELEASE in the request and \"allocation_id\":<ip-address> in\nthe request body, where <ip-address> is the address to be released. When the\nrequest is successful, the response is NULL.\n",
                "parameters": [
                    {
                        "description": "IP subnet id",
                        "required": true,
                        "type": "string",
                        "name": "subnet-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/AllocationIpAddress"
                        },
                        "required": true,
                        "name": "AllocationIpAddress",
                        "in": "body"
                    },
                    {
                        "enum": [
                            "ALLOCATE",
                            "RELEASE"
                        ],
                        "description": "Specifies allocate or release action",
                        "required": true,
                        "in": "query",
                        "type": "string",
                        "name": "action"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Allocate or Release an IP Address from a Ip Subnet",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AllocateOrReleaseFromIpBlockSubnet"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes a subnet with specified id within a given IP address block.\nDeletion is allowed only when there are no allocated IP addresses\nfrom that subnet.\n",
                "parameters": [
                    {
                        "description": "Subnet id",
                        "required": true,
                        "type": "string",
                        "name": "subnet-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Delete subnet within an IP block",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIpBlockSubnet"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpBlockSubnet"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the subnet with specified id within a given\nIP address block. Information includes display_name, description, cidr and\nallocation_ranges.\n",
                "parameters": [
                    {
                        "description": "Subnet id",
                        "required": true,
                        "type": "string",
                        "name": "subnet-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Get the subnet within an IP block",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadIpBlockSubnet"
            }
        },
        "/node/services/cluster_manager": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read cluster boot manager service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read cluster boot manager service properties",
                "x-vmw-nsx-module": "NodeClusterBootManagerService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterBootManagerService"
            }
        },
        "/migration/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationSummary"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get migration summary",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get migration summary",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationSummary"
            }
        },
        "/md-proxies/{proxy-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MetadataProxyStatistics"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the statistics of the given metatada proxy. If no logical switch\nis provided, all staticstics of all the logical switches the proxy was\nattached will be returned.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "proxy-id",
                        "in": "path"
                    },
                    {
                        "description": "The uuid of logical switch",
                        "required": false,
                        "type": "string",
                        "name": "logical_switch_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get Metadata Proxy statistics with given proxy id",
                "x-vmw-nsx-module": "AggSvcMetadataProxy",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMetadataProxyStatistics"
            }
        },
        "/node/file-store/{file-name}?action=copy_from_remote_file": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/FileProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Copy a remote file to the file store. If you use scp or sftp,\nyou must provide the remote server's SSH fingerprint. See the\n<i>NSX-T Administration Guide</i> for information and instructions\nabout finding the SSH fingerprint.\n",
                "parameters": [
                    {
                        "description": "Destination filename",
                        "required": true,
                        "type": "string",
                        "name": "file-name",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/CopyFromRemoteFileProperties"
                        },
                        "required": true,
                        "name": "CopyFromRemoteFileProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Copy a remote file to the file store",
                "x-vmw-nsx-module": "FileStoreModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CopyFromRemoteFileCopy_from_remote_file"
            }
        },
        "/node/services/node-mgmt": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read appliance management service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read appliance management service properties",
                "x-vmw-nsx-module": "NodeApplianceManagementService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadApplianceManagementService"
            }
        },
        "/serviceinsertion/sections/{section-id}?action=update_with_rules": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSectionRuleList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies existing serviceinsertion section along with its association with rules.\nWhen invoked on a large number of rules, this API is supported only at low\nrates of invocation (not more than 2 times per minute). The typical latency\nof this API with about 1024 rules is about 15 seconds in a cluster setup.\nThis API should not be invoked with large payloads at automation speeds.\n\nInstead, to update rule content, use:\nPUT /api/v1/serviceinsertion/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt;\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSectionRuleList"
                        },
                        "required": true,
                        "name": "ServiceInsertionSectionRuleList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an Existing Section, Including Its Rules",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateServiceInsertionSectionWithRulesUpdate_with_rules"
            }
        },
        "/pools/ip-pools": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IpPool"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new IPv4 or IPv6 address pool. Required parameters are\nallocation_ranges and cidr. Optional parameters are display_name,\ndescription, dns_nameservers, dns_suffix, and gateway_ip.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IpPool"
                        },
                        "required": true,
                        "name": "IpPool",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Create an IP Pool",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIpPool"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpPoolListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the configured IP address pools. Information\nincludes the display name and description of the pool and the details of\neach of the subnets in the pool, including the DNS servers, allocation\nranges, gateway, and CIDR subnet address.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "List IP Pools",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIpPools"
            }
        },
        "/node/processes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeProcessPropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the number of processes and information about each\nprocess. Process information includes 1) mem_resident, which is roughly\nequivalent to the amount of RAM, in bytes, currently used by the process,\n2) parent process ID (ppid), 3) process name, 4) process up time in milliseconds,\n5) mem_used, wich is the amount of virtual memory used by the process, in\nbytes, 6) process start time, in milliseconds since epoch, 7) process ID\n(pid), 8) CPU time, both user and the system, consumed by the process in\nmilliseconds.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List node processes",
                "x-vmw-nsx-module": "NodeProcesses",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNodeProcesses"
            }
        },
        "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes?action=delete": {
            "post": {
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Undeploy one service VM as standalone or two service VMs as HA. Associated deployment information and instance\nruntime will also be deleted once service VMs have been un-deployed successfully.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Remove service VMs either as standalone or HA",
                "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteServiceVMsDelete"
            }
        },
        "/ns-groups/{nsgroup-id}/service-associations": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceAssociationListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about services that are associated with the given NSGroup.\nThe service name is passed by service_type parameter\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "nsgroup-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Fetch complete list of associated resources considering\nnesting\n",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "fetch_parentgroup_associations"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service_type",
                        "enum": [
                            "firewall",
                            "ipfix"
                        ],
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Get services to which the given nsgroup belongs to\n",
                "x-vmw-nsx-module": "GroupingObjectsProviders",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetServiceAssociations"
            }
        },
        "/node/network/routes/{route-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeRouteProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns detailed information about a specified route in the NSX Manager\nrouting table.\n",
                "parameters": [
                    {
                        "description": "ID of route to read",
                        "required": true,
                        "type": "string",
                        "name": "route-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read node network route",
                "x-vmw-nsx-module": "NodeNetworkRoutesModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeNetworkRoute"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a route from the NSX Manager routing table. You can modify an\nexisting route by deleting it and then posting the modified version of the\nroute. To verify, remove the route ID from the URI, issue a GET request, and\nnote the absense of the deleted route.\n",
                "parameters": [
                    {
                        "description": "ID of route to delete",
                        "required": true,
                        "type": "string",
                        "name": "route-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Delete node network route",
                "x-vmw-nsx-module": "NodeNetworkRoutesModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteNodeNetworkRoute"
            }
        },
        "/loadbalancer/services/{service-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbServiceStatistics"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the statistics of the given load balancer service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the statistics of load balancer service",
                "x-vmw-nsx-module": "AggSvcLb",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLoadBalancerServiceStatistics"
            }
        },
        "/migration/plan/{component_type}/settings": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationPlanSettings"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update the migration plan settings for the component.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "component_type",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/MigrationPlanSettings"
                        },
                        "required": true,
                        "name": "MigrationPlanSettings",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Update migration plan settings for the component",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateMigrationPlanSettings"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationPlanSettings"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the migration plan settings for the component.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "component_type",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get migration plan settings for the component",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationPlanSettings"
            }
        },
        "/lldp/transport-nodes/{node-id}/interfaces": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InterfaceNeighborPropertyListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List LLDP Neighbor Properties",
                "parameters": [
                    {
                        "description": "ID of transport node",
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List LLDP Neighbor Properties",
                "x-vmw-nsx-module": "Lldp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNeighborProperties"
            }
        },
        "/logical-ports/{lport-id}/forwarding-path": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PortConnectionEntities"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get networking entities between two logical ports with VIF attachment",
                "parameters": [
                    {
                        "description": "ID of source port",
                        "required": true,
                        "type": "string",
                        "name": "lport-id",
                        "in": "path"
                    },
                    {
                        "description": "ID of peer port",
                        "required": true,
                        "type": "string",
                        "name": "peer_port_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get networking entities between two logical ports with VIF attachment",
                "x-vmw-nsx-module": "PortConnection",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetForwardingPath"
            }
        },
        "/error-resolver": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ErrorResolverInfoList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns a list of metadata for all the error resolvers registered.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Error Resolver"
                ],
                "summary": "Fetches a list of metadata for all the registered error resolvers",
                "x-vmw-nsx-module": "ErrorResolver",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListErrorResolverInfo"
            }
        },
        "/node/file-store?action=create_remote_directory": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a directory on the remote remote server. Supports only SFTP.\nYou must provide the remote server's SSH fingerprint. See the\n<i>NSX Administration Guide</i> for information and instructions\nabout finding the SSH fingerprint.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/CreateRemoteDirectoryProperties"
                        },
                        "required": true,
                        "name": "CreateRemoteDirectoryProperties",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Create directory in remote file server",
                "x-vmw-nsx-module": "FileStoreModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateRemoteDirectoryCreate_remote_directory"
            }
        },
        "/trust-management/csrs": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Csr"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new certificate signing request (CSR). A CSR is encrypted text that\ncontains information about your organization (organization name, country,\nand so on) and your Web server's public key, which is a public certificate\nthe is generated on the server that can be used to forward this request to a\ncertificate authority (CA). A private key is also usually created at the\nsame time as the CSR.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/Csr"
                        },
                        "required": true,
                        "name": "Csr",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Generate a New Certificate Signing Request",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GenerateCsr"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CsrList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all of the CSRs that have been created.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Return All the Generated CSRs",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetCsrs"
            }
        },
        "/node/services/nsx-upgrade-agent": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read NSX upgrade Agent service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read NSX upgrade Agent service properties",
                "x-vmw-nsx-module": "NodeNsxUpgradeAgent",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNsxUpgradeAgentService"
            }
        },
        "/logical-routers/{logical-router-id}/routing/route-maps/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RouteMap"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a specific RouteMap on the specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/RouteMap"
                        },
                        "required": true,
                        "name": "RouteMap",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a specific RouteMap on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateRouteMap"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RouteMap"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read a specific RouteMap on the specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get a specific RouteMap on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadRouteMap"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes a specific RouteMap on the specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a specific RouteMap on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteRouteMap"
            }
        },
        "/migration/plan?action=continue": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Continue migration",
                "parameters": [
                    {
                        "description": "Skip to migration of next component.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "skip"
                    }
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Continue migration",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ContinueMigrationContinue"
            }
        },
        "/node/hardening-policy/mandatory-access-control/report": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the report for Mandatory Access Control",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Get the report for Mandatory Access Control",
                "x-vmw-nsx-module": "NodeMandatoryAccessControlModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNodeMandatoryAccessControlReport"
            }
        },
        "/node?action=shutdown": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restarts or shuts down the NSX Manager appliance.",
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart or shutdown node",
                "x-vmw-nsx-module": "Node",
                "consumes": [
                    "application/json"
                ],
                "operationId": "RestartOrShutdownNodeShutdown"
            }
        },
        "/loadbalancer/services/{service-id}/pools/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPoolStatusListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the status list of load balancer pools in given load balancer service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the status list of load balancer pools",
                "x-vmw-nsx-module": "AggSvcLb",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerPoolStatuses"
            }
        },
        "/logical-ports/{lport-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalPortStatistics"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns statistics of a specified logical port. If the logical port is attached to\na logical router port, query parameter \"source=realtime\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lport-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get Statistics for Logical Port of a Given Port ID (lport-id)",
                "x-vmw-nsx-module": "AggSvcLogicalPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalPortStatistics"
            }
        },
        "/node/services/install-upgrade/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read NSX install-upgrade service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read NSX install-upgrade service status",
                "x-vmw-nsx-module": "NodeInstallUpgradeService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadRepositoryServiceStatus"
            }
        },
        "/firewall/sections/{section-id}/rules/{rule-id}/stats": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallStats"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get aggregated statistics for a rule for given firewall section. The\nAPI only supports access to cached (source=cached) statistical data\ncollected offline in the system. Data includes total number of packets,\nbytes, sessions counters and popularity index for a firewall rule and\noverall session count, max session count and max popularity index for\nall firewall rules on transport nodes or edge nodes. Aggregated\nstatistics like maximum popularity index, maximum session count and\ntotal session count are computed with lower frequency compared to\nindividual generic rule statistics, hence they may have a computation\ndelay up to 15 minutes to reflect in response to this API.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get Firewall rule level statistics",
                "x-vmw-nsx-module": "FirewallStatsRule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetFirewallStats"
            }
        },
        "/firewall/rules/{rule-id}/state": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RuleState"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return realized state information of a firewall rule.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    },
                    {
                        "name": "barrier_id",
                        "format": "int64",
                        "required": false,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "description": "Realization request ID",
                        "required": false,
                        "type": "string",
                        "name": "request_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the Realized State of a Firewall Rule",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRuleState"
            }
        },
        "/loadbalancer/services/{service-id}/usage": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbServiceUsage"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "API to fetch the capacity and current usage of the given load balancer\nservice.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Read the usage information of the given load balancer service",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerServiceUsage"
            }
        },
        "/ipfix/collectorconfigs/{collector-config-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorConfig"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update an existing IPFIX collector configuration",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "collector-config-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorConfig"
                        },
                        "required": true,
                        "name": "IpfixCollectorConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Update an existing IPFIX collector configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIpfixCollectorConfig"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete an existing IPFIX collector configuration",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "collector-config-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Delete an existing IPFIX collector configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIpfixCollectorConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixCollectorConfig"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get an existing IPFIX collector configuration",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "collector-config-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Get an existing IPFIX collector configuration",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIpfixCollectorConfig"
            }
        },
        "/telemetry/agreement": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TelemetryAgreement"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Set telemetry agreement information.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/TelemetryAgreement"
                        },
                        "required": true,
                        "name": "TelemetryAgreement",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Set telemetry agreement information",
                "x-vmw-nsx-module": "TelemetryConfig",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateTelemetryAgreement"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TelemetryAgreement"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns telemetry agreement information.",
                "produces": [
                    "application/json"
                ],
                "summary": "Returns telemetry agreement information",
                "x-vmw-nsx-module": "TelemetryConfig",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTelemetryAgreement"
            }
        },
        "/cluster/nodes/deployments": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ClusterNodeVMDeploymentRequestList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deploys a cluster node VM as specified by the deployment config.\nOnce the VM is deployed, if its role is that of a controller node, it will\nautomatically register itself with the Manager that deployed it.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AddClusterNodeVMInfo"
                        },
                        "required": true,
                        "name": "AddClusterNodeVMInfo",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Deploy and register a cluster node VM",
                "x-vmw-nsx-module": "ClusterNodeVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddClusterNodeVM"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterNodeVMDeploymentRequestList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns request information for every attempted deployment of a cluster\nnode VM.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Returns info for all cluster node VM auto-deployment attempts",
                "x-vmw-nsx-module": "ClusterNodeVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListClusterNodeVMDeploymentRequests"
            }
        },
        "/cluster": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClusterConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the NSX cluster configuration. An NSX cluster has\ntwo functions or purposes, commonly referred to as \"roles.\" These two roles\nare control and management. Each NSX installation has a single cluster.\nSeparate NSX clusters do not share data. In other words, a given data-plane\nnode is attached to only one cluster, not to multiple clusters.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read Cluster Configuration",
                "x-vmw-nsx-module": "ClusterManagement",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterConfig"
            }
        },
        "/logical-switches/{lswitch-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitch"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies attributes of an existing logical switch. Modifiable\nattributes include admin_state, replication_mode, switching_profile_ids\nand VLAN spec. You cannot modify the original transport_zone_id.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lswitch-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitch"
                        },
                        "required": true,
                        "name": "LogicalSwitch",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Update a Logical Switch",
                "x-vmw-nsx-module": "LogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLogicalSwitch"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Removes a logical switch from the associated overlay or VLAN transport\nzone. By default, a logical switch cannot be deleted if there are logical\nports on the switch, or it is added to a NSGroup.\nCascade option can be used to delete all ports and the logical switch.\nDetach option can be used to delete the logical switch forcibly.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lswitch-id",
                        "in": "path"
                    },
                    {
                        "description": "Delete a Logical Switch and all the logical ports in it,\nif none of the logical ports have any attachment.\n",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "cascade"
                    },
                    {
                        "description": "Force delete a logical switch",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "detach"
                    }
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Delete a Logical Switch",
                "x-vmw-nsx-module": "LogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLogicalSwitch"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitch"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified logical switch Id.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "lswitch-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "Get Logical Switch associated with the provided id (lswitch-id)",
                "x-vmw-nsx-module": "LogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalSwitch"
            }
        },
        "/firewall/excludelist?action=check_if_exists": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceReference"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Check if the object a member of the exclude list",
                "parameters": [
                    {
                        "in": "query",
                        "description": "identifier of the object",
                        "required": true,
                        "maxLength": 64,
                        "type": "string",
                        "name": "object_id"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Check if the object a member of the exclude list",
                "x-vmw-nsx-module": "ExcludeList",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CheckMemberIfExistsCheck_if_exists"
            }
        },
        "/upgrade/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeSummary"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get upgrade summary",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get upgrade summary",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeSummary"
            }
        },
        "/app-discovery/sessions/{session-id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Cancel and delete the application discovery session\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Cancel and delete the application discovery session",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteAppDiscoverySession"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppDiscoverySession"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the status of the application discovery session and other details\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Returns the status of the application discovery session and other details",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppDiscoverySession"
            }
        },
        "/node/services/syslog?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the syslog service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the syslog service",
                "x-vmw-nsx-module": "NodeSyslogService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSyslogServiceActionStart"
            }
        },
        "/ns-groups/{ns-group-id}/member-types": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EffectiveMemberTypeListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns member types for a specified NSGroup including child NSGroups.\nThis considers static members and members added via membership criteria only\n",
                "parameters": [
                    {
                        "description": "NSGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-group-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Get member types from NSGroup",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMemberTypes"
            }
        },
        "/node/services/syslog": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read syslog service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read syslog service properties",
                "x-vmw-nsx-module": "NodeSyslogService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadSyslogService"
            }
        },
        "/pools/ip-pools/{pool-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpPool"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified IP address pool. Modifiable parameters include the\ndescription, display_name, and all subnet information.\n",
                "parameters": [
                    {
                        "description": "IP pool ID",
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/IpPool"
                        },
                        "required": true,
                        "name": "IpPool",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Update an IP Pool",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateIpPool"
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AllocationIpAddress"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Allocates or releases an IP address from the specified IP pool. To allocate\nan address, include ?action=ALLOCATE in the request and \"allocation_id\":null\nin the request body. When the request is successful, the response is\n\"allocation_id\": \"<ip-address>\", where <ip-address> is an IP address from\nthe specified pool. To release an IP address (return it back to the pool),\ninclude ?action=RELEASE in the request and \"allocation_id\":<ip-address> in\nthe request body, where <ip-address> is the address to be released. When the\nrequest is successful, the response is NULL. Tags, display_name and description\nattributes are not supported for AllocationIpAddress in this release.\n",
                "parameters": [
                    {
                        "description": "IP pool ID",
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/AllocationIpAddress"
                        },
                        "required": true,
                        "name": "AllocationIpAddress",
                        "in": "body"
                    },
                    {
                        "enum": [
                            "ALLOCATE",
                            "RELEASE"
                        ],
                        "description": "Specifies allocate or release action",
                        "required": true,
                        "in": "query",
                        "type": "string",
                        "name": "action"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Allocate or Release an IP Address from a Pool",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AllocateOrReleaseFromIpPool"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpPool"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified IP address pool.",
                "parameters": [
                    {
                        "description": "IP pool ID",
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Read IP Pool",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadIpPool"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified IP address pool. By default, if the IpPool is used in other configurations (such as transport node template), it won't be deleted. In such situations, pass \"force=true\" as query param to force delete the IpPool",
                "parameters": [
                    {
                        "description": "IP pool ID",
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Delete an IP Pool",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteIpPool"
            }
        },
        "/cluster/backups/config": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BackupConfiguration"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Configure file server and timers for automated backup.\nIf secret fields are omitted (password, passphrase)\nthen use the previously set value.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/BackupConfiguration"
                        },
                        "required": true,
                        "name": "BackupConfiguration",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Configure backup",
                "x-vmw-nsx-module": "BackupConfiguration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ConfigureBackupConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BackupConfiguration"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a configuration of a file server and timers for automated backup.\nFields that contain secrets (password, passphrase) are not returned.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Get backup configuration",
                "x-vmw-nsx-module": "BackupConfiguration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetBackupConfig"
            }
        },
        "/traceflows/{traceflow-id}/observations": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TraceflowObservationListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get observations for the Traceflow round",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "traceflow-id",
                        "in": "path"
                    },
                    {
                        "description": "Observations having the given component name will be listed.",
                        "required": false,
                        "type": "string",
                        "name": "component_name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PHYSICAL",
                            "LR",
                            "LS",
                            "DFW",
                            "BRIDGE",
                            "EDGE_TUNNEL",
                            "EDGE_HOSTSWITCH",
                            "UNKNOWN"
                        ],
                        "description": "Observations having the given component type will be listed.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "component_type"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "enum": [
                            "TraceflowObservationForwarded",
                            "TraceflowObservationDropped",
                            "TraceflowObservationDelivered",
                            "TraceflowObservationReceived",
                            "TraceflowObservationForwardedLogical",
                            "TraceflowObservationDroppedLogical",
                            "TraceflowObservationReceivedLogical"
                        ],
                        "description": "The type of observations that will be listed.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "resource_type"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Observations having the given transport node name will be listed.",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_name",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get observations for the Traceflow round",
                "x-vmw-nsx-module": "Traceflow",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTraceflowObservations"
            }
        },
        "/trust-management/crls/{crl-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Crl"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates an existing CRL.",
                "parameters": [
                    {
                        "description": "ID of CRL to update",
                        "required": true,
                        "type": "string",
                        "name": "crl-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/Crl"
                        },
                        "required": true,
                        "name": "Crl",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update CRL for the Given CRL ID",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateCrl"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Crl"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified CRL. For additional information,\ninclude the ?details=true modifier at the end of the request URI.\n",
                "parameters": [
                    {
                        "description": "ID of CRL to read",
                        "required": true,
                        "type": "string",
                        "name": "crl-id",
                        "in": "path"
                    },
                    {
                        "description": "whether to expand the pem data and show all its details",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "details"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Show CRL Data for the Given CRL ID",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetCrl"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes an existing CRL.",
                "parameters": [
                    {
                        "description": "ID of CRL to delete",
                        "required": true,
                        "type": "string",
                        "name": "crl-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Delete a CRL",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteCrl"
            }
        },
        "/trust-management/csrs/{csr-id}?action=self_sign": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Self-signs the previously generated CSR. This action is similar to the\nimport certificate action, but instead of using a public certificate signed\nby a CA, the self_sign POST action uses a certificate that is signed with\nNSX's own private key.\n",
                "parameters": [
                    {
                        "description": "CSR this certificate is associated with",
                        "required": true,
                        "type": "string",
                        "name": "csr-id",
                        "in": "path"
                    },
                    {
                        "description": "Number of days the certificate will be valid, default 10 years",
                        "format": "int64",
                        "default": 3650,
                        "required": true,
                        "maximum": 10000,
                        "minimum": 1,
                        "in": "query",
                        "type": "integer",
                        "name": "days_valid"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Self-Sign the CSR",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "SelfSignCertificateSelf_sign"
            }
        },
        "/aaa/registration-token": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RegistrationToken"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "The privileges of the registration token will be the same as the caller.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Create registration access token",
                "x-vmw-nsx-module": "RegistrationTokenEndPoint",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateRegistrationToken"
            }
        },
        "/node/users/{userid}/ssh-keys?action=remove_ssh_key": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Remove SSH public key from authorized_keys file for node user",
                "parameters": [
                    {
                        "description": "User id of the user",
                        "required": true,
                        "type": "string",
                        "name": "userid",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/SshKeyBaseProperties"
                        },
                        "required": true,
                        "name": "SshKeyBaseProperties",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Remove SSH public key from authorized_keys file for node user",
                "x-vmw-nsx-module": "NodeUsers",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteNodeUserSshKeyRemove_ssh_key"
            }
        },
        "/fabric/nodes": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Node"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a host node (hypervisor) or edge node (router) in the transport\nnetwork.\n\nWhen you run this command for a host, NSX Manager attempts to install the\nNSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the\ninstallation to succeed, you must provide the host login credentials and the\nhost thumbprint.\n\nTo get the ESXi host thumbprint, SSH to the host and run the\n<b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b>\ncommand.\n\nTo generate host key thumbprint using SHA-256 algorithm please follow the\nsteps below.\n\nLog into the host, making sure that the connection is not vulnerable to a\nman in the middle attack. Check whether a public key already exists.\nHost public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'.\nIf the key is not present then generate a new key by running the following\ncommand and follow the instructions.\n\n<b>ssh-keygen -t rsa</b>\n\nNow generate a SHA256 hash of the key using the following command. Please\nmake sure to pass the appropriate file name if the public key is stored with\na different file name other than the default 'id_rsa.pub'.\n\n<b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b>\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/Node"
                        },
                        "required": true,
                        "name": "Node",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Register and Install NSX Components on a Node",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddNode"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all fabric nodes (hosts and edges).",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Id of the discovered node which was converted to create this node",
                        "required": false,
                        "type": "string",
                        "name": "discovered_node_id",
                        "in": "query"
                    },
                    {
                        "description": "HostNode display name",
                        "required": false,
                        "type": "string",
                        "name": "display_name",
                        "in": "query"
                    },
                    {
                        "description": "HostNode external id",
                        "required": false,
                        "type": "string",
                        "name": "external_id",
                        "in": "query"
                    },
                    {
                        "description": "Hardware Id of the host",
                        "required": false,
                        "type": "string",
                        "name": "hardware_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ESXI",
                            "RHELKVM",
                            "UBUNTUKVM",
                            "HYPERV",
                            "RHELCONTAINER",
                            "RHELSERVER",
                            "UBUNTUSERVER",
                            "CENTOSSERVER",
                            "CENTOSKVM"
                        ],
                        "description": "HostNode's Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "hypervisor_os_type"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Management IP address of the node",
                        "required": false,
                        "type": "string",
                        "name": "ip_address",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "enum": [
                            "HostNode",
                            "EdgeNode",
                            "PublicCloudGatewayNode"
                        ],
                        "description": "Node type from 'HostNode', 'EdgeNode', 'PublicCloudGatewayNode'",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "resource_type"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return the List of Nodes",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNodes"
            }
        },
        "/node/network/interfaces/{interface-id}/stats": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInterfaceStatisticsProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "On the specified interface, returns the number of received (rx), transmitted\n(tx), and dropped packets; the number of bytes and errors received and\ntransmitted on the interface; and the number of detected collisions.\n",
                "parameters": [
                    {
                        "description": "ID of interface to read",
                        "required": true,
                        "type": "string",
                        "name": "interface-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read the NSX Manager's Network Interface Statistics",
                "x-vmw-nsx-module": "NetworkInterfaceModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNetworkInterfaceStatistics"
            }
        },
        "/fabric/nodes/{node-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns connectivity, heartbeat, and version information about a fabric node\n(host or edge). Note that the LCP connectivity status remains down until\nafter the fabric node has been added as a transpot node and the NSX host\nswitch has been successfully installed. See POST /api/v1/transport-nodes.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return Runtime Status Information for a Node",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeStatus"
            }
        },
        "/loadbalancer/client-ssl-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbClientSslProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a load balancer client-ssl profile.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbClientSslProfile"
                        },
                        "required": true,
                        "name": "LbClientSslProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer client-ssl profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerClientSslProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbClientSslProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a paginated list of load balancer client-ssl profiles.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a paginated list of load balancer client-ssl profiles",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerClientSslProfiles"
            }
        },
        "/node/services/ssh?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the ssh service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the ssh service",
                "x-vmw-nsx-module": "NodeSSHService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSSHServiceActionStop"
            }
        },
        "/transport-zones/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HeatMapTransportNodesAggregateStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get high-level summary of a transport zone. The service layer does not support source = realtime or cached.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get high-level summary of a transport zone. The service layer does not support source = realtime or cached.",
                "x-vmw-nsx-module": "Heatmap",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAllTransportZoneStatus"
            }
        },
        "/fabric/compute-collection-fabric-templates/{fabric-template-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionFabricTemplate"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates compute collection fabric template for the given id",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "fabric-template-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionFabricTemplate"
                        },
                        "required": true,
                        "name": "ComputeCollectionFabricTemplate",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Updates compute collection fabric template",
                "x-vmw-nsx-module": "ComputeCollectionHostPrepFabricService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateComputeCollectionFabricTemplate"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionFabricTemplate"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get compute collection fabric template for the given id",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "fabric-template-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Get compute collection fabric template by id",
                "x-vmw-nsx-module": "ComputeCollectionHostPrepFabricService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetComputeCollectionFabricTemplate"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes compute collection fabric template for the given id",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "fabric-template-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Deletes compute collection fabric template",
                "x-vmw-nsx-module": "ComputeCollectionHostPrepFabricService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteComputeCollectionFabricTemplate"
            }
        },
        "/node/services/syslog/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read syslog service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read syslog service status",
                "x-vmw-nsx-module": "NodeSyslogService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadSyslogServiceStatus"
            }
        },
        "/aaa/role-bindings?action=delete_stale_bindings": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete all stale role assignments",
                "tags": [
                    "Aaa"
                ],
                "summary": "Delete all stale role assignments",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteAllStaleRoleBindingsDelete_stale_bindings"
            }
        },
        "/trust-management/principal-identities?action=update_certificate": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PrincipalIdentity"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a principal identity's certificate\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/UpdatePrincipalIdentityCertificateRequest"
                        },
                        "required": true,
                        "name": "UpdatePrincipalIdentityCertificateRequest",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update a Principal Identity's certificate",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdatePrincipalIdentityCertificateUpdate_certificate"
            }
        },
        "/trust-management/certificates?action=import": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/CertificateList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new private-public certificate or a chain of certificates (CAs) and,\noptionally, a private key that can be applied to one of the user-facing\ncomponents (appliance management or edge). The certificate and the key\nshould be stored in PEM format. If no private key is provided, the\ncertificate is used as a client certificate in the trust store.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/TrustObjectData"
                        },
                        "required": true,
                        "name": "TrustObjectData",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Add a New Certificate",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddCertificateImport"
            }
        },
        "/firewall/stats?action=reset": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Sets firewall rule statistics counter to zero. This operation is supported\nfor given category, for example: L3DFW i.e. for all layer3 firewall\n(transport nodes only) rules or L3EDGE i.e. for all layer3 edge firewall\n(edge nodes only) rules or L3BRIDGEPORT i.e. for all layer3 bridge port firewall\n(bridge ports only) rules.\n",
                "parameters": [
                    {
                        "enum": [
                            "L3DFW",
                            "L3EDGE",
                            "L3BRIDGEPORT"
                        ],
                        "description": "Aggregation Statistic Category",
                        "required": true,
                        "in": "query",
                        "type": "string",
                        "name": "category"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Reset firewall rule statistics",
                "x-vmw-nsx-module": "FirewallStatsRule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ResetFirewallRuleStatsReset"
            }
        },
        "/error-resolver?action=resolve_error": {
            "post": {
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Invokes the corresponding error resolver for the\ngiven error(s) present in the payload\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ErrorResolverMetadataList"
                        },
                        "required": true,
                        "name": "ErrorResolverMetadataList",
                        "in": "body"
                    }
                ],
                "tags": [
                    "Error Resolver"
                ],
                "summary": "Resolves the error",
                "x-vmw-nsx-module": "ErrorResolver",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ResolveErrorResolve_error"
            }
        },
        "/node/services/syslog?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the syslog service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the syslog service",
                "x-vmw-nsx-module": "NodeSyslogService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSyslogServiceActionStop"
            }
        },
        "/serviceinsertion/services/{service-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceDefinition"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified Service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceDefinition"
                        },
                        "required": true,
                        "name": "ServiceDefinition",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update an existing Service",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateServiceInsertionService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceDefinition"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about Service-Insertion Service with the given identifier.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get an existing Service",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetServiceInsertionService"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Removes Service-Insertion Service from the system. A Service with\nService-Instances can only be deleted by passing \"cascade=true\" parameter.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "description": "Flag to cascade delete all the child objects, associated with it.",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "cascade"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete an existing Service and the Service-Instance associated with it.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteServiceInsertionService"
            }
        },
        "/ipfix-obs-points": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IpfixObsPointsListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deprecated - Please use /ipfix-profiles for switch IPFIX profile and\n/ipfix-collector-profiles for IPFIX collector profile.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get the list of IPFIX observation points",
                "x-vmw-nsx-module": "Ipfix",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetIpfixObsPoints"
            }
        },
        "/trust-management/principal-identities": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PrincipalIdentity"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Associates a principal's name with a certificate that is used to authenticate.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PrincipalIdentity"
                        },
                        "required": true,
                        "name": "PrincipalIdentity",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Register a name-certificate combination.",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "RegisterPrincipalIdentity"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PrincipalIdentityList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the list of principals registered with a certificate.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Return the list of principal identities",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetPrincipalIdentities"
            }
        },
        "/bridge-clusters/{bridgecluster-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeCluster"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies a existing bridge cluster. One of more transport nodes\ncan be added or removed from the bridge cluster using this API.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bridgecluster-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BridgeCluster"
                        },
                        "required": true,
                        "name": "BridgeCluster",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update a Bridge Cluster",
                "x-vmw-nsx-module": "BridgeCluster",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateBridgeCluster"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Removes the specified Bridge Cluster.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bridgecluster-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete a Bridge Cluster",
                "x-vmw-nsx-module": "BridgeCluster",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteBridgeCluster"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeCluster"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified bridge cluster.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bridgecluster-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get Information about a bridge cluster",
                "x-vmw-nsx-module": "BridgeCluster",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetBridgeCluster"
            }
        },
        "/app-discovery/sessions/{session-id}/app-profiles": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the application profiles that was part of the application discovery session |\nwhile it was started.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "application profiles in this application discovery session",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppDiscoverySessionAppProfiles"
            }
        },
        "/firewall/sections/{section-id}/rules?action=create_multiple": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallRuleList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create multiple firewall rules in existing firewall section bounded by\nlimit of 1000 firewall rules per section. Adding multiple firewall rules in\na section modifies parent section entity and simultaneous update (modify)\noperations on same section are not allowed to prevent overwriting stale\ncontents to firewall section. If a concurrent update is performed, HTTP\nresponse code 409 will be returned to the client operating on stale data.\nThat client should retrieve the firewall section again and re-apply its\nupdate.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/FirewallRuleList"
                        },
                        "required": true,
                        "name": "FirewallRuleList",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Add Multiple Rules in a Section",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddRulesInSectionCreate_multiple"
            }
        },
        "/compute-collection-transport-node-templates/{template-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionTransportNodeTemplate"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update configuration of compute collection transportnode template.\nCompute_collection_id isn't allowed to be changed since it represents\nthe association between ComputeCollection and this template. This is\ndetermined when ComputeCollectionTransportNodeTemplate got created.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "template-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionTransportNodeTemplate"
                        },
                        "required": true,
                        "name": "ComputeCollectionTransportNodeTemplate",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update compute collection transportnode template",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateComputeCollectionTransportNodeTemplate"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeCollectionTransportNodeTemplate"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns compute collection transportnode template by id",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "template-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get compute collection transportnode template by id",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetComputeCollectionTransportNodeTemplate"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete the specified compute collection transport node template.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "template-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete a compute collection transport node template",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteComputeCollectionTransportNodeTemplate"
            }
        },
        "/logical-routers/{logical-router-id}/routing/bgp": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BgpConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the BGP configuration on a specified TIER0 logical router.\nModifiable parameters include enabled, graceful_restart, as_number.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BgpConfig"
                        },
                        "required": true,
                        "name": "BgpConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update the BGP Configuration on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateBgpConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BgpConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the BGP configuration on a specified logical\nrouter. Information includes whether or not the BGP configuration is\nenabled, the AS number, and whether or not graceful\nrestart is enabled.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read the BGP Configuration on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadBgpConfig"
            }
        },
        "/node/services/manager?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the service",
                "x-vmw-nsx-module": "NodeProtonService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateProtonServiceActionStop"
            }
        },
        "/node/services/ui-service": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read ui service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read ui service properties",
                "x-vmw-nsx-module": "NodeUiServiceService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNsxUiServiceService"
            }
        },
        "/node/users": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeUserPropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the list of users configued to log in to the NSX Manager appliance.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List node users",
                "x-vmw-nsx-module": "NodeUsers",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNodeUsers"
            }
        },
        "/logical-switches/state": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalSwitchStateListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns a list of logical switches states that have realized state as provided\nas query parameter.\n",
                "parameters": [
                    {
                        "enum": [
                            "PENDING",
                            "IN_PROGRESS",
                            "PARTIAL_SUCCESS",
                            "SUCCESS"
                        ],
                        "description": "Realized state of logical switches",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "status"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Switching"
                ],
                "summary": "List logical switches by realized state",
                "x-vmw-nsx-module": "LogicalSwitch",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLogicalSwitchesByState"
            }
        },
        "/trust-management/crls": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CrlList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all CRLs. For additional information, include the\n?details=true modifier at the end of the request URI.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "whether to expand the pem data and show all its details",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "details"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "cluster_api_certificate"
                        ],
                        "description": "Type of certificate to return",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "type"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Return All Added CRLs",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetCrls"
            }
        },
        "/transport-zones/{zone-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HeatMapTransportZoneStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get high-level summary of a transport zone",
                "parameters": [
                    {
                        "description": "ID of transport zone",
                        "required": true,
                        "type": "string",
                        "name": "zone-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get high-level summary of a transport zone",
                "x-vmw-nsx-module": "Heatmap",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetHeatmapTransportZoneStatus"
            }
        },
        "/dhcp/servers/{server-id}/leases": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DhcpLeases"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get lease info of a given dhcp server id. If a \"pool_id\" is specified,\nthe lease info of the pool are returned. If an \"address\" is specified,\nonly the lease info the this address is returned. The \"address\" can be\na single IP, an ip-range, or a mac address. \"pool_id\" and \"address\" are\nmutually excluded. Either a \"pool_id\" or an \"address\" can be provided,\nbut not both.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "server-id",
                        "in": "path"
                    },
                    {
                        "description": "can be an ip address, or an ip range, or a mac address",
                        "required": false,
                        "type": "string",
                        "name": "address",
                        "in": "query"
                    },
                    {
                        "description": "The uuid of dhcp ip pool",
                        "required": false,
                        "type": "string",
                        "name": "pool_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get lease info of a given dhcp server id",
                "x-vmw-nsx-module": "AggSvcDhcp",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetDhcpLeaseInfo"
            }
        },
        "/bridge-endpoint-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpointProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a Bridge Endpoint Profile. Profile contains edge cluster id,\nindexes of the member nodes, fialover mode and high availability mode\nfor a Bridge EndPoint\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpointProfile"
                        },
                        "required": true,
                        "name": "BridgeEndpointProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create a Bridge Endpoint Profile",
                "x-vmw-nsx-module": "BridgeEndpointProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateBridgeEndpointProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpointProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all configured bridge endoint profiles\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Edge Cluster Identifier",
                        "required": false,
                        "type": "string",
                        "name": "edge_cluster_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "name": "failover_mode",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List All Bridge Endpoint Profiles",
                "x-vmw-nsx-module": "BridgeEndpointProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListBridgeEndpointProfiles"
            }
        },
        "/cluster/{target-node-id}/{target-uri}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Invoke PUT request on target cluster node",
                "parameters": [
                    {
                        "description": "Target node UUID or keyword self",
                        "required": true,
                        "type": "string",
                        "name": "target-node-id",
                        "in": "path"
                    },
                    {
                        "description": "URI of API to invoke on target node",
                        "required": true,
                        "type": "string",
                        "name": "target-uri",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Invoke PUT request on target cluster node",
                "x-vmw-nsx-module": "CentralApiModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "InvokePutClusterCentralAPI"
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Invoke POST request on target cluster node",
                "parameters": [
                    {
                        "description": "Target node UUID or keyword self",
                        "required": true,
                        "type": "string",
                        "name": "target-node-id",
                        "in": "path"
                    },
                    {
                        "description": "URI of API to invoke on target node",
                        "required": true,
                        "type": "string",
                        "name": "target-uri",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Invoke POST request on target cluster node",
                "x-vmw-nsx-module": "CentralApiModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "InvokePostClusterCentralAPI"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Invoke DELETE request on target cluster node",
                "parameters": [
                    {
                        "description": "Target node UUID or keyword self",
                        "required": true,
                        "type": "string",
                        "name": "target-node-id",
                        "in": "path"
                    },
                    {
                        "description": "URI of API to invoke on target node",
                        "required": true,
                        "type": "string",
                        "name": "target-uri",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Invoke DELETE request on target cluster node",
                "x-vmw-nsx-module": "CentralApiModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "InvokeDeleteClusterCentralAPI"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "504": {
                        "description": "Gateway Timeout"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Invoke GET request on target cluster node",
                "parameters": [
                    {
                        "description": "Target node UUID or keyword self",
                        "required": true,
                        "type": "string",
                        "name": "target-node-id",
                        "in": "path"
                    },
                    {
                        "description": "URI of API to invoke on target node",
                        "required": true,
                        "type": "string",
                        "name": "target-uri",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Invoke GET request on target cluster node",
                "x-vmw-nsx-module": "CentralApiModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "InvokeGetClusterCentralAPI"
            }
        },
        "/fabric/compute-managers/{compute-manager-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeManager"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Updates a specified compute manager\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "compute-manager-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ComputeManager"
                        },
                        "required": true,
                        "name": "ComputeManager",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Update compute manager",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateComputeManager"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Unregisters a specified compute manager\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "compute-manager-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Unregister a compute manager",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteComputeManager"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComputeManager"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specific compute manager",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "compute-manager-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return compute manager Information",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadComputeManager"
            }
        },
        "/node/aaa/providers/vidm": {
            "put": {
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/NodeAuthProviderVidmProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update AAA provider vIDM properties",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeAuthProviderVidmProperties"
                        },
                        "required": true,
                        "name": "NodeAuthProviderVidmProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update AAA provider vIDM properties",
                "x-vmw-nsx-module": "NodeAuthProviderVidm",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateAuthProviderVidm"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeAuthProviderVidmProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read AAA provider vIDM properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read AAA provider vIDM properties",
                "x-vmw-nsx-module": "NodeAuthProviderVidm",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadAuthProviderVidm"
            }
        },
        "/ns-groups/unassociated-virtual-machines": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UnassociatedVMListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the list of all the virtual machines that are not a part of any existing NSGroup.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Display Name of the virtual machine",
                        "required": false,
                        "type": "string",
                        "name": "display_name",
                        "in": "query"
                    },
                    {
                        "description": "External id of the virtual machine",
                        "required": false,
                        "type": "string",
                        "name": "external_id",
                        "in": "query"
                    },
                    {
                        "description": "Id of the host where this vif is located",
                        "required": false,
                        "type": "string",
                        "name": "host_id",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Get the list of all the virtual machines that are not a part of any existing NSGroup.",
                "x-vmw-nsx-module": "GroupingObjectsProviders",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUnassociatedVirtualMachines"
            }
        },
        "/fabric/nodes/{node-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Node"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies attributes of a fabric node (host or edge).\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/Node"
                        },
                        "required": true,
                        "name": "Node",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Update a Node",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNode"
            },
            "post": {
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/Node"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "The supported fabric node actions are enter_maintenance_mode,\nexit_maintenance_mode for EdgeNode.\nThis API is deprecated, please call TransportNode maintenance mode API to\nupdate maintenance mode, refer to \"Update transport node maintenance mode\".\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "description": "Supported fabric node actions",
                        "enum": [
                            "enter_maintenance_mode",
                            "exit_maintenance_mode"
                        ],
                        "type": "string",
                        "name": "action",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Perform an Action on Fabric Node",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "PerformNodeAction"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Node"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specific fabric node (host or edge).",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return Node Information",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNode"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Removes a specified fabric node (host or edge).\nA fabric node may only be deleted when it is no longer referenced\nby a Transport Node. If unprepare_host option is set to false, the\nhost will be deleted without uninstalling the NSX components from\nthe host.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "node-id",
                        "in": "path"
                    },
                    {
                        "description": "Delete a host and uninstall NSX components",
                        "default": true,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "unprepare_host"
                    }
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Delete a Node",
                "x-vmw-nsx-module": "FabricNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteNode"
            }
        },
        "/logical-routers/{logical-router-id}/routing": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RoutingConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the routing configuration for a specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/RoutingConfig"
                        },
                        "required": true,
                        "name": "RoutingConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update the Routing Configuration",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateRoutingConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RoutingConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the routing configuration for a specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read the Routing Configuration",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadRoutingConfig"
            }
        },
        "/loadbalancer/monitors": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbMonitor"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a load balancer monitor.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbMonitor"
                        },
                        "required": true,
                        "name": "LbMonitor",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer monitor",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerMonitor"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbMonitorListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a paginated list of load balancer monitors.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "LbHttpMonitor",
                            "LbHttpsMonitor",
                            "LbIcmpMonitor",
                            "LbTcpMonitor",
                            "LbUdpMonitor",
                            "LbPassiveMonitor",
                            "LbActiveMonitor"
                        ],
                        "description": "monitor query type",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "type"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a paginated list of load balancer monitors",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerMonitors"
            }
        },
        "/vpn/ipsec/ike-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNIKEProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create custom internet key exchange (IKE) Profile. IKE Profile is a reusable profile that captures IKE and phase one negotiation parameters. System will be pre provisioned with system owned non editable default IKE profile and suggested set of profiles that can be used for peering with popular remote peers like AWS VPN. User can create custom profiles as needed. Any change in profile affects all sessions consuming this profile.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNIKEProfile"
                        },
                        "required": true,
                        "name": "IPSecVPNIKEProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Create custom internet key exchange (IKE) Profile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIPSecVPNIKEProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNIKEProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get paginated list of all IKE Profiles.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "List IKE profiles",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIPSecVPNIKEProfiles"
            }
        },
        "/mac-sets": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/MACSet"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new MACSet that can group individual MAC addresses.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/MACSet"
                        },
                        "required": true,
                        "name": "MACSet",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Create MACSet",
                "x-vmw-nsx-module": "MACSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateMACSet"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MACSetListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns paginated list of MACSets\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "List MACSets",
                "x-vmw-nsx-module": "MACSet",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListMACSets"
            }
        },
        "/node/services": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServicePropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns a list of all services available on the NSX Manager applicance.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List node services",
                "x-vmw-nsx-module": "NodeServices",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNodeServices"
            }
        },
        "/cluster/nodes/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ClustersAggregateInfo"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read Cluster Status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read Cluster Status",
                "x-vmw-nsx-module": "ClusterManagement",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadClusterNodesAggregateStatus"
            }
        },
        "/pools/vtep-label-pools/{pool-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VtepLabelPool"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified virtual tunnel endpoint label pool.\n",
                "parameters": [
                    {
                        "description": "Virtual tunnel endpoint label pool ID",
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "Read a virtual tunnel endpoint label pool",
                "x-vmw-nsx-module": "VtepLabel",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadVtepLabelPool"
            }
        },
        "/pktcap/session/{session-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PacketCaptureSession"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the packet capture status information by session id.\n",
                "parameters": [
                    {
                        "description": "Packet capture session id",
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get the status of packet capture session",
                "x-vmw-nsx-module": "PacketCapture",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadPacketCaptureSession"
            }
        },
        "/logical-routers/{logical-router-id}/routing/advertisement": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AdvertisementConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the route advertisement configuration on the specified logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/AdvertisementConfig"
                        },
                        "required": true,
                        "name": "AdvertisementConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update the Advertisement Configuration on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateAdvertisementConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AdvertisementConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the routes to be advertised by the specified\nTIER1 logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read the Advertisement Configuration on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadAdvertisementConfig"
            }
        },
        "/services/{service-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified logical router service. The resource_type parameter\nis required. The modifiable parameters depend on the service type.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalService"
                        },
                        "required": true,
                        "name": "LogicalService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a Logical Router Service",
                "x-vmw-nsx-module": "LogicalService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified service.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read a Logical Router Service",
                "x-vmw-nsx-module": "LogicalService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadService"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified logical router service.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a Logical Router Service",
                "x-vmw-nsx-module": "LogicalService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteService"
            }
        },
        "/migration/feedback-requests": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationFeedbackRequestListResult"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "NSX-V feedback details",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "NSX-V feedback details",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetFeedbackRequests"
            }
        },
        "/upgrade/nodes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInfoListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get list of nodes across all types",
                "parameters": [
                    {
                        "description": "Component type based on which nodes will be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Component version based on which nodes will be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_version",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get list of nodes across all types",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNodes"
            }
        },
        "/node/services/snmp?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the SNMP service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the SNMP service",
                "x-vmw-nsx-module": "NodeSNMPService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSNMPServiceActionStop"
            }
        },
        "/node/file-store": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FilePropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List node files",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List node files",
                "x-vmw-nsx-module": "FileStoreModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListFiles"
            }
        },
        "/node/services/cluster_manager?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the cluster boot manager service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the cluster boot manager service",
                "x-vmw-nsx-module": "NodeClusterBootManagerService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateClusterBootManagerServiceActionRestart"
            }
        },
        "/node/network/interfaces": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeNetworkInterfacePropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the number of interfaces on the NSX Manager appliance and detailed\ninformation about each interface. Interface information includes MTU,\nbroadcast and host IP addresses, link and admin status, MAC address, network\nmask, and the IP configuration method (static or DHCP).\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List the NSX Manager's Network Interfaces",
                "x-vmw-nsx-module": "NetworkInterfaceModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNodeInterfaces"
            }
        },
        "/node/aaa/providers/vidm/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeAuthProviderVidmStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read AAA provider vIDM status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read AAA provider vIDM status",
                "x-vmw-nsx-module": "NodeAuthProviderVidm",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadAuthProviderVidmStatus"
            }
        },
        "/firewall/sections/{section-id}?action=list_with_rules": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallSectionRuleList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns firewall section information with rules for a section identifier.\nWhen invoked on a section with a large number of rules, this API is supported\nonly at low rates of invocation (not more than 4-5 times per minute). The\ntypical latency of this API with about 1024 rules is about 4-5 seconds. This\nAPI should not be invoked with large payloads at automation speeds. More than\n50 rules with a large number rule references is not supported.\n\nInstead, to read firewall rules, use:\nGET /api/v1/firewall/sections/&lt;section-id&gt;/rules with the appropriate\npage_size.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get an Existing Section, Including Rules",
                "x-vmw-nsx-module": "Firewall",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetSectionWithRulesList_with_rules"
            }
        },
        "/serviceinsertion/services": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ServiceDefinition"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates new Service-Insertion Service in the system.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceDefinition"
                        },
                        "required": true,
                        "name": "ServiceDefinition",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a Service-Insertion Service",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddServiceInsertionService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionServiceListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List all Service-Insertion Service Definitions.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "List all Service-Insertion Services.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListServiceInsertionServices"
            }
        },
        "/node/services/http?action=apply_certificate": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Applies a security certificate to the http service. In the POST request,\nthe CERTIFICATE_ID references a certificate created with the\n/api/v1/trust-management APIs. Issuing this request causes the http service\nto restart so that the service can begin using the new certificate. When the\nPOST request succeeds, it doesn't return a valid response. The request times\nout because of the restart.\n",
                "parameters": [
                    {
                        "description": "Certificate ID",
                        "required": true,
                        "type": "string",
                        "name": "certificate_id",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update http service certificate",
                "x-vmw-nsx-module": "NodeProxyService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateProxyServiceApplyCertificateActionApply_certificate"
            }
        },
        "/serviceinsertion/services/{service-id}/service-instances/{service-instance-id}/instance-runtimes/{instance-runtime-id}/interfaces/{interface_index}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RuntimeInterfaceOperationalStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns operational status of a specified interface",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-instance-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "instance-runtime-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "interface_index",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get operational status for an interface",
                "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRuntimeInterfaceOperationalStatus"
            }
        },
        "/migration/status-summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get migration status summary",
                "parameters": [
                    {
                        "description": "Component type based on which migration units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get migration status summary",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationStatusSummary"
            }
        },
        "/node/services/search?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX Search service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX Search service",
                "x-vmw-nsx-module": "NodeSearchService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSearchServiceActionStop"
            }
        },
        "/logical-routers/{logical-router-id}/routing/bgp/neighbors/{id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BgpNeighbor"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a specific BGP Neighbor on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BgpNeighbor"
                        },
                        "required": true,
                        "name": "BgpNeighbor",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a specific BGP Neighbor on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateBgpNeighbor"
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BgpNeighbor"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Unset/Delete the password property on the specific BGP Neighbor.\nNo other property of the BgpNeighbor can be updated using this API\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "clear_password"
                        ],
                        "type": "string",
                        "name": "action",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Unset/Delete password property on specific BGP Neighbor on Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UnSetPasswordOnBgpNeighbor"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BgpNeighbor"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read a specific BGP Neighbor on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read a specific BGP Neighbor on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadBgpNeighbor"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a specific BGP Neighbor on a Logical Router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a specific BGP Neighbor on a Logical Router",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteBgpNeighbor"
            }
        },
        "/loadbalancer/services": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbService"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a load balancer service.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbService"
                        },
                        "required": true,
                        "name": "LbService",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer service",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbServiceListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a paginated list of load balancer services.\nWhen logical_router_id is specified in request parameters, the\nassociated load balancer services which are related to the given\nlogical router returned.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Logical router identifier",
                        "type": "string",
                        "name": "logical_router_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a paginated list of load balancer services",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerServices"
            }
        },
        "/node/users/{userid}/ssh-keys": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SshKeyPropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Returns a list of all SSH keys from authorized_keys file for node user\n",
                "parameters": [
                    {
                        "description": "User id of the user",
                        "required": true,
                        "type": "string",
                        "name": "userid",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List SSH keys from authorized_keys file for node user",
                "x-vmw-nsx-module": "NodeUsers",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNodeUserSshKeys"
            }
        },
        "/serviceinsertion/sections/{section-id}/rules?action=create_multiple": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionRuleList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create multiple serviceinsertion rules in existing serviceinsertion section bounded by\nlimit of 1000 serviceinsertion rules per section.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "section-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionRuleList"
                        },
                        "required": true,
                        "name": "ServiceInsertionRuleList",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Add Multiple Rules in a Section",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddServiceInsertionRulesInSectionCreate_multiple"
            }
        },
        "/app-discovery/sessions/{session-id}/ns-groups/{ns-group-id}/members": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppDiscoveryVmInfoListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the vms in the ns-group of the application discovery session\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "ns-group-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "vms in the ns-group of the application discovery session",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppDiscoverySessionNsGroupMembers"
            }
        },
        "/node/services/search?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX Search service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX Search service",
                "x-vmw-nsx-module": "NodeSearchService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSearchServiceActionStart"
            }
        },
        "/ns-groups/{ns-group-id}/effective-logical-port-members": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EffectiveMemberResourceListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns effective logical port members of the specified NSGroup.\n",
                "parameters": [
                    {
                        "description": "NSGroup Id",
                        "required": true,
                        "type": "string",
                        "name": "ns-group-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Get Effective Logical Ports translated from the NSgroup",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetEffectiveLogicalPortMembers"
            }
        },
        "/node/services/search?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX Search service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX Search service",
                "x-vmw-nsx-module": "NodeSearchService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateSearchServiceActionRestart"
            }
        },
        "/trust-management/certificates": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CertificateList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns all certificate information viewable by the user, including each\ncertificate's UUID; resource_type (for example, certificate_self_signed,\ncertificate_ca, or certificate_signed); pem_encoded data; and history of the\ncertificate (who created or modified it and when). For additional\ninformation, include the ?details=true modifier at the end of the request\nURI.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "whether to expand the pem data and show all its details",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "details"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "cluster_api_certificate"
                        ],
                        "description": "Type of certificate to return",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "type"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Return All the User-Facing Components' Certificates",
                "x-vmw-nsx-module": "CertificateManager",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetCertificates"
            }
        },
        "/pktcap/sessions?action=delete": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PacketCaptureSessionList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete all the packet capture sessions.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Delete all the packet capture sessions",
                "x-vmw-nsx-module": "PacketCapture",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteAllCaptureSessionsDelete"
            }
        },
        "/aaa/roles": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RoleListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get information about all roles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Get information about all roles",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAllRolesInfo"
            }
        },
        "/transport-zones/{zone-id}/transport-node-status-report": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "You must provide the request header \"Accept:application/octet-stream\" when calling this API.",
                "parameters": [
                    {
                        "description": "ID of transport zone",
                        "required": true,
                        "type": "string",
                        "name": "zone-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "Transport node",
                        "enum": [
                            "UP",
                            "DOWN",
                            "DEGRADED"
                        ],
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Creates a status report of transport nodes in a transport zone",
                "x-vmw-nsx-module": "Heatmap",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTransportNodeReportForATransportZone"
            }
        },
        "/pktcap/session": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PacketCaptureSession"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create an new packet capture session on given node with specified options\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/PacketCaptureRequest"
                        },
                        "required": true,
                        "name": "PacketCaptureRequest",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Create an new packet capture session",
                "x-vmw-nsx-module": "PacketCapture",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreatePacketCaptureSession"
            }
        },
        "/upgrade?action=upgrade_uc": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Upgrade the upgrade coordinator.",
                "tags": [
                    "Upgrade"
                ],
                "summary": "Upgrade the upgrade coordinator.",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "TriggerUcUpgradeUpgrade_uc"
            }
        },
        "/vpn/l2vpn/sessions/{session-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/L2VPNSessionStatistics"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get statistics of a L2VPN session. Query parameter source=realtime is the only supported source.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "session-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get L2VPN session statistics",
                "x-vmw-nsx-module": "L2VPNStatistics",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetL2VPNSessionStatistics"
            }
        },
        "/logical-routers/{logical-router-id}/routing/bfd-config": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BfdConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the BFD configuration for routing BFD peers. Note - the configuration |\n  changes apply only to those routing BFD peers for which the BFD configuration has |\n  not been overridden at Peer level.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BfdConfig"
                        },
                        "required": true,
                        "name": "BfdConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update the BFD Configuration for BFD peers for routing",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateRoutingBfdConfig"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BfdConfig"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the BFD configuration for all routing BFD peers. This will be inherited |\n  by all BFD peers for LogicalRouter unless overriden while configuring the Peer.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read the Routing BFD Configuration",
                "x-vmw-nsx-module": "Routing",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadRoutingBfdConfig"
            }
        },
        "/migration/migration-unit-groups/{group-id}?action=add_migration_units": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Add migration units to specified migration unit group",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "group-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitList"
                        },
                        "required": true,
                        "name": "MigrationUnitList",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Add migration units to specified migration unit group",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddMigrationUnitsToGroupAdd_migration_units"
            }
        },
        "/loadbalancer/services/{service-id}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbServiceStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the status of the given load balancer service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the status of the given load balancer service",
                "x-vmw-nsx-module": "AggSvcLb",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLoadBalancerServiceStatus"
            }
        },
        "/firewall/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FirewallStatusListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List all firewall status for supported contexts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "List all firewall status for supported contexts",
                "x-vmw-nsx-module": "FirewallStatus",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListFirewallStatus"
            }
        },
        "/node/services/install-upgrade?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX install-upgrade service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX install-upgrade service",
                "x-vmw-nsx-module": "NodeInstallUpgradeService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateRepositoryServiceActionRestart"
            }
        },
        "/service-profiles/{service-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified service profile. The PUT request must include the\nresource_type parameters. Modifiable parameters include description and\ndisplay_name. Other parameters might be modifiable, depending on the\nspecified service type.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProfile"
                        },
                        "required": true,
                        "name": "ServiceProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a Service Profile",
                "x-vmw-nsx-module": "ServiceProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateServiceProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified service profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read a Service Profile",
                "x-vmw-nsx-module": "ServiceProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadServiceProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified service profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-profile-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a Service Profile",
                "x-vmw-nsx-module": "ServiceProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteServiceProfile"
            }
        },
        "/node/services/manager/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read service status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read service status",
                "x-vmw-nsx-module": "NodeProtonService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadProtonServiceStatus"
            }
        },
        "/ns-service-groups": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/NSServiceGroup"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new NSServiceGroup which can contain NSServices.\nA given NSServiceGroup can contain either only ether type of NSServices\nor only non-ether type of NSServices, i.e. an NSServiceGroup cannot\ncontain a mix of both ether and non-ether types of NSServices.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NSServiceGroup"
                        },
                        "required": true,
                        "name": "NSServiceGroup",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Create NSServiceGroup",
                "x-vmw-nsx-module": "NSServiceGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNSServiceGroup"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSServiceGroupListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns paginated list of NSServiceGroups\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Fetch all default NSServiceGroups",
                        "type": "boolean",
                        "name": "default_service",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "List all NSServiceGroups",
                "x-vmw-nsx-module": "NSServiceGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNSServiceGroups"
            }
        },
        "/loadbalancer/virtual-servers/{virtual-server-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServer"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a load balancer virtual server.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "virtual-server-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServer"
                        },
                        "required": true,
                        "name": "LbVirtualServer",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer virtual server",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerVirtualServer"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a load balancer virtual server.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "virtual-server-id",
                        "in": "path"
                    },
                    {
                        "description": "Delete associated rules",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "delete_associated_rules"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a load balancer virtual server",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLoadBalancerVirtualServer"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServer"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a load balancer virtual server.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "virtual-server-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a load balancer virtual server",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerVirtualServer"
            }
        },
        "/serviceinsertion/service-attachments": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceAttachment"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new Service attachment. A service attachment represents a point\non NSX entity (Example: Logical Router) to which service instance can be\nconnected through an InstanceEndpoint.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceAttachment"
                        },
                        "required": true,
                        "name": "ServiceAttachment",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Add a Service Attachment.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddServiceAttachment"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceAttachmentListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns all Service-Attachement(s) present in the system.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get all service attachments.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListServiceAttachments"
            }
        },
        "/transport-zones/transport-node-status-report": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "You must provide the request header \"Accept:application/octet-stream\" when calling this API.",
                "parameters": [
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "Transport node",
                        "enum": [
                            "UP",
                            "DOWN",
                            "DEGRADED"
                        ],
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Creates a status report of transport nodes of all the transport zones",
                "x-vmw-nsx-module": "Heatmap",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTransportNodeReport"
            }
        },
        "/transport-nodes/{transportnode-id}/state": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportNodeState"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the current state of the transport node\nconfiguration and information about the associated hostswitch.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "transportnode-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get a Transport Node's State",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTransportNodeState"
            }
        },
        "/node/services/nsx-message-bus": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read NSX Message Bus service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read NSX Message Bus service properties",
                "x-vmw-nsx-module": "NodeNSXMessageBusService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNSXMessageBusService"
            }
        },
        "/loadbalancer/tcp-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbTcpProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a load balancer TCP profile.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbTcpProfile"
                        },
                        "required": true,
                        "name": "LbTcpProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer TCP profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerTcpProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbTcpProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a paginated list of load balancer TCP profiles.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a paginated list of load balancer TCP profiles",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerTcpProfiles"
            }
        },
        "/migration/migration-units/aggregate-info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitAggregateInfoListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get migration units aggregate-info",
                "parameters": [
                    {
                        "description": "Component type based on which migration units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Identifier of group based on which migration units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "description": "Flag to indicate whether to return only migration units with errors",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "has_errors"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Metadata about migration unit to filter on",
                        "required": false,
                        "type": "string",
                        "name": "metadata",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "enum": [
                            "SELECTED",
                            "DESELECTED",
                            "ALL"
                        ],
                        "description": "Flag to indicate whether to return only selected, only deselected or both type of migration units",
                        "default": "ALL",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "selection_status"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get migration units aggregate-info",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationUnitAggregateInfo"
            }
        },
        "/ns-groups": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/NSGroup"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new NSGroup that can group NSX resources - VIFs, Lports\nand LSwitches as well as the grouping objects - IPSet, MACSet and other\nNSGroups\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NSGroup"
                        },
                        "required": true,
                        "name": "NSGroup",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "Create NSGroup",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNSGroup"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NSGroupListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List the NSGroups in a paginated format. The page size is restricted\nto 50 NSGroups so that the size of the response remains small even\nin the worst case.\nOptionally, specify valid member types as request parameter to filter NSGroups.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Specify member types to filter corresponding NSGroups\n",
                        "required": false,
                        "type": "string",
                        "name": "member_types",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "default": false,
                        "description": "Populate metadata of resource referenced by NSGroupExpressions\n",
                        "type": "boolean",
                        "name": "populate_references",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Grouping Objects"
                ],
                "summary": "List NSGroups",
                "x-vmw-nsx-module": "NSGroup",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNSGroups"
            }
        },
        "/serviceinsertion/service-attachments/{service-attachment-id}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete existing service attachment from system.\nBefore deletion, please make sure that, no instance endpoints are connected\nto this attachment. In turn no appliance should be connected to this attachment.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-attachment-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete an existing service attachment",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteServiceAttachment"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceAttachment"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns detailed Attachment information for a given service attachment.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-attachment-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get a particular service attachment.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetServiceAttachment"
            }
        },
        "/transport-zones/transport-node-status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportNodeStatusListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read status of all the transport nodes",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "Transport node",
                        "enum": [
                            "UP",
                            "DOWN",
                            "DEGRADED",
                            "UNKNOWN"
                        ],
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Read status of all the transport nodes",
                "x-vmw-nsx-module": "Heatmap",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListTransportNodeStatus"
            }
        },
        "/pools/ip-pools/{pool-id}/allocations": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AllocationIpAddressListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about which addresses have been allocated from a\nspecified IP address pool.\n",
                "parameters": [
                    {
                        "description": "IP pool ID",
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pool Management"
                ],
                "summary": "List IP Pool Allocations",
                "x-vmw-nsx-module": "Ipam",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIpPoolAllocations"
            }
        },
        "/bridge-endpoints/{endpoint-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BridgeEndpointStatistics"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the statistics for the Bridge Endpoint of the given Endpoint id (endpoint-id)",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "endpoint-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Returns statistics of a specified Bridge Endpoint",
                "x-vmw-nsx-module": "AggSvcBridging",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetBridgeEndpointStatistics"
            }
        },
        "/loadbalancer/persistence-profiles/{persistence-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPersistenceProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a load balancer persistence profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "persistence-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LbPersistenceProfile"
                        },
                        "required": true,
                        "name": "LbPersistenceProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Update a load balancer persistence profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLoadBalancerPersistenceProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPersistenceProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a load balancer persistence profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "persistence-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a load balancer persistence profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLoadBalancerPersistenceProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a load balancer persistence profile.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "persistence-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a load balancer persistence profile",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLoadBalancerPersistenceProfile"
            }
        },
        "/pktcap/sessions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PacketCaptureSessionList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the information of all packet capture sessions.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Get the information of all packet capture sessions",
                "x-vmw-nsx-module": "PacketCapture",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListPacketCaptureSessions"
            }
        },
        "/node/services/install-upgrade?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX install-upgrade service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX install-upgrade service",
                "x-vmw-nsx-module": "NodeInstallUpgradeService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateRepositoryServiceActionStop"
            }
        },
        "/migration/migration-units": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get migration units",
                "parameters": [
                    {
                        "description": "Component type based on which migration units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Current version of migration unit based on which migration units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "current_version",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "UUID of group based on which migration units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "description": "Flag to indicate whether to return only migration units with warnings",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "has_warnings"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Metadata about migration unit to filter on",
                        "required": false,
                        "type": "string",
                        "name": "metadata",
                        "in": "query"
                    },
                    {
                        "description": "Migration unit type based on which migration units to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "migration_unit_type",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get migration units",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationUnits"
            }
        },
        "/aaa/vidm/search": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VidmInfoListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get all the users and groups from vIDM matching the search key case insensitively. The search key is checked to be a substring of name or given name or family name of user and display name of group. This is a non paginated API.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "Search string to search for.\n",
                        "required": true,
                        "type": "string",
                        "name": "search_string",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Get all the users and groups from vIDM matching the search key case insensitively. The search key is checked to be a substring of name or given name or family name of user and display name of group. This is a non paginated API.",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetVidmSearchResult"
            }
        },
        "/logical-router-ports/{logical-router-port-id}/arp-table?format=csv": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterPortArpTableInCsvFormat"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns ARP table in CSV format for the Logical Router Port of the given id, on a\nnode if a query parameter \"transport_node_id=<transport-node-id>\" is given. The\ntransport_node_id parameter is mandatory if the router port is not uplink type.\nThe query parameter \"source=cached\" is not supported.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-port-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    },
                    {
                        "description": "TransportNode Id",
                        "required": false,
                        "type": "string",
                        "name": "transport_node_id",
                        "in": "query"
                    }
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get the ARP table for the Logical Router Port of the given id",
                "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLogicalRouterPortArpTableInCsvFormatCsv"
            }
        },
        "/mirror-sessions/{mirror-session-id}?action=verify": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Verify whether all participants are on the same transport node",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "mirror-session-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Troubleshooting And Monitoring"
                ],
                "summary": "Verify whether the mirror session is still valid",
                "x-vmw-nsx-module": "PortMirroring",
                "consumes": [
                    "application/json"
                ],
                "operationId": "VerifyPortMirroringSessionVerify"
            }
        },
        "/node/services/nsx-upgrade-agent?action=stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the NSX upgrade agent service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the NSX upgrade agent service",
                "x-vmw-nsx-module": "NodeNsxUpgradeAgent",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNsxUpgradeAgentServiceActionStop"
            }
        },
        "/logical-routers/{logical-router-id}?action=reallocate": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouter"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "API to re allocate edge node placement for TIER1 logical router. You can\nre-allocate service routers of TIER1 in same edge cluster or different edge\ncluster. You can also place edge nodes manually and provide maximum two\nindices for HA mode ACTIVE_STANDBY. To re-allocate on new edge cluster you\nmust have existing edge cluster for TIER1 logical router. This will be\ndisruptive operation and all existing statistics of logical router will be\nremove.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceRouterAllocationConfig"
                        },
                        "required": true,
                        "name": "ServiceRouterAllocationConfig",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Re allocate edge node placement of TIER1 service routers",
                "x-vmw-nsx-module": "LogicalRouter",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReAllocateServiceRoutersReallocate"
            }
        },
        "/migration/migration-unit-groups/aggregate-info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnitGroupAggregateInfoListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return aggregate information of all migration unit groups",
                "parameters": [
                    {
                        "description": "Component type based on which migration unit groups to be filtered",
                        "required": false,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "description": "Flag indicating whether to return summary",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "summary"
                    },
                    {
                        "description": "Synchronize before returning migration unit groups",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "sync"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Return aggregate information of all migration unit groups",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationUnitGroupAggregateInfo"
            }
        },
        "/serviceinsertion/sections?action=create_with_rules": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSectionRuleList"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a new serviceinsertion section with rules. The limit on the number of\nrules is defined by maxItems in collection types for ServiceInsertionRule\n(ServiceInsertionRuleXXXList types). When invoked on a section with a large number\nof rules, this API is supported only at low rates of invocation (not more\nthan 4-5 times per minute). The typical latency of this API with about 1024\nrules is about 4-5 seconds. This API should not be invoked with large\npayloads at automation speeds. More than 50 rules are not supported.\n\nInstead, to create sections, use:\nPOST /api/v1/serviceinsertion/sections\n\nTo create rules, use:\nPOST /api/v1/serviceinsertion/sections/&lt;section-id&gt;/rules\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceInsertionSectionRuleList"
                        },
                        "required": true,
                        "name": "ServiceInsertionSectionRuleList",
                        "in": "body"
                    },
                    {
                        "in": "query",
                        "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                        "required": false,
                        "maxLength": 64,
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "enum": [
                            "insert_top",
                            "insert_bottom",
                            "insert_after",
                            "insert_before"
                        ],
                        "description": "Operation",
                        "default": "insert_top",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "operation"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a Section with Rules",
                "x-vmw-nsx-module": "ServiceInsertionRules",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddServiceInsertionSectionWithRulesCreate_with_rules"
            }
        },
        "/upgrade/history": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradeHistoryList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get upgrade history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get upgrade history",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeHistory"
            }
        },
        "/hpm/features": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FeatureStackCollectionConfigurationList"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "List all health performance monitoring feature stacks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aggregation Service"
                ],
                "summary": "List all health performance monitoring feature stacks",
                "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListFeatureStackConfigurations"
            }
        },
        "/transportzone-profiles/{transportzone-profile-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportZoneProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies a specified transport zone profile. The body of the PUT request must include the resource_type.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "transportzone-profile-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/TransportZoneProfile"
                        },
                        "required": true,
                        "name": "TransportZoneProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Update a transport zone profile",
                "x-vmw-nsx-module": "TransportZoneProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateTransportZoneProfile"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes a specified transport zone profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "transportzone-profile-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Delete a transport zone Profile",
                "x-vmw-nsx-module": "TransportZoneProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteTransportZoneProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportZoneProfile"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about a specified transport zone profile.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "transportzone-profile-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Get transport zone profile by identifier",
                "x-vmw-nsx-module": "TransportZoneProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetTransportZoneProfile"
            }
        },
        "/app-discovery/sessions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/AppDiscoverySession"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Starts the discovery of application discovery session\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/StartAppDiscoverySessionParameters"
                        },
                        "required": true,
                        "name": "StartAppDiscoverySessionParameters",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Starts the discovery of application discovery session",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "StartAppDiscoverySession"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AppDiscoverySessionsListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the list of the application discovery sessions available\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "NSGroup id, helps user query sessions related to one nsgroup",
                        "required": false,
                        "type": "string",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "STARTING",
                            "FAILED",
                            "RUNNING",
                            "FINISHED"
                        ],
                        "description": "Session Status, e.g. get all running sessions",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "status"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App Discovery"
                ],
                "summary": "Returns the list of the application discovery sessions available",
                "x-vmw-nsx-module": "AppDiscovery",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAppDiscoverySessions"
            }
        },
        "/logical-router-ports/{logical-router-port-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterPort"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies the specified logical router port. Required parameters include the\nresource_type and logical_router_id. Modifiable parameters include the\nresource_type (LogicalRouterUpLinkPort, LogicalRouterDownLinkPort,\nLogicalRouterLinkPort, LogicalRouterLoopbackPort, LogicalRouterCentralizedServicePort),\nlogical_router_id (to reassign the port to a different router), and service_bindings.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-port-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterPort"
                        },
                        "required": true,
                        "name": "LogicalRouterPort",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a Logical Router Port",
                "x-vmw-nsx-module": "LogicalRouterPorts",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateLogicalRouterPort"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterPort"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the specified logical router port.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-port-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Read Logical Router Port",
                "x-vmw-nsx-module": "LogicalRouterPorts",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadLogicalRouterPort"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Deletes the specified logical router port. You must delete logical router\nports before you can delete the associated logical router. To Delete Tier0\nrouter link port you must have to delete attached tier1 router link port,\notherwise pass \"force=true\" as query param to force delete the Tier0\nrouter link port.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-port-id",
                        "in": "path"
                    },
                    {
                        "default": false,
                        "description": "Force delete the resource even if it is being used somewhere\n",
                        "type": "boolean",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a Logical Router Port",
                "x-vmw-nsx-module": "LogicalRouterPorts",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteLogicalRouterPort"
            }
        },
        "/serviceinsertion/services/{service-id}/service-instances": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BaseServiceInstance"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Adds a new Service-Instance under the specified Service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/BaseServiceInstance"
                        },
                        "required": true,
                        "name": "BaseServiceInstance",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Add a Service Instance for a specified Service.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddServiceInstance"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ServiceInstanceListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns all Service-Instance(s) for a given Service-Insertion Service.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get all Service-Instances for Service.",
                "x-vmw-nsx-module": "ServiceInsertion",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListServiceInstancesForService"
            }
        },
        "/logical-routers/{logical-router-id}/nat/rules/{rule-id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NatRule"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update a specific NAT rule from a given logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/NatRule"
                        },
                        "required": true,
                        "name": "NatRule",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Update a specific NAT rule from a given logical router",
                "x-vmw-nsx-module": "Nat",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNatRule"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NatRule"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a specific NAT rule from a given logical router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Get a specific NAT rule from a given logical router",
                "x-vmw-nsx-module": "Nat",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNatRule"
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete a specific NAT rule from a logical router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "rule-id",
                        "in": "path"
                    }
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Delete a specific NAT rule from a logical router",
                "x-vmw-nsx-module": "Nat",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteNatRule"
            }
        },
        "/migration/bundles/{bundle-id}/upload-status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationBundleUploadStatus"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get uploaded migration bundle upload status\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "bundle-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get uploaded migration bundle upload status",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationBundleUploadStatus"
            }
        },
        "/logical-routers/{logical-router-id}/nat/rules": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/NatRule"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Add a NAT rule in a specific logical router.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/NatRule"
                        },
                        "required": true,
                        "name": "NatRule",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "Add a NAT rule in a specific logical router",
                "x-vmw-nsx-module": "Nat",
                "consumes": [
                    "application/json"
                ],
                "operationId": "AddNatRule"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NatRuleListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns paginated list of all user defined NAT rules of the specific logical router\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "logical-router-id",
                        "in": "path"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logical Routing And Services"
                ],
                "summary": "List NAT rules of the logical router",
                "x-vmw-nsx-module": "Nat",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNatRules"
            }
        },
        "/node/services/mgmt-plane-bus?action=restart": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the Rabbit MQ service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the Rabbit MQ service",
                "x-vmw-nsx-module": "NodeRabbitMQService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateRabbitMQServiceActionRestart"
            }
        },
        "/node/hardening-policy/mandatory-access-control": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MandatoryAccessControlProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Enable or disable  Mandatory Access Control",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/MandatoryAccessControlProperties"
                        },
                        "required": true,
                        "name": "MandatoryAccessControlProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Enable or disable  Mandatory Access Control",
                "x-vmw-nsx-module": "NodeMandatoryAccessControlModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "SetNodeMandatoryAccessControl"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MandatoryAccessControlProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Gets the enable status for Mandatory Access Control",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Gets the enable status for Mandatory Access Control",
                "x-vmw-nsx-module": "NodeMandatoryAccessControlModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetNodeMandatoryAccessControl"
            }
        },
        "/node/services/install-upgrade": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInstallUpgradeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update NSX install-upgrade service properties",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeInstallUpgradeServiceProperties"
                        },
                        "required": true,
                        "name": "NodeInstallUpgradeServiceProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update NSX install-upgrade service properties",
                "x-vmw-nsx-module": "NodeInstallUpgradeService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateRepositoryService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeInstallUpgradeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read NSX install-upgrade service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read NSX install-upgrade service properties",
                "x-vmw-nsx-module": "NodeInstallUpgradeService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadRepositoryService"
            }
        },
        "/node": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Modifies NSX Manager appliance properties. Modifiable properties include the\ntimezone, message of the day (motd), and hostname. The NSX Manager\nnode_version, system_time, and kernel_version are read only and cannot be\nmodified with this method.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeProperties"
                        },
                        "required": true,
                        "name": "NodeProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update node properties",
                "x-vmw-nsx-module": "Node",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateNodeProperties"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the NSX Manager appliance. Information includes\nrelease number, time zone, system time, kernel version, message of the day\n(motd), and host name.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read node properties",
                "x-vmw-nsx-module": "Node",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeProperties"
            }
        },
        "/migration/migration-units/{migration-unit-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MigrationUnit"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get a specific migration unit",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "migration-unit-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Migration"
                ],
                "summary": "Get a specific migration unit",
                "x-vmw-nsx-module": "Migration",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetMigrationUnit"
            }
        },
        "/upgrade/plan/{component_type}/settings": {
            "put": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradePlanSettings"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update the upgrade plan settings for the component.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "component_type",
                        "in": "path"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/UpgradePlanSettings"
                        },
                        "required": true,
                        "name": "UpgradePlanSettings",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Update upgrade plan settings for the component",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateUpgradePlanSettings"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpgradePlanSettings"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the upgrade plan settings for the component.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "component_type",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Get upgrade plan settings for the component",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradePlanSettings"
            }
        },
        "/loadbalancer/services/{service-id}/pools/{pool-id}/statistics": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbPoolStatistics"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns the statistics of the given load balancer pool by given load balancer\nserives id and load balancer pool id.\n",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "service-id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "name": "pool-id",
                        "in": "path"
                    },
                    {
                        "enum": [
                            "realtime",
                            "cached"
                        ],
                        "description": "Data source type.",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "source"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get the statistics of load balancer pool",
                "x-vmw-nsx-module": "AggSvcLb",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetLoadBalancerPoolStatistics"
            }
        },
        "/vpn/ipsec/tunnel-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNTunnelProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create custom IPSec tunnel profile. IPSec tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. System will be provisioned with system owned non editable default IPSec tunnel profile. Any change in profile affects all sessions consuming this profile.",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNTunnelProfile"
                        },
                        "required": true,
                        "name": "IPSecVPNTunnelProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Create custom IPSec tunnel profile",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateIPSecVPNTunnelProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/IPSecVPNTunnelProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get paginated list of all IPSecTunnelProfiles.",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get IPSecTunnelProfile List Result",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListIPSecVPNTunnelProfiles"
            }
        },
        "/node/services/http": {
            "put": {
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/NodeHttpServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Update http service properties",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeHttpServiceProperties"
                        },
                        "required": true,
                        "name": "NodeHttpServiceProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Update http service properties",
                "x-vmw-nsx-module": "NodeProxyService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "UpdateProxyService"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeHttpServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read http service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read http service properties",
                "x-vmw-nsx-module": "NodeProxyService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadProxyService"
            }
        },
        "/upgrade/eula/acceptance": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EULAAcceptance"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Return the acceptance status of end user license agreement\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licensing"
                ],
                "summary": "Return the acceptance status of end user license agreement\n",
                "x-vmw-nsx-module": "UpgradeEULA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetUpgradeEULAAcceptance"
            }
        },
        "/vpn/ipsec/sessions/{ipsec-vpn-session-id}/peer-config": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "API to download VPN configuration for the peer site. The configuration contains pre-shared key and secret; be careful when sharing or storing it.",
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "ipsec-vpn-session-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "text/plain; charset=utf-8"
                ],
                "tags": [
                    "Vpn"
                ],
                "summary": "Get VPN configuration for the peer site",
                "x-vmw-nsx-module": "IPSecVPN",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetPeerConfig"
            }
        },
        "/transport-nodes/state": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportNodeStateListResult"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns a list of transport node states that have realized state as provided\nas query parameter\n",
                "parameters": [
                    {
                        "enum": [
                            "ENTERING",
                            "ENABLED",
                            "EXITING",
                            "DISABLED"
                        ],
                        "description": "maintenance mode state",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "mm_state"
                    },
                    {
                        "enum": [
                            "PENDING",
                            "IN_PROGRESS",
                            "SUCCESS",
                            "PARTIAL_SUCCESS",
                            "FAILED",
                            "ORPHANED"
                        ],
                        "description": "Realized state of transport nodes",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "status"
                    },
                    {
                        "description": "Virtual tunnel endpoint ip address of transport node",
                        "required": false,
                        "type": "string",
                        "name": "vtep_ip",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List transport nodes by realized state",
                "x-vmw-nsx-module": "TransportNode",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListTransportNodesByState"
            }
        },
        "/node/processes/{process-id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeProcessProperties"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information for a specified process ID (pid).",
                "parameters": [
                    {
                        "description": "ID of process to read",
                        "required": true,
                        "type": "string",
                        "name": "process-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read node process",
                "x-vmw-nsx-module": "NodeProcesses",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadNodeProcess"
            }
        },
        "/node/services/liagent?action=start": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Restart, start or stop the liagent service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Restart, start or stop the liagent service",
                "x-vmw-nsx-module": "NodeLiagentService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLiagentServiceActionStart"
            }
        },
        "/upgrade/plan?action=reset": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Reset the upgrade plan to default plan. User has an option to change\nthe default plan. But if after making changes, user wants to go\nback to the default plan, this is the way to do so.\n",
                "parameters": [
                    {
                        "description": "Component type",
                        "required": true,
                        "type": "string",
                        "name": "component_type",
                        "in": "query"
                    }
                ],
                "tags": [
                    "Upgrade"
                ],
                "summary": "Reset upgrade plan to default plan",
                "x-vmw-nsx-module": "Upgrade",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ResetUpgradePlanReset"
            }
        },
        "/fabric/discovered-nodes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DiscoveredNodeListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about all discovered nodes.",
                "parameters": [
                    {
                        "description": "Local Id of the discovered node in the Compute Manager",
                        "required": false,
                        "type": "string",
                        "name": "cm_local_id",
                        "in": "query"
                    },
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Display name of discovered node",
                        "required": false,
                        "type": "string",
                        "name": "display_name",
                        "in": "query"
                    },
                    {
                        "description": "External id of the discovered node, ex. a mo-ref from VC",
                        "required": false,
                        "type": "string",
                        "name": "external_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "true",
                            "false"
                        ],
                        "description": "Discovered node has a parent compute collection or is a standalone host",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "has_parent"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "IP address of the discovered node",
                        "required": false,
                        "type": "string",
                        "name": "ip_address",
                        "in": "query"
                    },
                    {
                        "description": "Id of the fabric node created from the discovered node",
                        "required": false,
                        "type": "string",
                        "name": "node_id",
                        "in": "query"
                    },
                    {
                        "description": "Discovered Node type like HostNode",
                        "required": false,
                        "type": "string",
                        "name": "node_type",
                        "in": "query"
                    },
                    {
                        "description": "Id of the compute manager from where this node was discovered",
                        "required": false,
                        "type": "string",
                        "name": "origin_id",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "External id of the compute collection to which this node belongs",
                        "required": false,
                        "type": "string",
                        "name": "parent_compute_collection",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric"
                ],
                "summary": "Return the List of Discovered Nodes",
                "x-vmw-nsx-module": "InventoryCmObj",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListDiscoveredNodes"
            }
        },
        "/tasks/{task-id}/response": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "303": {
                        "description": "See Other",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get the response of a task",
                "parameters": [
                    {
                        "description": "ID of task to read",
                        "required": true,
                        "type": "string",
                        "name": "task-id",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Api Services"
                ],
                "summary": "Get the response of a task",
                "x-vmw-nsx-module": "Tasks",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadTaskResult"
            }
        },
        "/aaa/registration-token/{token}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Delete registration access token",
                "parameters": [
                    {
                        "description": "Registration token",
                        "required": true,
                        "type": "string",
                        "name": "token",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Delete registration access token",
                "x-vmw-nsx-module": "RegistrationTokenEndPoint",
                "consumes": [
                    "application/json"
                ],
                "operationId": "DeleteRegistrationToken"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RegistrationToken"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get registration access token",
                "parameters": [
                    {
                        "description": "Registration token",
                        "required": true,
                        "type": "string",
                        "name": "token",
                        "in": "path"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Get registration access token",
                "x-vmw-nsx-module": "RegistrationTokenEndPoint",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetRegistrationToken"
            }
        },
        "/node/services/mgmt-plane-bus": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeServiceProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Read Rabbit MQ service properties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read Rabbit MQ service properties",
                "x-vmw-nsx-module": "NodeRabbitMQService",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadRabbitMQService"
            }
        },
        "/loadbalancer/virtual-servers": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServer"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Create a load balancer virtual server.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServer"
                        },
                        "required": true,
                        "name": "LbVirtualServer",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer virtual server",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerVirtualServer"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServerListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Retrieve a paginated list of load balancer virtual servers.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve a paginated list of load balancer virtual servers",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListLoadBalancerVirtualServers"
            }
        },
        "/node/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeStatusProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the NSX Manager appliance's file system, CPU,\nmemory, disk usage, and uptime.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Read node status",
                "x-vmw-nsx-module": "NodeStatus",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ReadApplianceNodeStatus"
            }
        },
        "/node/network/routes": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/NodeRouteProperties"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Add a route to the NSX Manager routing table. For static routes, the\nroute_type, interface_id, netmask, and destination are required parameters.\nFor default routes, the route_type, gateway address, and interface_id\nare required. For blackhole routes, the route_type and destination are\nrequired. All other parameters are optional. When you add a static route,\nthe scope and route_id are created automatically. When you add a default or\nblackhole route, the route_id is created automatically. The route_id is\nread-only, meaning that it cannot be modified. All other properties can be\nmodified by deleting and readding the route.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/NodeRouteProperties"
                        },
                        "required": true,
                        "name": "NodeRouteProperties",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "Create node network route",
                "x-vmw-nsx-module": "NodeNetworkRoutesModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateNodeNetworkRoute"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NodeRoutePropertiesListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns detailed information about each route in the NSX Manager routing\ntable. Route information includes the route type (default, static, and so\non), a unique route identifier, the route metric, the protocol from which\nthe route was learned, the route source (which is the preferred egress\ninterface), the route destination, and the route scope. The route scope\nrefers to the distance to the destination network: The \"host\" scope leads to\na destination address on the NSX Manager, such as a loopback address;\nthe \"link\" scope leads to a destination on the local network; and the\n\"global\" scope leads to addresses that are more than one hop away.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nsx Component Administration"
                ],
                "summary": "List node network routes",
                "x-vmw-nsx-module": "NodeNetworkRoutesModule",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListNodeNetworkRoutes"
            }
        },
        "/transportzone-profiles": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/TransportZoneProfile"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Creates a transport zone profile. The resource_type is required.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/TransportZoneProfile"
                        },
                        "required": true,
                        "name": "TransportZoneProfile",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "Create a transport zone Profile",
                "x-vmw-nsx-module": "TransportZoneProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateTransportZoneProfile"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TransportZoneProfileListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Returns information about the configured transport zone profiles. Transport zone\nprofiles define networking policies for transport zones and transport zone endpoints.\n",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Whether the list result contains system resources",
                        "default": false,
                        "required": false,
                        "in": "query",
                        "type": "boolean",
                        "name": "include_system_owned"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "description": "comma-separated list of transport zone profile types, e.g. ?resource_type=BfdHealthMonitoringProfile",
                        "required": false,
                        "type": "string",
                        "name": "resource_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network Transport"
                ],
                "summary": "List transport zone profiles",
                "x-vmw-nsx-module": "TransportZoneProfile",
                "consumes": [
                    "application/json"
                ],
                "operationId": "ListTransportZoneProfiles"
            }
        },
        "/loadbalancer/virtual-servers?action=create_with_rules": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServerWithRule"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "It is used to create virtual servers, the associated rules and bind the\nrules to the virtual server.\nTo add new rules, make sure the rules which have no identifier specified,\nthe new rules are automatically generated and associated to the virtual\nserver.\nIf the virtual server need to consume some existed rules without change,\nthose rules should not be specified in this array, otherwise, the rules\nare updated.\n",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/LbVirtualServerWithRule"
                        },
                        "required": true,
                        "name": "LbVirtualServerWithRule",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a load balancer virtual server with rules",
                "x-vmw-nsx-module": "LoadBalancer",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateLoadBalancerVirtualServerWithRulesCreate_with_rules"
            }
        },
        "/aaa/role-bindings": {
            "post": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RoleBinding"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Assign roles to User or Group",
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/RoleBinding"
                        },
                        "required": true,
                        "name": "RoleBinding",
                        "in": "body"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Assign roles to User or Group",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "CreateRoleBinding"
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RoleBindingListResult"
                        }
                    },
                    "404": {
                        "$ref": "#/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/responses/Forbidden"
                    },
                    "412": {
                        "$ref": "#/responses/PreconditionFailed"
                    },
                    "400": {
                        "$ref": "#/responses/BadRequest"
                    },
                    "503": {
                        "$ref": "#/responses/ServiceUnavailable"
                    },
                    "500": {
                        "$ref": "#/responses/InternalServerError"
                    }
                },
                "description": "Get all users and groups with their roles",
                "parameters": [
                    {
                        "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                        "type": "string",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated list of fields that should be included in query result",
                        "type": "string",
                        "name": "included_fields",
                        "in": "query"
                    },
                    {
                        "description": "User/Group name",
                        "required": false,
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "description": "Maximum number of results to return in this page (server may return fewer)",
                        "format": "int64",
                        "default": 1000,
                        "maximum": 1000,
                        "minimum": 0,
                        "in": "query",
                        "type": "integer",
                        "name": "page_size"
                    },
                    {
                        "type": "boolean",
                        "name": "sort_ascending",
                        "in": "query"
                    },
                    {
                        "description": "Field by which records are sorted",
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "remote_user",
                            "remote_group",
                            "local_user",
                            "principal_identity"
                        ],
                        "description": "Type",
                        "required": false,
                        "in": "query",
                        "type": "string",
                        "name": "type"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Aaa"
                ],
                "summary": "Get all users and groups with their roles",
                "x-vmw-nsx-module": "AAA",
                "consumes": [
                    "application/json"
                ],
                "operationId": "GetAllRoleBindings"
            }
        }
    },
    "definitions": {
        "ClusterNodeVMDeploymentStatusReport": {
            "description": "Contains up-to-date information relating to an auto-deployed VM, including\nits status and (potentially) an error message.\n",
            "title": "Report of a VM's deployment status",
            "required": [
                "status"
            ],
            "x-vmw-nsx-module": "ClusterNodeVMDeployment",
            "type": "object",
            "properties": {
                "status": {
                    "enum": [
                        "UNKNOWN_STATE",
                        "VM_DEPLOYMENT_QUEUED",
                        "VM_DEPLOYMENT_IN_PROGRESS",
                        "VM_DEPLOYMENT_FAILED",
                        "VM_POWER_ON_IN_PROGRESS",
                        "VM_POWER_ON_FAILED",
                        "WAITING_TO_REGISTER_VM",
                        "VM_WAITING_TO_CLUSTER",
                        "VM_WAITING_TO_COME_ONLINE",
                        "VM_ONLINE_FAILED",
                        "VM_CLUSTERING_IN_PROGRESS",
                        "VM_CLUSTERING_FAILED",
                        "VM_CLUSTERING_SUCCESSFUL",
                        "WAITING_TO_UNDEPLOY_VM",
                        "VM_DECLUSTER_IN_PROGRESS",
                        "VM_DECLUSTER_FAILED",
                        "VM_DECLUSTER_SUCCESSFUL",
                        "VM_POWER_OFF_IN_PROGRESS",
                        "VM_POWER_OFF_FAILED",
                        "VM_UNDEPLOY_IN_PROGRESS",
                        "VM_UNDEPLOY_FAILED",
                        "VM_UNDEPLOY_SUCCESSFUL"
                    ],
                    "type": "string",
                    "description": "Status of the addition or deletion of an auto-deployed cluster node VM.\n",
                    "title": "Auto-deployed VM's deployment status"
                },
                "failure_message": {
                    "type": "string",
                    "description": "In case of auto-deployment-related failure, an error message will be\nstored here.\n",
                    "title": "Error message for failure"
                },
                "failure_code": {
                    "format": "int64",
                    "type": "integer",
                    "description": "In case of auto-deployment-related failure, the code for the error will\nbe stored here.\n",
                    "title": "Error code for failure"
                }
            }
        },
        "ComputeCollectionFabricTemplate": {
            "x-vmw-nsx-module": "ComputeCollectionHostPrepFabricService",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "compute_collection_id",
                        "auto_install_nsx"
                    ],
                    "x-vmw-nsx-module": "ComputeCollectionHostPrepFabricService",
                    "type": "object",
                    "properties": {
                        "compute_collection_id": {
                            "type": "string",
                            "description": "Associated compute collection id",
                            "title": "Associated compute collection id"
                        },
                        "auto_install_nsx": {
                            "type": "boolean",
                            "description": "Indicates whether NSX components should be automcatically installed. When 'true' NSX components will be automatically installed on the new host added to compute collection.",
                            "title": "Flag to enable/disable automatic install of NSX components"
                        }
                    }
                }
            ],
            "description": "Compute collection fabric template",
            "title": "Compute collection fabric template"
        },
        "BackupSchedule": {
            "description": "Abstract base type for Weekly or Interval Backup Schedule",
            "title": "Abstract base type for Weekly or Interval Backup Schedule",
            "required": [
                "resource_type"
            ],
            "discriminator": "resource_type",
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "properties": {
                "resource_type": {
                    "enum": [
                        "WeeklyBackupSchedule",
                        "IntervalBackupSchedule"
                    ],
                    "type": "string",
                    "description": "Schedule type",
                    "title": "Schedule type"
                }
            }
        },
        "DhcpRelayServiceListResult": {
            "x-vmw-nsx-module": "DhcpRelay",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "DhcpRelay",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DhcpRelayService"
                            },
                            "type": "array",
                            "description": "Dhcp relay service list results",
                            "title": "Dhcp relay service list results"
                        }
                    }
                }
            ]
        },
        "ExcludeList": {
            "x-vmw-nsx-module": "ExcludeList",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "ExcludeList",
                    "required": [
                        "members"
                    ],
                    "type": "object",
                    "properties": {
                        "members": {
                            "description": "List of the members in the exclude list",
                            "title": "ExcludeList member list",
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 100,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "ManagedResource": {
            "x-vmw-nsx-module": "Common",
            "allOf": [
                {
                    "$ref": "#/definitions/RevisionedResource"
                },
                {
                    "x-vmw-nsx-module": "Common",
                    "type": "object",
                    "properties": {
                        "_system_owned": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "Indicates system owned resource"
                        },
                        "display_name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "Defaults to ID if not set",
                            "title": "Identifier to use when displaying entity in logs or GUI"
                        },
                        "description": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "Description of this resource",
                            "title": "Description of this resource"
                        },
                        "tags": {
                            "items": {
                                "$ref": "#/definitions/Tag"
                            },
                            "type": "array",
                            "description": "Opaque identifiers meaningful to the API user",
                            "maxItems": 30,
                            "title": "Opaque identifiers meaningful to the API user"
                        },
                        "_create_user": {
                            "readOnly": true,
                            "type": "string",
                            "description": "ID of the user who created this resource"
                        },
                        "_protection": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Protection status is one of the following:\nPROTECTED - the client who retrieved the entity is not allowed\n            to modify it.\nNOT_PROTECTED - the client who retrieved the entity is allowed\n                to modify it\nREQUIRE_OVERRIDE - the client who retrieved the entity is a super\n                   user and can modify it, but only when providing\n                   the request header X-Allow-Overwrite=true.\nUNKNOWN - the _protection field could not be determined for this\n          entity.\n",
                            "title": "Indicates protection status of this resource"
                        },
                        "_create_time": {
                            "description": "Timestamp of resource creation",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "_last_modified_time": {
                            "description": "Timestamp of last modification",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "_last_modified_user": {
                            "readOnly": true,
                            "type": "string",
                            "description": "ID of the user who last modified this resource"
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Unique identifier of this resource",
                            "title": "Unique identifier of this resource"
                        },
                        "resource_type": {
                            "readOnly": false,
                            "type": "string",
                            "description": "The type of this resource."
                        }
                    }
                }
            ],
            "description": "Base type for resources that are managed by API clients",
            "title": "Base type for resources that are managed by API clients"
        },
        "VtepCsvListResult": {
            "x-vmw-nsx-module": "AggSvcLogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/VtepTableCsvRecord"
                            },
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "AppDiscoveryVmInfo": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "vm_name": {
                            "type": "string",
                            "description": "Name of the VM",
                            "title": "Name of the VM"
                        },
                        "os_type": {
                            "enum": [
                                "INVALID",
                                "WINDOWS",
                                "LINUX"
                            ],
                            "type": "string",
                            "description": "OS type of the VM",
                            "title": "OS type of the VM"
                        },
                        "vm_external_id": {
                            "type": "string",
                            "description": "External Id of the VM",
                            "title": "External Id of the VM"
                        },
                        "os_properties": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "OS properties of the VM",
                            "title": "OS properties of the VM"
                        }
                    }
                }
            ],
            "description": "AppDiscoveryVmInfo details",
            "title": "AppDiscoveryVmInfo details"
        },
        "MacLearningSpec": {
            "description": "MAC learning configuration",
            "title": "MAC learning configuration",
            "required": [
                "enabled"
            ],
            "x-vmw-nsx-module": "MacManagementSwitchingProfile",
            "type": "object",
            "properties": {
                "limit": {
                    "description": "The maximum number of MAC addresses that can be learned on this port",
                    "title": "The maximum number of MAC addresses that can be learned on this port",
                    "default": 4096,
                    "format": "int32",
                    "maximum": 4096,
                    "readOnly": false,
                    "minimum": 0,
                    "type": "integer"
                },
                "aging_time": {
                    "description": "Aging time in sec for learned MAC address",
                    "format": "int32",
                    "default": 300,
                    "title": "Aging time in sec for learned MAC address",
                    "readOnly": true,
                    "type": "integer"
                },
                "enabled": {
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Allowing source MAC address learning",
                    "title": "Allowing source MAC address learning"
                },
                "limit_policy": {
                    "description": "The policy after MAC Limit is exceeded",
                    "title": "The policy after MAC Limit is exceeded",
                    "default": "ALLOW",
                    "enum": [
                        "ALLOW",
                        "DROP"
                    ],
                    "readOnly": false,
                    "type": "string"
                },
                "unicast_flooding_allowed": {
                    "default": true,
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Allowing flooding for unlearned MAC for ingress traffic",
                    "title": "Allowing flooding for unlearned MAC for ingress traffic"
                }
            }
        },
        "DataCounter": {
            "x-vmw-nsx-module": "AggSvcL2Types",
            "required": [
                "total"
            ],
            "type": "object",
            "properties": {
                "total": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total packets or bytes",
                    "title": "The total packets or bytes"
                },
                "multicast_broadcast": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The multicast and broadcast packets or bytes",
                    "title": "The multicast and broadcast packets or bytes"
                },
                "dropped": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The dropped packets or bytes",
                    "title": "The dropped packets or bytes"
                }
            }
        },
        "DirectoryDomainSyncSettings": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "type": "object",
            "description": "Domain synchronization settings",
            "properties": {
                "sync_entire_domain": {
                    "default": false,
                    "type": "boolean",
                    "description": "This flag will decide whether to synchronize the directory objects under entire domain or configured synchronization nodes.",
                    "title": "Sync entire domain flag"
                },
                "full_sync_cron_expr": {
                    "type": "string",
                    "description": "Directory domain full synchronization schedule using cron expression. For example, cron expression \"0 0 12 ? * SUN *\" means full sync is scheduled every Sunday midnight. If this object is null, it means there is no background cron job running for full sync.",
                    "title": "Full synchronization cron expression"
                },
                "delta_sync_interval": {
                    "default": 180,
                    "format": "int64",
                    "type": "integer",
                    "description": "Directory domain delta synchronization interval time between two delta sync in minutes.",
                    "title": "Delta synchronization inverval in minutes"
                }
            },
            "title": "Domain synchronization settings"
        },
        "DSInsertParameters": {
            "x-vmw-nsx-module": "DistributedServices",
            "type": "object",
            "description": "Parameters to tell where rule/section need to be added. All the params take rule/section Id.",
            "properties": {
                "operation": {
                    "default": "insert_top",
                    "enum": [
                        "insert_top",
                        "insert_bottom",
                        "insert_after",
                        "insert_before"
                    ],
                    "type": "string",
                    "description": "Operation",
                    "title": "Operation"
                },
                "id": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.",
                    "title": "Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'."
                }
            },
            "title": "Parameters to tell where rule/section need to be added. All the params take rule/section Id."
        },
        "PortConnectionBMEntities": {
            "x-vmw-nsx-module": "PortConnection",
            "type": "object",
            "description": "Port Connection Bare Metal Entities",
            "properties": {
                "src_port": {
                    "$ref": "#/definitions/LogicalPort"
                },
                "dst_port": {
                    "$ref": "#/definitions/LogicalPort"
                }
            },
            "title": "Port Connection Bare Metal Entities"
        },
        "IpfixObsPointConfig": {
            "x-vmw-nsx-module": "Ipfix",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "enabled"
                    ],
                    "x-vmw-nsx-module": "Ipfix",
                    "type": "object",
                    "properties": {
                        "idle_timeout": {
                            "description": "The time in seconds after a Flow is expired if no more packets matching\nthis Flow are received by the cache.\n",
                            "title": "Idle timeout",
                            "default": 300,
                            "format": "int32",
                            "maximum": 3600,
                            "minimum": 60,
                            "type": "integer"
                        },
                        "observation_domain_id": {
                            "description": "An identifier that is unique to the exporting process and used to\nmeter the Flows.\n",
                            "title": "Observation domain ID",
                            "default": 0,
                            "format": "int64",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "collectors": {
                            "items": {
                                "$ref": "#/definitions/IpfixCollector"
                            },
                            "type": "array",
                            "description": "List of IPFIX collectors",
                            "title": "List of IPFIX collectors"
                        },
                        "active_timeout": {
                            "description": "The time in seconds after a Flow is expired even if more packets\nmatching this Flow are received by the cache.\n",
                            "title": "Active timeout",
                            "default": 300,
                            "format": "int32",
                            "maximum": 3600,
                            "minimum": 60,
                            "type": "integer"
                        },
                        "packet_sample_probability": {
                            "description": "The probability in percentage that a packet is sampled, in range\n0-100. The probability is equal for every packet.\n",
                            "title": "Packet sample probability",
                            "default": 0.1,
                            "exclusiveMinimum": true,
                            "maximum": 100,
                            "minimum": 0,
                            "type": "number"
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled status of IPFIX export",
                            "title": "Enabled status of IPFIX export"
                        },
                        "max_flows": {
                            "description": "The maximum number of flow entries in each exporter flow cache.\n",
                            "title": "Max flows",
                            "default": 16384,
                            "format": "int64",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "IpfixObsPointConfig (i.e. global switch IPFIX config) is deprecated. Please\nuse IpfixSwitchUpmProfile & IpfixCollectorUpmProfile instead. With them,\nswitch IPFIX profile can be applied to specific entities, such as logical\nswitch, logical port and so on.\n",
            "title": "Logical IPFIX observation point"
        },
        "UpgradeBundleInfo": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "description": "Information about the upgrade bundle",
            "properties": {
                "url": {
                    "readOnly": true,
                    "type": "string",
                    "description": "URL for uploading upgrade bundle",
                    "title": "URL of the upgrade bundle"
                },
                "bundle_size": {
                    "readOnly": true,
                    "type": "string",
                    "description": "size of upgrade bundle",
                    "title": "size of upgrade bundle"
                }
            },
            "title": "Information about upgrade bundle"
        },
        "SpoofGuardSwitchingProfile": {
            "x-vmw-nsx-module": "SpoofGuardSwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseSwitchingProfile"
                },
                {
                    "required": [
                        "white_list_providers"
                    ],
                    "x-vmw-nsx-module": "SpoofGuardSwitchingProfile",
                    "type": "object",
                    "properties": {
                        "white_list_providers": {
                            "items": {
                                "description": "Ways to provide white listed addresses for SpoofGuard",
                                "enum": [
                                    "LPORT_BINDINGS",
                                    "LSWITCH_BINDINGS"
                                ],
                                "type": "string"
                            },
                            "readOnly": false,
                            "type": "array",
                            "description": "List of providers for white listed address bindings.",
                            "title": "List of providers for white listed address bindings."
                        }
                    }
                }
            ],
            "description": "SpoofGuard configuration",
            "title": "SpoofGuard configuration"
        },
        "CopyRemoteFileProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "required": [
                "uri",
                "server"
            ],
            "type": "object",
            "properties": {
                "uri": {
                    "type": "string",
                    "description": "URI of file to copy",
                    "title": "URI of file to copy"
                },
                "port": {
                    "description": "Server port",
                    "format": "int64",
                    "title": "Server port",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                },
                "server": {
                    "type": "string",
                    "description": "Remote server hostname or IP address",
                    "title": "Remote server hostname or IP address"
                }
            }
        },
        "Uplink": {
            "description": "Object to identify an uplink based on its type and name",
            "title": "Object to identify an uplink based on its type and name",
            "required": [
                "uplink_name",
                "uplink_type"
            ],
            "x-vmw-nsx-module": "UplinkHostSwitchProfile",
            "type": "object",
            "properties": {
                "uplink_name": {
                    "type": "string",
                    "description": "Name of this uplink",
                    "title": "Name of this uplink"
                },
                "uplink_type": {
                    "enum": [
                        "PNIC",
                        "LAG"
                    ],
                    "type": "string",
                    "description": "Type of the uplink",
                    "title": "Type of the uplink"
                }
            }
        },
        "L2VpnService": {
            "x-vmw-nsx-module": "L2VPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "logical_router_id"
                    ],
                    "x-vmw-nsx-module": "L2VPN",
                    "type": "object",
                    "properties": {
                        "logical_router_id": {
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "logical_tap_ip_pool": {
                            "items": {
                                "description": "IPv4 CIDR Block",
                                "format": "ipv4-cidr-block",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "IP Pool to allocate local and peer endpoint IPs for L2VpnSession logical Tap.",
                            "title": "IP Pool for Logical Taps"
                        },
                        "enable_full_mesh": {
                            "default": false,
                            "type": "boolean",
                            "description": "Hub replicates traffic received from peer to all other peers.",
                            "title": "Enable to act as hub"
                        }
                    }
                }
            ],
            "description": "Defines if service running as hub or spoke Also defines all the common properties for the multiple L2VpnSessions associated with this service.",
            "title": "L2VPN Service"
        },
        "AggregateRequest": {
            "x-vmw-nsx-module": "Search",
            "allOf": [
                {
                    "$ref": "#/definitions/IncludedFieldsParameters"
                },
                {
                    "required": [
                        "resource_type"
                    ],
                    "x-vmw-nsx-module": "Search",
                    "type": "object",
                    "properties": {
                        "alias": {
                            "type": "string",
                            "description": "Alias for the response",
                            "title": "Alias"
                        },
                        "filters": {
                            "items": {
                                "$ref": "#/definitions/FilterRequest"
                            },
                            "type": "array",
                            "description": "An array of filter conditions",
                            "title": "Filter conditions"
                        },
                        "resource_type": {
                            "type": "string",
                            "description": "Resource type name",
                            "title": "Resource Type"
                        }
                    }
                }
            ],
            "description": "Common request parameters for the primary/related types",
            "title": "Aggregate request"
        },
        "NodeNameServersProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "required": [
                        "name_servers"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "name_servers": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Name servers",
                            "maxItems": 3,
                            "title": "Name servers"
                        }
                    }
                }
            ],
            "description": "Node network name servers properties",
            "title": "Node network name servers properties"
        },
        "AppDiscoveryAppProfileResultSummary": {
            "x-vmw-nsx-module": "AppDiscovery",
            "type": "object",
            "description": "Contains the application discovery result summary of the App Profile\n",
            "properties": {
                "app_profile_id": {
                    "type": "string",
                    "description": "ID of the App Profile",
                    "title": "ID of the App Profile"
                },
                "display_name": {
                    "type": "string",
                    "description": "Name of the App Profile",
                    "title": "Name of the App Profile"
                },
                "installed_apps_count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of apps installed that belongs to this App Profile",
                    "title": "Number of apps installed that belongs to this App Profile"
                }
            },
            "title": "Application discovery result summary of an App Profile"
        },
        "StandardHostSwitch": {
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "description": "Standard host switch specification",
            "properties": {
                "pnics": {
                    "items": {
                        "$ref": "#/definitions/Pnic"
                    },
                    "type": "array",
                    "description": "Physical NICs connected to the host switch",
                    "title": "Physical NICs connected to the host switch"
                },
                "host_switch_name": {
                    "default": "nsxDefaultHostSwitch",
                    "type": "string",
                    "description": "If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given transport node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.",
                    "title": "host switch name. This name will be used to reference this host switch."
                },
                "ip_assignment_spec": {
                    "readOnly": false,
                    "title": "Specification for IPs to be used with host switch virtual tunnel endpoints",
                    "description": "IPs can come from either a static IP pool or an explicitly specified IP list or DHCP. In case a list of IP is specified, the number of IPs provided should be sufficient as per teaming policy associated with host switch uplink profile.",
                    "$ref": "#/definitions/IpAssignmentSpec"
                },
                "cpu_config": {
                    "items": {
                        "$ref": "#/definitions/CpuCoreConfigForEnhancedNetworkingStackSwitch"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "CPU configuration specifies number of Logical cpu cores (Lcores) per Non Uniform Memory Access (NUMA) node dedicated to Enhanced Networking Stack enabled HostSwitch to get the best performance.",
                    "title": "Enhanced Networking Stack enabled HostSwitch CPU configuration"
                },
                "host_switch_profile_ids": {
                    "items": {
                        "$ref": "#/definitions/HostSwitchProfileTypeIdEntry"
                    },
                    "type": "array",
                    "description": "host switch profiles bound to this host switch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the transport node, the corresponding default profile will be bound to the host switch.",
                    "title": "Identifiers of host switch profiles to be associated with this host switch."
                }
            },
            "title": "Standard host switch specification"
        },
        "PBRRuleListResult": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/PBRRule"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "PBR rule list result with pagination support.",
                            "title": "PBR rule list result"
                        }
                    }
                }
            ]
        },
        "PortConnectionRouter": {
            "x-vmw-nsx-module": "PortConnection",
            "allOf": [
                {
                    "$ref": "#/definitions/PortConnectionEntity"
                },
                {
                    "x-vmw-nsx-module": "PortConnection",
                    "type": "object",
                    "properties": {
                        "uplink_ports": {
                            "items": {
                                "$ref": "#/definitions/LogicalRouterPort"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Uplink ports of the Logical Router.",
                            "title": "Uplink ports of the Logical Router."
                        },
                        "downlink_ports": {
                            "items": {
                                "$ref": "#/definitions/LogicalRouterPort"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Downlink ports of the Logical Router.",
                            "title": "Downlink ports of the Logical Router."
                        }
                    }
                }
            ],
            "description": "Port Connection Logical Router Entity",
            "title": "Port Connection Logical Router Entity"
        },
        "BatchRequest": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "A set of operations to be performed in a single batch",
            "properties": {
                "requests": {
                    "items": {
                        "$ref": "#/definitions/BatchRequestItem"
                    },
                    "type": "array"
                },
                "continue_on_error": {
                    "default": true,
                    "type": "boolean",
                    "description": "Flag to decide if we will continue processing subsequent requests in case of current error for atomic = false."
                }
            },
            "title": "A set of operations to be performed in a single batch"
        },
        "ServiceDeploymentSpec": {
            "description": "ServiceDeployment Spec consists of information required to deploy and configure the partner appliances. viz. Deployment template, deployment spec and NIC metatdata.",
            "title": "Service Deployment Specification.",
            "required": [
                "deployment_template"
            ],
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "type": "object",
            "properties": {
                "deployment_specs": {
                    "description": "Deployment Specs holds information required to deploy the Service-VMs. i.e. OVF url where the partner Service-VM OVF is hosted. The host type on which the OVF can be deployed, Form factor to name a few.",
                    "title": "Service Deployment Spec List",
                    "items": {
                        "$ref": "#/definitions/SVMDeploymentSpec"
                    },
                    "readOnly": false,
                    "maxItems": 128,
                    "type": "array"
                },
                "nic_metadata_list": {
                    "items": {
                        "$ref": "#/definitions/NicMetadata"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "NIC metadata associated with the deployment spec.",
                    "title": "NIC Metadata"
                },
                "deployment_template": {
                    "items": {
                        "$ref": "#/definitions/DeploymentTemplate"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "Deployment Template holds the attributes specific to partner for which the service is created. These attributes are opaque to NSX Manager.",
                    "title": "Service Deployment Template"
                }
            }
        },
        "EtherTypeNSService": {
            "x-vmw-nsx-module": "Types",
            "allOf": [
                {
                    "$ref": "#/definitions/NSServiceElement"
                },
                {
                    "required": [
                        "ether_type"
                    ],
                    "x-vmw-nsx-module": "Types",
                    "type": "object",
                    "properties": {
                        "ether_type": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Type of the encapsulated protocol",
                            "title": "Type of the encapsulated protocol"
                        }
                    }
                }
            ],
            "description": "An NSService element that represents an ethertype protocol",
            "title": "An NSService element that represents an ethertype protocol"
        },
        "LbHttpRequestBodyCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "body_value"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "body_value": {
                            "type": "string",
                            "description": "HTTP request body",
                            "title": "HTTP request body"
                        },
                        "match_type": {
                            "description": "Match type of HTTP body",
                            "default": "REGEX",
                            "enum": [
                                "STARTS_WITH",
                                "ENDS_WITH",
                                "EQUALS",
                                "CONTAINS",
                                "REGEX"
                            ],
                            "type": "string"
                        },
                        "case_sensitive": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, case is significant when comparing HTTP body value.\n",
                            "title": "A case sensitive flag for HTTP body comparing"
                        }
                    }
                }
            ],
            "description": "This condition is used to match the message body of an HTTP request.\nTypically, only HTTP POST, PATCH, or PUT requests have request body.\nThe match_type field defines how body_value field is used to match the body\nof HTTP requests.\n",
            "title": "Condition to match content of HTTP request message body"
        },
        "KeyValue": {
            "x-vmw-nsx-module": "CertificateManager",
            "required": [
                "value",
                "key"
            ],
            "type": "object",
            "properties": {
                "value": {
                    "readOnly": false,
                    "type": "string",
                    "description": "key value"
                },
                "key": {
                    "readOnly": false,
                    "type": "string",
                    "description": "key name"
                }
            }
        },
        "LbVirtualServer": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "application_profile_id",
                        "ip_address"
                    ],
                    "type": "object",
                    "properties": {
                        "ip_protocol": {
                            "description": "Assigned Internet Protocol in IP header, TCP, UDP are supported.\n",
                            "default": "TCP",
                            "enum": [
                                "TCP",
                                "UDP"
                            ],
                            "type": "string"
                        },
                        "server_tcp_profile_id": {
                            "type": "string",
                            "description": "Only L7 virtual server could be configured with customized server\nside TCP profile.\n",
                            "title": "Identifier of server side TCP profile"
                        },
                        "sorry_pool_id": {
                            "type": "string",
                            "description": "When load balancer can not select a backend server to serve the\nrequest in default pool or pool in rules, the request would be served\nby sorry server pool.\n",
                            "title": "Identifier of sorry server pool"
                        },
                        "port": {
                            "description": "This is a deprecated property, please use 'ports' instead.\nPort setting could be single port for both L7 mode and L4 mode.\nFor L4 mode, a single port range is also supported.\nThe port setting could be a single port or port range such as\n\"80\", \"1234-1236\".\nIf port is configured and ports are not specified, both port and\nports in response payload would return the same port value.\nIf both port and ports are configured, ports setting would take effect\nwith higher priority.\n",
                            "format": "port-or-range",
                            "x-deprecated": true,
                            "type": "string"
                        },
                        "server_ssl_profile_binding": {
                            "title": "Pool side SSL binding setting",
                            "description": "The setting is used when load balancer acts as an SSL client and\nestablishing a connection to the backend server.\n",
                            "$ref": "#/definitions/ServerSslProfileBinding"
                        },
                        "pool_id": {
                            "type": "string",
                            "description": "The server pool(LbPool) contains backend servers. Server pool\nconsists of one or more servers, also referred to as pool members, that\nare similarly configured and are running the same application.\n",
                            "title": "default server pool identifier"
                        },
                        "client_tcp_profile_id": {
                            "type": "string",
                            "description": "Only L7 virtual server could be configured with customized client\nside TCP profile.\n",
                            "title": "Identifier of client side TCP profile"
                        },
                        "default_pool_member_port": {
                            "description": "This is a deprecated property, please use 'default_pool_member_ports'\ninstead.\nIf default_pool_member_port is configured and default_pool_member_ports\nare not specified, both default_pool_member_port\nand default_pool_member_ports in response payload would return the same\nport value.\nIf both are specified, default_pool_member_ports setting would take\neffect with higher priority.\n",
                            "format": "port-or-range",
                            "x-deprecated": true,
                            "type": "string"
                        },
                        "access_log_enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "Whether access log is enabled",
                            "title": "Whether access log is enabled"
                        },
                        "application_profile_id": {
                            "type": "string",
                            "description": "The application profile defines the application protocol characteristics.\nIt is used to influence how load balancing is performed. Currently,\nLbFastTCPProfile, LbFastUDPProfile and\nLbHttpProfile, etc are supported.\n",
                            "title": "application profile identifier"
                        },
                        "max_concurrent_connections": {
                            "description": "To ensure one virtual server does not over consume resources,\naffecting other applications hosted on the same LBS, connections\nto a virtual server can be capped.\nIf it is not specified, it means that connections are unlimited.\n",
                            "format": "int64",
                            "title": "maximum concurrent connection number",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "rule_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Load balancer rules allow customization of load balancing behavior using\nmatch/action rules. Currently, load balancer rules are supported for\nonly layer 7 virtual servers with LbHttpProfile.\n",
                            "maxItems": 512,
                            "title": "List of load balancer rule identifiers"
                        },
                        "max_new_connection_rate": {
                            "description": "To ensure one virtual server does not over consume resources,\nconnections to a member can be rate limited.\nIf it is not specified, it means that connection rate is unlimited.\n",
                            "format": "int64",
                            "title": "maximum new connection rate in second",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "persistence_profile_id": {
                            "type": "string",
                            "description": "Persistence profile is used to allow related client connections to be\nsent to the same backend server.\n",
                            "title": "persistence profile identifier"
                        },
                        "client_ssl_profile_binding": {
                            "title": "Virtual server side SSL binding setting",
                            "description": "The setting is used when load balancer acts as an SSL server and\nterminating the client SSL connection\n",
                            "$ref": "#/definitions/ClientSslProfileBinding"
                        },
                        "default_pool_member_ports": {
                            "items": {
                                "description": "Examples- Single port \"8080\", Range of ports \"8090-8095\"\n",
                                "format": "port-or-range",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "If default_pool_member_ports are configured, both\ndefault_pool_member_port and default_pool_member_ports in the response\npayload would include port settings, notice that the value of\ndefault_pool_member_port is the first element of\ndefault_pool_member_ports.\n",
                            "maxItems": 14,
                            "title": "Default pool member ports when member port is not defined."
                        },
                        "ip_address": {
                            "description": "virtual server IP address",
                            "format": "ip",
                            "type": "string"
                        },
                        "ports": {
                            "items": {
                                "description": "Examples- Single port \"8080\", Range of ports \"8090-8095\"\n",
                                "format": "port-or-range",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Port setting could be a single port for both L7 mode and L4 mode.\nFor L4 mode, multiple ports or port ranges are also supported such\nas \"80\", \"443\", \"1234-1236\".\nIf ports is configured, both port and ports in the response payload\nwould include port settings, notice that the port field value is the\nfirst element of ports.\n",
                            "maxItems": 14,
                            "title": "Virtual server ports or port ranges"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "whether the virtual server is enabled",
                            "title": "whether the virtual server is enabled"
                        }
                    }
                }
            ]
        },
        "BgpNeighborListResult": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/BgpNeighbor"
                            },
                            "type": "array",
                            "description": "Paginated list of bgp neighbors",
                            "title": "Paginated list of bgp neighbors"
                        }
                    }
                }
            ]
        },
        "Traceflow": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "operation_state": {
                            "readOnly": true,
                            "enum": [
                                "IN_PROGRESS",
                                "FINISHED",
                                "FAILED"
                            ],
                            "type": "string",
                            "description": "Represents the traceflow operation state",
                            "title": "Represents the traceflow operation state"
                        },
                        "logical_counters": {
                            "readOnly": true,
                            "title": "counters of observations from logical components",
                            "description": "counters of observations from logical components",
                            "$ref": "#/definitions/TraceflowObservationCounters"
                        },
                        "timeout": {
                            "description": "Maximum time (in ms) the management plane will be waiting for this traceflow round.",
                            "title": "Timeout (in ms) for traceflow observations result list",
                            "format": "int64",
                            "maximum": 15000,
                            "readOnly": true,
                            "minimum": 5000,
                            "type": "integer"
                        },
                        "result_overflowed": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "A flag, when set true, indicates some observations were deleted from the result set.",
                            "title": "A flag, when set true, indicates some observations were deleted from the result set."
                        },
                        "lport_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "id of the source logical port used for injecting the traceflow packet",
                            "title": "id of the source logical port used for injecting the traceflow packet"
                        },
                        "counters": {
                            "readOnly": true,
                            "title": "observation counters",
                            "description": "observation counters",
                            "$ref": "#/definitions/TraceflowObservationCounters"
                        },
                        "request_status": {
                            "readOnly": true,
                            "enum": [
                                "SUCCESS",
                                "TIMEOUT",
                                "SOURCE_PORT_NOT_FOUND",
                                "DATA_PATH_NOT_READY",
                                "CONNECTION_ERROR"
                            ],
                            "type": "string",
                            "description": "The status of the traceflow RPC request. SUCCESS - The traceflow request is sent successfully. TIMEOUT - The traceflow request gets timeout. SOURCE_PORT_NOT_FOUND - The source port of the request is not found. DATA_PATH_NOT_READY - The datapath component is not ready to receive request. CONNECTION_ERROR - There is connection error on datapath component.",
                            "title": "Traceflow request status"
                        },
                        "analysis": {
                            "items": {
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Traceflow result analysis notes",
                            "title": "Traceflow result analysis notes"
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the traceflow round",
                            "title": "The id of the traceflow round"
                        }
                    }
                }
            ]
        },
        "VidmInfoListResult": {
            "x-vmw-nsx-module": "AAA",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AAA",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/VidmInfo"
                            },
                            "type": "array",
                            "description": "List results",
                            "title": "List results"
                        }
                    }
                }
            ]
        },
        "NicInfo": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "type": "object",
            "description": "Information of a network interface present on the partner appliance that needs to be configured by the NSX Manager.",
            "properties": {
                "network_id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Network Id associated with the NIC metadata.",
                    "title": "Network Id"
                },
                "subnet_mask": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Subnet mask associated with the NIC metadata.",
                    "title": "Subnet mask"
                },
                "ip_address": {
                    "readOnly": false,
                    "type": "string",
                    "description": "IP address associated with the NIC metadata.",
                    "title": "IP address"
                },
                "nic_metadata": {
                    "readOnly": true,
                    "title": "NIC metadata",
                    "description": "NIC metadata information.",
                    "$ref": "#/definitions/NicMetadata"
                },
                "gateway_address": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Gateway address associated with the NIC metadata.",
                    "title": "Gateway address"
                }
            },
            "title": "NIC information"
        },
        "BgpNeighbor": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "required": [
                        "neighbor_address"
                    ],
                    "type": "object",
                    "properties": {
                        "filter_in_ipprefixlist_id": {
                            "type": "string",
                            "description": "This is a deprecated property, Please  use 'address_family' instead.",
                            "x-deprecated": true,
                            "title": "IPPrefix List to be used for IN direction filter for IPV4_UNICAST address family"
                        },
                        "neighbor_address": {
                            "description": "Neighbor IP Address",
                            "format": "ipv4",
                            "type": "string"
                        },
                        "remote_as": {
                            "description": "This is a deprecated property, Please use 'remote_as_num' instead.",
                            "title": "Autonomous System Number of the neighbor",
                            "format": "int64",
                            "maximum": 4294967296,
                            "x-deprecated": true,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "filter_out_ipprefixlist_id": {
                            "type": "string",
                            "description": "This is a deprecated property, Please use 'address_family' instead.",
                            "x-deprecated": true,
                            "title": "IPPrefixList to be used for OUT direction filter for IPV4_UNICAST address family"
                        },
                        "hold_down_timer": {
                            "description": "Wait period (seconds) before declaring peer dead",
                            "title": "Wait period (seconds) before declaring peer dead",
                            "default": 180,
                            "format": "int64",
                            "maximum": 65535,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "maximum_hop_limit": {
                            "description": "This value is set on TTL(time to live) of BGP header.\nWhen router receives the BGP packet, it decrements the TTL. The default\nvalue of TTL is one when BPG request is initiated.So in the case of a\nBGP peer multiple hops away and and value of TTL is one, then  next\nrouter in the path will decrement the TTL to 0, realize it cant forward\nthe packet and will drop it. If the hop count value to reach neighbor\nis equal to or less than the maximum_hop_limit value then intermediate\nrouter decrements the TTL count by one and forwards the request to\nBGP neighour. If the hop count value is greater than the maximum_hop_limit\nvalue then intermediate router discards the request when TTL becomes 0.\n",
                            "title": "Maximum Number of hops allowed to reach BGP neighbor",
                            "default": 1,
                            "format": "int32",
                            "maximum": 255,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "Flag to enable this BGP Neighbor",
                            "title": "Flag to enable this BGP Neighbor"
                        },
                        "bfd_config": {
                            "title": "BFD Configuration Parameters for the given peer.",
                            "description": "By specifying these paramaters BFD config for this given peer can be overriden | (the globally configured values will not apply for this peer)",
                            "$ref": "#/definitions/BfdConfigParameters"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "remote_as_num": {
                            "type": "string",
                            "description": "4 Byte ASN of the neighbor in ASPLAIN/ASDOT Format",
                            "title": "4 Byte ASN of the neighbor in ASPLAIN/ASDOT Format"
                        },
                        "filter_out_routemap_id": {
                            "type": "string",
                            "description": "This is a deprecated property, Please use 'address_family' instead.",
                            "x-deprecated": true,
                            "title": "RouteMap to be used for OUT direction filter for IPV4_UNICAST address family"
                        },
                        "filter_in_routemap_id": {
                            "type": "string",
                            "description": "This is a deprecated property, Please use 'address_family' instead.",
                            "x-deprecated": true,
                            "title": "RouteMap to be used for IN direction filter for IPV4_UNICAST address family"
                        },
                        "keep_alive_timer": {
                            "description": "Frequency (seconds) with which keep alive messages are sent to peers",
                            "title": "Frequency (seconds) with which keep alive messages are sent to peers",
                            "default": 60,
                            "format": "int64",
                            "maximum": 65535,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "password": {
                            "minLength": 1,
                            "type": "string",
                            "description": "User can create (POST) the neighbor with or without the password.\nThe view (GET) on the neighbor, would never reveal if the password is set or not.\nThe password can be set later using edit neighbor workFlow (PUT)\nOn the edit neighbor (PUT), if the user does not specify the password property, the\nolder value is retained. Maximum length of this field is 20 characters.\n",
                            "title": "Password"
                        },
                        "source_address": {
                            "description": "Deprecated - do not provide a value for this field. Use source_addresses instead.",
                            "format": "ipv4",
                            "x-deprecated": true,
                            "type": "string"
                        },
                        "source_addresses": {
                            "items": {
                                "description": "IPv4 address",
                                "format": "ipv4",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "BGP neighborship will be formed from all these source addresses to this neighbour.",
                            "maxItems": 8,
                            "title": "Array of Logical Router Uplink IP Addresses"
                        },
                        "enable_bfd": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to enable BFD for this BGP Neighbor. Enable this if the neighbor supports BFD as this will lead to faster convergence.",
                            "title": "Enable BFD for this BGP Neighbor"
                        },
                        "address_families": {
                            "items": {
                                "$ref": "#/definitions/BgpNeighborAddressFamily"
                            },
                            "type": "array",
                            "description": "User can enable the neighbor for the specific address families and also define filters per address family.\nWhen the neighbor is created, it is default enabled for IPV4_UNICAST address family for backward compatibility reasons.\nUser can change that if required, by defining the address family configuration.\n",
                            "title": "AddressFamily settings for the neighbor"
                        }
                    }
                }
            ]
        },
        "TransportNodeStatusListResult": {
            "x-vmw-nsx-module": "Heatmap",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Heatmap",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/TransportNodeStatus"
                            },
                            "type": "array",
                            "description": "List of transport node statuses",
                            "title": "List of transport node statuses"
                        }
                    }
                }
            ]
        },
        "DhcpServerStatus": {
            "x-vmw-nsx-module": "AggSvcDhcp",
            "required": [
                "service_status",
                "active_node"
            ],
            "type": "object",
            "properties": {
                "error_message": {
                    "type": "string",
                    "description": "Error message, if available",
                    "title": "Error message, if available"
                },
                "service_status": {
                    "enum": [
                        "UP",
                        "DOWN",
                        "ERROR",
                        "NO_STANDBY"
                    ],
                    "type": "string",
                    "description": "UP means the dhcp service is working fine on both active transport-node\nand stand-by transport-node (if have), hence fail-over can work at this\ntime if there is failure happens on one of the transport-node;\nDOWN means the dhcp service is down on both active transport-node and\nstand-by node (if have), hence the dhcp-service will not repsonse any\ndhcp request;\nError means error happens on transport-node(s) or no status is reported from\ntransport-node(s). The dhcp service may be working (or not working);\nNO_STANDBY means dhcp service is working in one of the transport node while\nnot in the other transport-node (if have). Hence if the dhcp service in\nthe working transport-node is down, fail-over will not happen and the\ndhcp service will go down.\n"
                },
                "stand_by_node": {
                    "type": "string",
                    "description": "uuid of stand_by transport node. null if non-HA mode",
                    "title": "uuid of stand_by transport node. null if non-HA mode"
                },
                "active_node": {
                    "type": "string",
                    "description": "uuid of active transport node",
                    "title": "uuid of active transport node"
                }
            }
        },
        "MacPoolListResult": {
            "x-vmw-nsx-module": "MACAM",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "MACAM",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MacPool"
                            },
                            "type": "array",
                            "description": "MAC pool list results",
                            "title": "MAC pool list results"
                        }
                    }
                }
            ]
        },
        "IpfixCollectorUpmProfileListResult": {
            "x-vmw-nsx-module": "UpmIpfixCollector",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "UpmIpfixCollector",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IpfixCollectorUpmProfile"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "IPFIX Collector Profile List",
                            "title": "IPFIX Collector Profile List"
                        }
                    }
                }
            ],
            "description": "IPFIX collector profile list result for query with profile list parameters\n",
            "title": "List of IPFIX Collector Profiles"
        },
        "SIDataCounter": {
            "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
            "required": [
                "total"
            ],
            "type": "object",
            "properties": {
                "total": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total packets or bytes",
                    "title": "The total packets or bytes"
                },
                "multicast_broadcast": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The multicast and broadcast packets or bytes",
                    "title": "The multicast and broadcast packets or bytes"
                },
                "dropped": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The dropped packets or bytes",
                    "title": "The dropped packets or bytes"
                }
            }
        },
        "FeaturePermission": {
            "x-vmw-nsx-module": "AAA",
            "type": "object",
            "description": "Feature Permission",
            "properties": {
                "feature": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Feature Name",
                    "title": "Feature Name"
                },
                "permission": {
                    "readOnly": true,
                    "enum": [
                        "crud",
                        "read",
                        "execute",
                        "none"
                    ],
                    "type": "string",
                    "description": "Permission",
                    "title": "Permission"
                }
            },
            "title": "Feature Permission"
        },
        "TelemetrySchedule": {
            "description": "Abstract base type for telemetry schedule configuration",
            "title": "Abstract base type for telemetry schedule configuration",
            "required": [
                "frequency_type"
            ],
            "discriminator": "frequency_type",
            "x-vmw-nsx-module": "TelemetryConfig",
            "type": "object",
            "properties": {
                "frequency_type": {
                    "type": "string",
                    "description": "Specify one of DailyTelemetrySchedule, WeeklyTelemetrySchedule, or MonthlyTelemetrySchedule.",
                    "title": "Frequency at which data will be collected"
                }
            }
        },
        "TransportZoneListResult": {
            "x-vmw-nsx-module": "TransportZone",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "TransportZone",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/TransportZone"
                            },
                            "type": "array",
                            "description": "Transport Zone Results",
                            "title": "Transport Zone Results"
                        }
                    }
                }
            ],
            "description": "Transport zone queries result",
            "title": "Transport zone queries result"
        },
        "TransportZoneProfileTypeIdEntry": {
            "x-vmw-nsx-module": "TransportZoneProfile",
            "required": [
                "profile_id"
            ],
            "type": "object",
            "properties": {
                "profile_id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "profile id of the resource type"
                },
                "resource_type": {
                    "description": "Selects the type of the transport zone profile",
                    "enum": [
                        "BfdHealthMonitoringProfile"
                    ],
                    "type": "string"
                }
            }
        },
        "RedistributionRule": {
            "x-vmw-nsx-module": "Routing",
            "required": [
                "sources",
                "destination"
            ],
            "type": "object",
            "properties": {
                "sources": {
                    "items": {
                        "description": "Types of route to redistribute over routing protocols.\nSTATIC type should be used to redistribute user added static\nroutes.\nNSX_CONNECTED type should be used to redistribute downlink port\nsubnets.\nNSX_STATIC type should be used to redistribute nsx-connected and\nstatic routes advertised by TIER1 logical router.\nTIER0_NAT type should be used to redistribute NAT IPs owned by\nTIER0 logical router.\nTIER1_NAT type should be used to redistribute NAT IPs advertised\nby TIER1 logical router.\nTIER1_LB_VIP type should be used to redistribute LB VIP IPs\nadvertised by TIER1 logical router.\nTIER1_LB_SNAT type should be used to redistribute LB SNAT IPs\nadvertised by TIER1 logical router.\nBGP type should be used to redistribute routes learned via BGP.\n",
                        "enum": [
                            "STATIC",
                            "NSX_CONNECTED",
                            "NSX_STATIC",
                            "TIER0_NAT",
                            "TIER1_NAT",
                            "TIER1_LB_VIP",
                            "TIER1_LB_SNAT",
                            "BGP"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Array of redistribution protocols",
                    "title": "Array of redistribution protocols"
                },
                "destination": {
                    "description": "Destination redistribution protocol",
                    "enum": [
                        "STATIC",
                        "NSX_CONNECTED",
                        "NSX_STATIC",
                        "TIER0_NAT",
                        "TIER1_NAT",
                        "TIER1_LB_VIP",
                        "TIER1_LB_SNAT",
                        "BGP"
                    ],
                    "type": "string"
                },
                "route_map_id": {
                    "type": "string",
                    "description": "RouteMap Id for the filter",
                    "title": "RouteMap Id for the filter"
                },
                "description": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Description",
                    "title": "Description"
                },
                "display_name": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "Display name",
                    "title": "Display name"
                }
            }
        },
        "RouteMapSequenceMatch": {
            "x-vmw-nsx-module": "Routing",
            "type": "object",
            "description": "Match sequence in route map which is used for matching routes.\nIP prefix lists and match community expression are mutually\nexclusive fields, one of them must be provided.\n",
            "properties": {
                "match_community_expression": {
                    "title": "Expression to match BGP communities",
                    "description": "It supports conjunction operator (AND) and five\noperators within singular community match expression\n(MATCH_ANY, MATCH_ALL, MATCH_EXACT, MATCH_NONE,\nMATCH_REGEX).\n",
                    "$ref": "#/definitions/CommunityMatchExpression"
                },
                "ip_prefix_lists": {
                    "description": "IPPrefixList Identifiers for RouteMap Sequence Match Criteria",
                    "title": "IPPrefixList Identifiers for RouteMap Sequence Match Criteria",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "maxItems": 500,
                    "type": "array"
                }
            }
        },
        "LbHttpProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbAppProfile"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "response_timeout": {
                            "description": "If server doesn't send any packet within this time, the connection is closed.\n",
                            "title": "Maximum server idle time in seconds",
                            "default": 60,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "idle_timeout": {
                            "description": "It is used to specify the HTTP application idle timeout, it means that\nhow long the load balancer will keep the connection idle to wait for\nthe client to send the next keep-alive request. It is not a TCP socket\nsetting.\n",
                            "title": "HTTP application idle timeout in seconds",
                            "default": 15,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "request_body_size": {
                            "description": "If it is not specified, it means that request body size is unlimited.\n",
                            "format": "int64",
                            "title": "Maximum size of the buffer used to store HTTP request body",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "ntlm": {
                            "default": false,
                            "type": "boolean",
                            "description": "NTLM is an authentication protocol that can be used over HTTP. If the\nflag is set to true, LB will use NTLM challenge/response methodology.\n",
                            "title": "NTLM support flag"
                        },
                        "request_header_size": {
                            "description": "A request with header larger than request_header_size will be processed\nas best effort whereas a request with header below this specified size\nis guaranteed to be processed.\n",
                            "title": "Maximum size of the buffer used to store HTTP request headers",
                            "default": 1024,
                            "format": "int64",
                            "maximum": 65536,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "http_redirect_to": {
                            "type": "string",
                            "description": "If a website is temporarily down or has moved, incoming requests\nfor that virtual server can be temporarily redirected to a URL\n",
                            "title": "http redirect static URL"
                        },
                        "x_forwarded_for": {
                            "description": "insert or replace x_forwarded_for",
                            "enum": [
                                "INSERT",
                                "REPLACE"
                            ],
                            "type": "string"
                        },
                        "http_redirect_to_https": {
                            "default": false,
                            "type": "boolean",
                            "description": "Certain secure applications may want to force communication over SSL,\nbut instead of rejecting non-SSL connections, they may choose to\nredirect the client automatically to use SSL.\n",
                            "title": "flag to indicate whether enable HTTP-HTTPS redirect"
                        }
                    }
                }
            ]
        },
        "InstanceRuntime": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
                    "type": "object",
                    "properties": {
                        "service_vm_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Service-VM/SVM id of deployed virtual-machine.",
                            "title": "Service VM id"
                        },
                        "runtime_status": {
                            "readOnly": true,
                            "enum": [
                                "IN_SERVICE",
                                "OUT_OF_SERVICE",
                                "NEEDS_ATTENTION",
                                "NOT_AVAILABLE"
                            ],
                            "type": "string",
                            "description": "Service-Instance Runtime status of the deployed Service-VM.",
                            "title": "Instance Runtime Status"
                        },
                        "vm_nic_info": {
                            "readOnly": true,
                            "title": "VM NIC info",
                            "description": "VM NIC info",
                            "$ref": "#/definitions/VmNicInfo"
                        },
                        "error_message": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Error message for the Service Instance Runtime if any.",
                            "title": "Error Message"
                        },
                        "service_instance_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Id of an instantiation of a registered service.",
                            "title": "Service instance id"
                        },
                        "deployment_status": {
                            "readOnly": true,
                            "enum": [
                                "DEPLOYMENT_IN_PROGRESS",
                                "DEPLOYMENT_FAILED",
                                "DEPLOYMENT_SUCCESSFUL",
                                "UPGRADE_IN_PROGRESS",
                                "UPGRADE_FAILED",
                                "UNDEPLOYMENT_IN_PROGRESS",
                                "UNDEPLOYMENT_FAILED",
                                "UNDEPLOYMENT_SUCCESSFUL",
                                "UNKNOWN"
                            ],
                            "type": "string",
                            "description": "Service-Instance Runtime deployment status of the Service-VM. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment of VM.",
                            "title": "Instance Runtime deployment status"
                        }
                    }
                }
            ],
            "description": "A Service Runtime is the runtime entity associated with ever Service-VM deployed.",
            "title": "Runtime of a Service-Instance."
        },
        "LbSslProfileListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbSslProfile"
                            },
                            "type": "array",
                            "description": "paginated list of load balancer SSL profiles",
                            "title": "paginated list of load balancer SSL profiles"
                        }
                    }
                }
            ]
        },
        "ServiceInsertionRuleListResult": {
            "x-vmw-nsx-module": "ServiceInsertionRules",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertionRules",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ServiceInsertionRule"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "ServiceInsertion rule list result with pagination support.",
                            "title": "ServiceInsertion rule list result"
                        }
                    }
                }
            ],
            "description": "List of ServiceInsertion Rules.",
            "title": "ServiceInsertion Section RuleList"
        },
        "ServiceInsertionSectionRuleList": {
            "x-vmw-nsx-module": "ServiceInsertionRules",
            "allOf": [
                {
                    "$ref": "#/definitions/ServiceInsertionSection"
                },
                {
                    "required": [
                        "rules"
                    ],
                    "x-vmw-nsx-module": "ServiceInsertionRules",
                    "type": "object",
                    "properties": {
                        "rules": {
                            "description": "List of Service Insertion rules in the section. Only homogeneous rules are supported.",
                            "title": "List of the Service Insertion rules",
                            "items": {
                                "$ref": "#/definitions/ServiceInsertionRule"
                            },
                            "readOnly": false,
                            "maxItems": 1000,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "List of ServiceInsertion Rules.",
            "title": "ServiceInsertion Section RuleList"
        },
        "LbMonitor": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "resource_type": {
                            "description": "Load balancers monitor the health of backend servers to ensure traffic\nis not black holed.\nThere are two types of healthchecks: active and passive.\nPassive healthchecks depend on failures in actual client traffic (e.g. RST\nfrom server in response to a client connection) to detect that the server\nor the application is down.\nIn case of active healthchecks, load balancer itself initiates new\nconnections (or sends ICMP ping) to the servers periodically to check their\nhealth, completely independent of any data traffic.\nCurrently, active health monitors are supported for HTTP, HTTPS, TCP, UDP\nand ICMP protocols.\n",
                            "enum": [
                                "LbHttpMonitor",
                                "LbHttpsMonitor",
                                "LbIcmpMonitor",
                                "LbTcpMonitor",
                                "LbUdpMonitor",
                                "LbPassiveMonitor"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "TrunkVlanRange": {
            "description": "Trunk VLAN id range",
            "title": "Trunk VLAN id range",
            "required": [
                "start",
                "end"
            ],
            "x-vmw-nsx-module": "LogicalSwitch",
            "type": "object",
            "properties": {
                "start": {
                    "type": "integer",
                    "description": "Virtual Local Area Network Identifier",
                    "format": "int64"
                },
                "end": {
                    "type": "integer",
                    "description": "Virtual Local Area Network Identifier",
                    "format": "int64"
                }
            }
        },
        "NodeLogProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "last_modified_time": {
                            "description": "Last modified time expressed in milliseconds since epoch",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "log_size": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Size of log file in bytes",
                            "title": "Size of log file in bytes"
                        },
                        "log_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Name of log file",
                            "title": "Name of log file"
                        }
                    }
                }
            ],
            "description": "Node log properties",
            "title": "Node log properties"
        },
        "IPSecVPNTransportStatus": {
            "x-vmw-nsx-module": "L2VPNStatistics",
            "allOf": [
                {
                    "$ref": "#/definitions/L2VPNTransportTunnelStatus"
                },
                {
                    "x-vmw-nsx-module": "L2VPNStatistics",
                    "type": "object",
                    "properties": {
                        "status": {
                            "readOnly": true,
                            "title": "IPSec vpn session status",
                            "description": "VPN session status provides IKE session status and aggregate of traffic across all tunnel.",
                            "$ref": "#/definitions/IPSecVPNSessionStatus"
                        }
                    }
                }
            ],
            "description": "Provides IPSec VPN session status.",
            "title": "VPN Session status"
        },
        "SavedSearch": {
            "x-vmw-nsx-module": "Search",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Search",
                    "required": [
                        "query",
                        "is_saved"
                    ],
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query that is to be saved.",
                            "title": "Search string"
                        },
                        "is_saved": {
                            "type": "boolean",
                            "description": "The flag indicates whether the saved query is saved search or recent search.",
                            "title": "Flag"
                        }
                    }
                }
            ]
        },
        "TransportZoneEndPoint": {
            "description": "Specify which HostSwitch from this TransportNode is used handle traffic for given TransportZone",
            "title": "This object associates TransportNode to a certain TransportZone",
            "required": [
                "transport_zone_id"
            ],
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "properties": {
                "transport_zone_id": {
                    "type": "string",
                    "description": "Unique ID identifying the transport zone for this endpoint",
                    "title": "Unique ID identifying the transport zone for this endpoint"
                },
                "transport_zone_profile_ids": {
                    "items": {
                        "$ref": "#/definitions/TransportZoneProfileTypeIdEntry"
                    },
                    "type": "array",
                    "description": "Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node.",
                    "title": "Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node."
                }
            }
        },
        "MigrationUnitTypeStatsList": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "results": {
                    "items": {
                        "$ref": "#/definitions/MigrationUnitTypeStats"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "List of migration unit type stats",
                    "title": "List of migration unit type stats"
                }
            }
        },
        "LbIpHeaderCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "source_address"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "source_address": {
                            "description": "Source IP address of HTTP message",
                            "format": "address-or-block-or-range",
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "This condition is used to match IP header fields of HTTP messages.\nCurrently, only the source IP address is supported. IP addresses can be\nexpressed as a single IP address like 10.1.1.1, or a range of IP addresses\nlike 10.1.1.101-10.1.1.160. Both IPv4 and IPv6 addresses are supported.\n",
            "title": "Condition to match IP header fields"
        },
        "NodeSyslogExporterProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "required": [
                        "server",
                        "protocol",
                        "exporter_name",
                        "level"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "port": {
                            "description": "Port to export to",
                            "title": "Port to export to",
                            "default": 514,
                            "format": "int64",
                            "maximum": 65535,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "facilities": {
                            "items": {
                                "description": "Syslog facility",
                                "enum": [
                                    "KERN",
                                    "USER",
                                    "MAIL",
                                    "DAEMON",
                                    "AUTH",
                                    "SYSLOG",
                                    "LPR",
                                    "NEWS",
                                    "UUCP",
                                    "AUTHPRIV",
                                    "FTP",
                                    "LOGALERT",
                                    "CRON",
                                    "LOCAL0",
                                    "LOCAL1",
                                    "LOCAL2",
                                    "LOCAL3",
                                    "LOCAL4",
                                    "LOCAL5",
                                    "LOCAL6",
                                    "LOCAL7"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Facilities to export",
                            "title": "Facilities to export"
                        },
                        "msgids": {
                            "items": {
                                "pattern": "/^.+$/",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "MSGIDs to export",
                            "title": "MSGIDs to export"
                        },
                        "protocol": {
                            "enum": [
                                "TCP",
                                "TLS",
                                "UDP",
                                "LI",
                                "LI-TLS"
                            ],
                            "type": "string",
                            "description": "Export protocol",
                            "title": "Export protocol"
                        },
                        "exporter_name": {
                            "type": "string",
                            "description": "Syslog exporter name",
                            "title": "Syslog exporter name"
                        },
                        "level": {
                            "enum": [
                                "EMERG",
                                "ALERT",
                                "CRIT",
                                "ERR",
                                "WARNING",
                                "NOTICE",
                                "INFO",
                                "DEBUG"
                            ],
                            "type": "string",
                            "description": "Logging level to export",
                            "title": "Logging level to export"
                        },
                        "structured_data": {
                            "items": {
                                "pattern": "/^(comp|subcomp|s2comp|security|audit|reqId|ereqId|entId|errorCode|eventId|euser|threadId|splitId|splitIndex)=.+$/",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Structured data to export",
                            "title": "Structured data to export"
                        },
                        "tls_ca_pem": {
                            "type": "string",
                            "description": "CA certificate PEM of TLS server to export to",
                            "title": "CA certificate PEM of TLS server to export to"
                        },
                        "server": {
                            "description": "IP address or hostname of server to export to",
                            "format": "hostname-or-ipv4",
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "Node syslog exporter properties",
            "title": "Node syslog exporter properties"
        },
        "Tag": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "Arbitrary key-value pairs that may be attached to an entity",
            "properties": {
                "scope": {
                    "description": "Tag searches may optionally be restricted by scope",
                    "title": "Tag scope",
                    "default": "",
                    "readOnly": false,
                    "maxLength": 128,
                    "type": "string"
                },
                "tag": {
                    "description": "Identifier meaningful to user",
                    "title": "Tag value",
                    "default": "",
                    "readOnly": false,
                    "maxLength": 256,
                    "type": "string"
                }
            },
            "title": "Arbitrary key-value pairs that may be attached to an entity"
        },
        "L2VpnServiceListResult": {
            "x-vmw-nsx-module": "L2VPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "L2VPN",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/L2VpnService"
                            },
                            "type": "array",
                            "description": "L2VPN serivce list result",
                            "title": "L2VPN serivce list result"
                        }
                    }
                }
            ],
            "description": "Paginated list all the L2VPN services.",
            "title": "List all L2VPN services"
        },
        "VmkToLogicalSwitchMapping": {
            "description": "Holds VMkernal to logical switch mapping. This will be used for network migration.",
            "title": "Holds VMkernal to logical switch mapping. This will be used for network migration.",
            "required": [
                "dest_network_id",
                "src_interface_id"
            ],
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "properties": {
                "dest_network_id": {
                    "type": "string",
                    "description": "Only VLAN type of logical switch can be specified here, as migration operation is only supported for these types.",
                    "title": "The ID of the NSX logical switch to which source vmkernal interface needs to be migrated to."
                },
                "src_interface_id": {
                    "type": "string",
                    "description": "The ID (for example, vmk0) of the vmkernal interface on ESX to migrate.",
                    "title": "The ID (for example, vmk0) of the vmkernal interface on ESX to migrate."
                }
            }
        },
        "ByodServiceInstance": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseServiceInstance"
                },
                {
                    "required": [
                        "deployment_mode"
                    ],
                    "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
                    "type": "object",
                    "properties": {
                        "deployment_mode": {
                            "description": "Deployment mode specifies where the partner appliance will be deployed in HA or non-HA i.e standalone mode.",
                            "title": "Deployment Mode",
                            "default": "ACTIVE_STANDBY",
                            "enum": [
                                "STAND_ALONE",
                                "ACTIVE_STANDBY"
                            ],
                            "readOnly": false,
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "ByodServiceInstance is a custom instance to be used when NSX is not handling the lifecycles of appliance/s. User will manage their own appliance (BYOD) to connect with NSX.",
            "title": "Custom Instance of a service"
        },
        "StaticRouteListResult": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/StaticRoute"
                            },
                            "type": "array",
                            "description": "Paginated list of static routes",
                            "title": "Paginated list of static routes"
                        }
                    }
                }
            ]
        },
        "PnicBondStatusListResult": {
            "x-vmw-nsx-module": "Heatmap",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Heatmap",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/PnicBondStatus"
                            },
                            "type": "array",
                            "description": "List of pNIC statuses belonging to the transport node",
                            "title": "List of pNIC/bond statuses"
                        }
                    }
                }
            ],
            "description": "This object contains reference to list of pNIC/bond statuses",
            "title": "pNIC status list container"
        },
        "LogicalPortMirrorDestination": {
            "x-vmw-nsx-module": "PortMirroring",
            "allOf": [
                {
                    "$ref": "#/definitions/MirrorDestination"
                },
                {
                    "x-vmw-nsx-module": "PortMirroring",
                    "required": [
                        "port_ids"
                    ],
                    "type": "object",
                    "properties": {
                        "port_ids": {
                            "description": "Destination logical port identifier list.",
                            "title": "Destination logical port identifier list.",
                            "minItems": 1,
                            "items": {
                                "type": "string"
                            },
                            "maxItems": 3,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "VtepListResult": {
            "x-vmw-nsx-module": "AggSvcLogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "logical_switch_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the logical Switch",
                            "title": "The id of the logical Switch"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/VtepTableEntry"
                            },
                            "type": "array"
                        },
                        "transport_node_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Transport node identifier",
                            "title": "Transport node identifier"
                        }
                    }
                }
            ]
        },
        "IpBlock": {
            "x-vmw-nsx-module": "Ipam",
            "description": "A block of IPv4 addresses defined by a start address and a mask/prefix (network CIDR). An IP block is typically large & allocated to a tenant for automated consumption. An IP block is always a contiguous address space, for example 192.0.0.1/8. An IP block can be further subdivided into subnets called IP block subnets. These IP block subnets can later be added to IP pools and used for IP allocation. An IP pool is typically a collection of subnets that are often not a contiguous address space. Clients are allocated IP addresses only from IP pools. Sample Structure Diagram IpBlock_VMware 192.0.0.1/8 ======================================================================= /                          ___________________________________________/________ /  IpBlockSubnet_Finance  ( IpBlockSubnet_Eng1   IpBlockSubnet_Eng2   /        ) /  192.168.0.1/16         (   192.170.1.1/16      192.180.1.1/24      /        ) IpPool_Eng /                         (___________________________________________/________) /                                                                     / =======================================================================",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Ipam",
                    "required": [
                        "cidr"
                    ],
                    "type": "object",
                    "properties": {
                        "cidr": {
                            "format": "ipv4-cidr-block",
                            "type": "string",
                            "description": "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain",
                            "title": "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain"
                        }
                    }
                }
            ]
        },
        "IpfixCollectorUpmProfile": {
            "x-vmw-nsx-module": "UpmIpfixCollector",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "resource_type",
                        "collectors"
                    ],
                    "x-vmw-nsx-module": "UpmIpfixCollector",
                    "type": "object",
                    "properties": {
                        "resource_type": {
                            "description": "All IPFIX collector profile types.",
                            "enum": [
                                "IpfixCollectorUpmProfile"
                            ],
                            "readOnly": false,
                            "type": "string"
                        },
                        "collectors": {
                            "description": "IPFIX Collector Set",
                            "title": "IPFIX Collector Set",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IpfixCollector"
                            },
                            "maxItems": 4,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "The configuration for Internet protocol flow information export (IPFIX)\ncollector. It should be referenced in other IPFIX profile as a collecor\nconfig. The IPFIX exporter will send records to these collectors.\n",
            "title": "IPFIX Collector Profile"
        },
        "L2VPNTransportTunnelStatus": {
            "description": "Transport tunnel status.",
            "title": "Transport tunnel status",
            "required": [
                "resource_type"
            ],
            "discriminator": "resource_type",
            "x-vmw-nsx-module": "L2VPNStatistics",
            "type": "object",
            "properties": {
                "resource_type": {
                    "description": "Resource types of L2VPN Transport tunnels",
                    "enum": [
                        "IPSecVPNTransportStatus"
                    ],
                    "type": "string"
                },
                "tunnel_id": {
                    "readOnly": true,
                    "title": "Transport tunnel id",
                    "description": "Transport tunnel id.",
                    "$ref": "#/definitions/ResourceReference"
                }
            }
        },
        "NodeInfo": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "type": "object",
                    "properties": {
                        "type": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Node type",
                            "title": "Node type"
                        },
                        "display_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Name of the node",
                            "title": "Name of the node"
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Identifier of the node",
                            "title": "UUID of node"
                        },
                        "component_version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Component version of the node",
                            "title": "Component version of the node"
                        }
                    }
                }
            ]
        },
        "VlanTrunkSpec": {
            "description": "VlanTrunkspec is used for specifying trunk VLAN id ranges.",
            "title": "VLAN trunk range specification",
            "required": [
                "vlan_ranges"
            ],
            "x-vmw-nsx-module": "LogicalSwitch",
            "type": "object",
            "properties": {
                "vlan_ranges": {
                    "items": {
                        "$ref": "#/definitions/TrunkVlanRange"
                    },
                    "type": "array",
                    "description": "Trunk VLAN id ranges",
                    "title": "Trunk VLAN id ranges"
                }
            }
        },
        "StaticRoute": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "required": [
                        "next_hops",
                        "network"
                    ],
                    "type": "object",
                    "properties": {
                        "next_hops": {
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/StaticRouteNextHop"
                            },
                            "type": "array",
                            "description": "Next Hops",
                            "title": "Next Hops"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "network": {
                            "description": "CIDR",
                            "format": "ipv4-cidr-block",
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "FirewallSectionsSummaryList": {
            "x-vmw-nsx-module": "FirewallSummary",
            "type": "object",
            "properties": {
                "last_compute_time": {
                    "description": "Timestamp of the last computation, in epoch milliseconds.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "sections_summary": {
                    "items": {
                        "$ref": "#/definitions/FirewallSectionsSummary"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "List of firewall sections summary.",
                    "title": "List of the firewall sections summary"
                }
            }
        },
        "NodeListResult": {
            "x-vmw-nsx-module": "FabricNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "FabricNode",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/Node"
                            },
                            "type": "array",
                            "description": "Node list results",
                            "title": "Node list results"
                        }
                    }
                }
            ],
            "description": "Node list result",
            "title": "Node list result"
        },
        "LogicalRouterPort": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "LogicalRouterPorts",
                    "required": [
                        "logical_router_id",
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "logical_router_id": {
                            "type": "string",
                            "description": "Identifier for logical router on which this port is created",
                            "title": "Identifier for logical router on which this port is created"
                        },
                        "service_bindings": {
                            "items": {
                                "$ref": "#/definitions/ServiceBinding"
                            },
                            "type": "array",
                            "description": "Service Bindings",
                            "title": "Service Bindings"
                        },
                        "resource_type": {
                            "description": "LogicalRouterUpLinkPort is allowed only on TIER0 logical router.\n  It is the north facing port of the logical router.\nLogicalRouterLinkPortOnTIER0 is allowed only on TIER0 logical router.\n  This is the port where the LogicalRouterLinkPortOnTIER1 of TIER1 logical router connects to.\nLogicalRouterLinkPortOnTIER1 is allowed only on TIER1 logical router.\n  This is the port using which the user connected to TIER1 logical router for upwards connectivity via TIER0 logical router.\n  Connect this port to the LogicalRouterLinkPortOnTIER0 of the TIER0 logical router.\nLogicalRouterDownLinkPort is for the connected subnets on the logical router.\nLogicalRouterLoopbackPort is a loopback port for logical router component\n  which is placed on chosen edge cluster member.\nLogicalRouterIPTunnelPort is a IPSec VPN tunnel port created on\n  logical router when route based VPN session configured.\nLogicalRouterCentralizedServicePort is allowed only on Active/Standby TIER0 and TIER1\n  logical router. Port can be connected to VLAN or overlay logical switch.\n  Unlike downlink port it does not participate in distributed routing and hosted\n  on all edge cluster members associated with logical router.\n  Stateful services can be applied on this port.\n",
                            "enum": [
                                "LogicalRouterUpLinkPort",
                                "LogicalRouterDownLinkPort",
                                "LogicalRouterLinkPortOnTIER0",
                                "LogicalRouterLinkPortOnTIER1",
                                "LogicalRouterLoopbackPort",
                                "LogicalRouterIPTunnelPort",
                                "LogicalRouterCentralizedServicePort"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "CurrentRealizationStateBarrier": {
            "x-vmw-nsx-module": "RealizationStateBarrier",
            "type": "object",
            "description": "The current global barrier number of the realized state",
            "properties": {
                "current_barrier_number": {
                    "readOnly": true,
                    "type": "integer",
                    "description": "Gives the current global barrier number for NSX",
                    "format": "int64"
                }
            }
        },
        "UpgradeUnitStatus": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "IN_PROGRESS",
                        "NOT_STARTED",
                        "PAUSED"
                    ],
                    "type": "string",
                    "description": "Status of upgrade unit",
                    "title": "Status of upgrade unit"
                },
                "errors": {
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "List of errors occurred during upgrade of this upgrade unit",
                    "title": "List of errors occurred during upgrade of this upgrade unit"
                },
                "display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Name of upgrade unit",
                    "title": "Name of upgrade unit"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier of upgrade unit",
                    "title": "UUID of upgrade unit"
                },
                "percent_complete": {
                    "readOnly": true,
                    "type": "number",
                    "description": "Indicator of upgrade progress in percentage",
                    "title": "Indicator of upgrade progress in percentage"
                }
            }
        },
        "EmbeddedResource": {
            "x-vmw-nsx-module": "Common",
            "allOf": [
                {
                    "$ref": "#/definitions/RevisionedResource"
                },
                {
                    "x-vmw-nsx-module": "Common",
                    "type": "object",
                    "properties": {
                        "_owner": {
                            "readOnly": true,
                            "title": "Owner of this resource",
                            "description": "Owner of this resource",
                            "$ref": "#/definitions/OwnerResourceLink"
                        },
                        "display_name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "Defaults to ID if not set",
                            "title": "Identifier to use when displaying entity in logs or GUI"
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Identifier of the resource"
                        },
                        "resource_type": {
                            "readOnly": false,
                            "type": "string",
                            "description": "The type of this resource."
                        },
                        "description": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "Description of this resource",
                            "title": "Description of this resource"
                        }
                    }
                }
            ],
            "description": "Base class for resources that are embedded in other resources",
            "title": "Base class for resources that are embedded in other resources"
        },
        "MetadataProxyListResult": {
            "x-vmw-nsx-module": "MetadataProxy",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "MetadataProxy",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MetadataProxy"
                            },
                            "type": "array",
                            "description": "paginated list of metadata proxies",
                            "title": "paginated list of metadata proxies"
                        }
                    }
                }
            ]
        },
        "RemoteServerFingerprint": {
            "description": "Remote server",
            "title": "Remote server",
            "required": [
                "ssh_fingerprint",
                "server"
            ],
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "properties": {
                "ssh_fingerprint": {
                    "type": "string",
                    "description": "SSH fingerprint of server",
                    "title": "SSH fingerprint of server"
                },
                "port": {
                    "description": "Server port",
                    "title": "Server port",
                    "default": 22,
                    "format": "int64",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                },
                "server": {
                    "format": "hostname-or-ip",
                    "type": "string",
                    "description": "Remote server hostname or IP address",
                    "title": "Remote server hostname or IP address"
                }
            }
        },
        "PrefixConfig": {
            "x-vmw-nsx-module": "Routing",
            "required": [
                "action"
            ],
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action for the IPPrefix",
                    "enum": [
                        "PERMIT",
                        "DENY"
                    ],
                    "type": "string"
                },
                "ge": {
                    "description": "Greater than or equal to",
                    "format": "int64",
                    "title": "Greater than or equal to",
                    "maximum": 32,
                    "minimum": 1,
                    "type": "integer"
                },
                "le": {
                    "description": "Less than or equal to",
                    "format": "int64",
                    "title": "Less than or equal to",
                    "maximum": 32,
                    "minimum": 1,
                    "type": "integer"
                },
                "network": {
                    "description": "If absent, the action applies to all addresses.",
                    "format": "ipv4-cidr-block",
                    "type": "string"
                }
            }
        },
        "MACSetListResult": {
            "x-vmw-nsx-module": "MACSet",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "MACSet",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MACSet"
                            },
                            "type": "array",
                            "description": "Paged collection of MACSets",
                            "title": "Paged collection of MACSets"
                        }
                    }
                }
            ]
        },
        "EdgeClusterMemberTransportNode": {
            "x-vmw-nsx-module": "EdgeClusters",
            "required": [
                "member_index",
                "transport_node_id"
            ],
            "type": "object",
            "properties": {
                "member_index": {
                    "format": "int32",
                    "type": "integer",
                    "description": "System generated index for cluster member",
                    "title": "System generated index for cluster member"
                },
                "transport_node_id": {
                    "type": "string",
                    "description": "Identifier of the transport node backed by an Edge node",
                    "title": "UUID of edge transport node"
                }
            }
        },
        "ClusterProfile": {
            "x-vmw-nsx-module": "ClusterProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "ClusterProfile",
                    "required": [
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "resource_type": {
                            "description": "Supported cluster profiles.",
                            "enum": [
                                "EdgeHighAvailabilityProfile",
                                "BridgeHighAvailabilityClusterProfile"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "IPv4AddressProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "description": "IPv4 address properties",
            "properties": {
                "netmask": {
                    "type": "string",
                    "description": "Interface netmask",
                    "title": "Interface netmask"
                },
                "ip_address": {
                    "type": "string",
                    "description": "Interface IPv4 address",
                    "title": "Interface IPv4 address"
                }
            },
            "title": "IPv4 address properties"
        },
        "FirewallService": {
            "x-vmw-nsx-module": "Firewall",
            "allOf": [
                {
                    "$ref": "#/definitions/DSService"
                },
                {
                    "x-vmw-nsx-module": "Firewall",
                    "type": "object"
                }
            ]
        },
        "LbServiceStatistics": {
            "x-vmw-nsx-module": "AggSvcLb",
            "required": [
                "service_id"
            ],
            "type": "object",
            "properties": {
                "pools": {
                    "items": {
                        "$ref": "#/definitions/LbPoolStatistics"
                    },
                    "type": "array",
                    "description": "Statistics of load balancer pools",
                    "title": "Statistics of load balancer pools"
                },
                "service_id": {
                    "type": "string",
                    "description": "load balancer service identifier",
                    "title": "load balancer service identifier"
                },
                "virtual_servers": {
                    "items": {
                        "$ref": "#/definitions/LbVirtualServerStatistics"
                    },
                    "type": "array",
                    "description": "Statistics of load balancer virtual servers",
                    "title": "Statistics of load balancer virtual servers"
                },
                "last_update_timestamp": {
                    "type": "integer",
                    "description": "Timestamp when the data was last updated",
                    "format": "int64"
                },
                "statistics": {
                    "title": "Load balancer service statistics counter",
                    "description": "Load balancer service statistics counter",
                    "$ref": "#/definitions/LbServiceStatisticsCounter"
                }
            }
        },
        "DirectoryAdGroup": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/DirectoryGroup"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "required": [
                        "object_guid",
                        "secure_id"
                    ],
                    "type": "object",
                    "properties": {
                        "object_guid": {
                            "type": "string",
                            "description": "GUID is a 128-bit value that is unique not only in the enterprise but also across the world. GUIDs are assigned to every object created by Active Directory, not just User and Group objects.",
                            "title": "Active directory group object guid"
                        },
                        "secure_id": {
                            "type": "string",
                            "description": "A security identifier (SID) is a unique value of variable length used to identify a trustee. A SID consists of the following components - The revision level of the SID structure; A 48-bit identifier authority value that identifies the authority that issued the SID; A variable number of subauthority or relative identifier (RID) values that uniquely identify the trustee relative to the authority that issued the SID.",
                            "title": "Active directory group secure id"
                        }
                    }
                }
            ]
        },
        "NodeSshServiceProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/NodeServiceProperties"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "service_properties": {
                            "title": "SSH Service properties",
                            "description": "SSH Service properties",
                            "$ref": "#/definitions/SshServiceProperties"
                        }
                    }
                }
            ],
            "description": "Node SSH service properties",
            "title": "Node SSH service properties"
        },
        "NatCounters": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "type": "object",
            "properties": {
                "total_packets": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of packets",
                    "title": "The number of packets"
                },
                "total_bytes": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of bytes",
                    "title": "The number of bytes"
                },
                "active_sessions": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of active sessions",
                    "title": "The number of active sessions"
                }
            }
        },
        "HostSwitchState": {
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "description": "Host Switch State",
            "properties": {
                "host_switch_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "External ID of the HostSwitch",
                    "title": "External ID of the HostSwitch"
                },
                "endpoints": {
                    "items": {
                        "$ref": "#/definitions/Endpoint"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "List of virtual tunnel endpoints which are configured on this switch",
                    "title": "List of virtual tunnel endpoints which are configured on this switch"
                },
                "transport_zone_ids": {
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "List of Ids of TransportZones this HostSwitch belongs to",
                    "title": "List of Ids of TransportZones this HostSwitch belongs to"
                },
                "host_switch_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The name must be unique among all host switches specified in a given Transport Node.",
                    "title": "HostSwitch name. This name will be used to reference this HostSwitch."
                }
            },
            "title": "Host Switch State"
        },
        "TargetResourceStatus": {
            "x-vmw-nsx-module": "FirewallStatus",
            "required": [
                "target_status"
            ],
            "type": "object",
            "description": "Holds status of target resource in firewall context.",
            "properties": {
                "target_status": {
                    "description": "Firewall status on a target logical resource.",
                    "enum": [
                        "DISABLED",
                        "ENABLED"
                    ],
                    "readOnly": false,
                    "type": "string"
                },
                "target_id": {
                    "readOnly": false,
                    "maxLength": 64,
                    "type": "string",
                    "description": "Identifier of the NSX resource.",
                    "title": "Target ID"
                }
            }
        },
        "BridgeEndpointListResult": {
            "x-vmw-nsx-module": "BridgeEndpoint",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "BridgeEndpoint",
                    "type": "object",
                    "properties": {
                        "results": {
                            "description": "BridgeEndpoint Results",
                            "title": "BridgeEndpoint Results",
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/BridgeEndpoint"
                            },
                            "readOnly": true,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "Bridge Endpoint queries result",
            "title": "Bridge Endpoint queries result"
        },
        "NodeProtonServiceProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/NodeServiceProperties"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "service_properties": {
                            "title": "Service properties",
                            "description": "Service properties",
                            "$ref": "#/definitions/ProtonServiceProperties"
                        }
                    }
                }
            ],
            "description": "Node service properties",
            "title": "Node service properties"
        },
        "HostNode": {
            "x-vmw-nsx-module": "FabricNode",
            "allOf": [
                {
                    "$ref": "#/definitions/Node"
                },
                {
                    "x-vmw-nsx-module": "FabricNode",
                    "required": [
                        "os_type"
                    ],
                    "type": "object",
                    "properties": {
                        "os_version": {
                            "type": "string",
                            "description": "The version of the hypervisor operating system.",
                            "title": "The version of the hypervisor operating system."
                        },
                        "os_type": {
                            "enum": [
                                "ESXI",
                                "RHELKVM",
                                "UBUNTUKVM",
                                "HYPERV",
                                "RHELCONTAINER",
                                "RHELSERVER",
                                "UBUNTUSERVER",
                                "CENTOSSERVER",
                                "CENTOSKVM"
                            ],
                            "type": "string",
                            "description": "Hypervisor type, for example ESXi or RHEL KVM.",
                            "title": "Hypervisor type, for example ESXi or RHEL KVM."
                        },
                        "managed_by_server": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the virtual center server managing the ESXi type HostNode.",
                            "title": "The id of the virtual center server managing the ESXi type HostNode."
                        },
                        "host_credential": {
                            "title": "Login credentials for the host",
                            "description": "Login credentials for the host",
                            "$ref": "#/definitions/HostNodeLoginCredential"
                        },
                        "discovered_node_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Id of the discovered node which was converted to create this node",
                            "title": "Id of the discovered node which was converted to create this node"
                        }
                    }
                }
            ]
        },
        "NodeFileSystemProperties": {
            "x-vmw-nsx-module": "ApplianceStats",
            "type": "object",
            "description": "File system properties",
            "properties": {
                "mount": {
                    "readOnly": true,
                    "type": "string",
                    "description": "File system mount",
                    "title": "File system mount"
                },
                "total": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "File system size in kilobytes",
                    "title": "File system size in kilobytes"
                },
                "type": {
                    "readOnly": true,
                    "type": "string",
                    "description": "File system type",
                    "title": "File system type"
                },
                "file_system": {
                    "readOnly": true,
                    "type": "string",
                    "description": "File system id",
                    "title": "File system id"
                },
                "used": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Amount of file system used in kilobytes",
                    "title": "Amount of file system used in kilobytes"
                }
            },
            "title": "File system properties"
        },
        "LbHttpsMonitor": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbActiveMonitor"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "response_status_codes": {
                            "items": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "type": "array",
                            "description": "The HTTP response status code should be a valid HTTP status code.\n",
                            "maxItems": 64,
                            "title": "Array of single HTTP response status codes"
                        },
                        "server_auth_crl_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "A Certificate Revocation List (CRL) can be specified in the server-side\nSSL profile binding to disallow compromised server certificates.\n",
                            "title": "CRL identifier list to verify server certificate"
                        },
                        "server_auth_ca_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "If server auth type is REQUIRED, server certificate must be signed by\none of the trusted Certificate Authorities (CAs), also referred to as\nroot CAs, whose self signed certificates are specified.\n",
                            "title": "CA identifier list to verify server certificate"
                        },
                        "server_auth": {
                            "description": "server authentication mode",
                            "default": "IGNORE",
                            "enum": [
                                "REQUIRED",
                                "IGNORE"
                            ],
                            "type": "string"
                        },
                        "request_body": {
                            "type": "string",
                            "description": "String to send as part of HTTP health check request body. Valid only\nfor certain HTTP methods like POST.\n",
                            "title": "String to send as part of HTTP health check request body. Valid only\nfor certain HTTP methods like POST.\n"
                        },
                        "response_body": {
                            "type": "string",
                            "description": "If HTTP response body match string (regular expressions not supported)\nis specified (using LbHttpMonitor.response_body) then the\nhealthcheck HTTP response body is matched against the specified string\nand server is considered healthy only if there is a match.\nIf the response body string is not specified, HTTP healthcheck is\nconsidered successful if the HTTP response status code is 2xx, but it\ncan be configured to accept other status codes as successful.\n",
                            "title": "response body to match"
                        },
                        "ciphers": {
                            "items": {
                                "description": "SSL cipher",
                                "enum": [
                                    "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
                                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_RSA_WITH_AES_256_CBC_SHA256",
                                    "TLS_RSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "supported SSL cipher list to servers",
                            "title": "supported SSL cipher list to servers"
                        },
                        "request_headers": {
                            "items": {
                                "$ref": "#/definitions/LbHttpRequestHeader"
                            },
                            "type": "array",
                            "description": "Array of HTTP request headers",
                            "title": "Array of HTTP request headers"
                        },
                        "client_certificate_id": {
                            "type": "string",
                            "description": "client certificate can be specified to support client authentication.\n",
                            "title": "client certificate identifier"
                        },
                        "request_method": {
                            "description": "the health check method for HTTP monitor type",
                            "default": "GET",
                            "enum": [
                                "GET",
                                "OPTIONS",
                                "POST",
                                "HEAD",
                                "PUT"
                            ],
                            "type": "string"
                        },
                        "is_fips": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "This flag is set to true when all the ciphers and protocols are FIPS\ncompliant. It is set to false when one of the ciphers or protocols are\nnot FIPS compliant..\n",
                            "title": "FIPS compliance of ciphers and protocols"
                        },
                        "certificate_chain_depth": {
                            "description": "authentication depth is used to set the verification depth in the server\ncertificates chain.\n",
                            "title": "the maximum traversal depth of server certificate chain",
                            "default": 3,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "is_secure": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "This flag is set to true when all the ciphers and protocols are secure.\nIt is set to false when one of the ciphers or protocols is insecure.\n",
                            "title": "Secure/Insecure monitor flag"
                        },
                        "request_url": {
                            "type": "string",
                            "description": "URL used for HTTP monitor",
                            "title": "URL used for HTTP monitor"
                        },
                        "cipher_group_label": {
                            "description": "It is a label of cipher group which is mostly consumed by GUI.\n",
                            "enum": [
                                "BALANCED",
                                "HIGH_SECURITY",
                                "HIGH_COMPATIBILITY",
                                "CUSTOM"
                            ],
                            "type": "string"
                        },
                        "request_version": {
                            "description": "HTTP request version",
                            "default": "HTTP_VERSION_1_1",
                            "enum": [
                                "HTTP_VERSION_1_0",
                                "HTTP_VERSION_1_1",
                                "HTTP_VERSION_2_0"
                            ],
                            "type": "string"
                        },
                        "protocols": {
                            "items": {
                                "description": "SSL protocol",
                                "enum": [
                                    "SSL_V2",
                                    "SSL_V3",
                                    "TLS_V1",
                                    "TLS_V1_1",
                                    "TLS_V1_2"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "SSL versions TLS1.1 and TLS1.2 are supported and enabled by default.\nSSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.\n",
                            "title": "supported SSL protocol list to servers"
                        }
                    }
                }
            ]
        },
        "PBRSectionListResult": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/PBRSection"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of the PBR sections.",
                            "title": "Section list"
                        }
                    }
                }
            ]
        },
        "AssociationListResult": {
            "x-vmw-nsx-module": "Association",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Association",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "type": "array",
                            "description": "Paged Collection of ResourceReference",
                            "title": "Paged Collection of ResourceReference"
                        }
                    }
                }
            ]
        },
        "MacRange": {
            "x-vmw-nsx-module": "MACAM",
            "required": [
                "start",
                "end"
            ],
            "type": "object",
            "description": "A range of MAC addresses with a start and end value",
            "properties": {
                "start": {
                    "description": "Start value for MAC address range",
                    "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                    "readOnly": false,
                    "type": "string"
                },
                "end": {
                    "description": "End value for MAC address range",
                    "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                    "readOnly": false,
                    "type": "string"
                }
            }
        },
        "L4PortSetNSService": {
            "x-vmw-nsx-module": "Types",
            "allOf": [
                {
                    "$ref": "#/definitions/NSServiceElement"
                },
                {
                    "required": [
                        "l4_protocol"
                    ],
                    "x-vmw-nsx-module": "Types",
                    "type": "object",
                    "properties": {
                        "destination_ports": {
                            "items": {
                                "description": "Examples- Single port \"8080\", Range of ports \"8090-8095\"\n",
                                "format": "port-or-range",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Destination ports",
                            "maxItems": 15,
                            "title": "Destination ports"
                        },
                        "l4_protocol": {
                            "enum": [
                                "TCP",
                                "UDP"
                            ],
                            "type": "string"
                        },
                        "source_ports": {
                            "items": {
                                "description": "Examples- Single port \"8080\", Range of ports \"8090-8095\"\n",
                                "format": "port-or-range",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Source ports",
                            "maxItems": 15,
                            "title": "Source ports"
                        }
                    }
                }
            ],
            "description": "L4PortSet can be specified in comma separated notation of parts. Parts of a\nL4PortSet includes single integer or range of port in hyphen notation.\nExample of a PortSet: \"22, 33-70, 44\".\n",
            "title": "An NSService element that represents TCP or UDP protocol"
        },
        "SuccessNodeSupportBundleResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "bundle_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Name of support bundle, e.g. nsx_NODETYPE_UUID_YYYYMMDD_HHMMSS.tgz",
                    "title": "Name of support bundle, e.g. nsx_NODETYPE_UUID_YYYYMMDD_HHMMSS.tgz"
                },
                "node_display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Display name of node",
                    "title": "Display name of node"
                },
                "node_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "UUID of node",
                    "title": "UUID of node"
                },
                "sha256_thumbprint": {
                    "readOnly": true,
                    "type": "string",
                    "description": "File's SHA256 thumbprint",
                    "title": "File's SHA256 thumbprint"
                },
                "bundle_size": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Size of support bundle in bytes",
                    "title": "Size of support bundle in bytes"
                }
            }
        },
        "MigrationUnitGroupListResult": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MigrationUnitGroup"
                            },
                            "type": "array",
                            "description": "Paged Collection of Migration unit groups",
                            "title": "Paged Collection of Migration unit groups"
                        }
                    }
                }
            ]
        },
        "AppDiscoveryVmInfoListResult": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/AppDiscoveryVmInfo"
                            },
                            "type": "array",
                            "description": "list of AppDiscoveryVmInfos",
                            "title": "list of AppDiscoveryVmInfos"
                        }
                    }
                }
            ],
            "description": "AppDiscoveryVmInfo list",
            "title": "AppDiscoveryVmInfo list"
        },
        "DirectoryDomainSyncStats": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "prev_sync_status": {
                            "readOnly": true,
                            "enum": [
                                "SUCCESS",
                                "FAILURE",
                                "UNKNOWN"
                            ],
                            "type": "string",
                            "description": "Directory domain previous sync status. It could be one of the following two states.",
                            "title": "Previous sync status"
                        },
                        "avg_full_sync_time": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "All the historical full sync are counted in calculating the average full sync time in seconds.",
                            "title": "Average time spent for all historical full sync"
                        },
                        "prev_sync_type": {
                            "readOnly": true,
                            "enum": [
                                "IDLE",
                                "FULL_SYNC",
                                "DELTA_SYNC"
                            ],
                            "type": "string",
                            "description": "Directory domain previous sync type. It could be one of the following three states. Right after the directory domain is configured, this field is set to IDLE.",
                            "title": "Previous sync type"
                        },
                        "num_full_sync": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "number of historical full sync initiated either by system or by API request.",
                            "title": "Total number of full sync"
                        },
                        "current_state_begin_time": {
                            "description": "Since what time the current state has begun. The time is expressed in millisecond epoch time.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "avg_delta_sync_time": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "All the historical delta sync are counted in calculating the average delta sync time in seconds.",
                            "title": "Average time spent for all historical delta sync"
                        },
                        "current_state": {
                            "readOnly": true,
                            "enum": [
                                "IDLE",
                                "FULL_SYNC",
                                "DELTA_SYNC"
                            ],
                            "type": "string",
                            "description": "Current running state of the directory domain in synchronization life cycle. It could be one of the following three states.",
                            "title": "Current state of directory domain sync context"
                        },
                        "num_delta_sync": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "number of historical delta sync initiated either by system or by API request.",
                            "title": "Total number of delta sync"
                        },
                        "prev_sync_end_time": {
                            "description": "Directory domain previous sync ending time expressed in millisecond epoch time.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "Directory Domain Synchronization Statistics",
            "title": "Directory Domain Synchronization Statistics"
        },
        "LbServiceUsage": {
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "description": "Describes the capacity and current usage of virtual servers, pools and pool\nmembers for the given load balancer service.\n",
            "properties": {
                "pool_capacity": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Pool capacity means maximum number of pools which could be configured in\nthe given load balancer service.\n",
                    "title": "The capacity of pools"
                },
                "service_size": {
                    "description": "The size of load balancer service",
                    "enum": [
                        "SMALL",
                        "MEDIUM",
                        "LARGE"
                    ],
                    "readOnly": true,
                    "type": "string"
                },
                "pool_member_capacity": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Pool member capacity means maximum number of pool members which could be\nconfigured in the given load balancer service.\n",
                    "title": "The capacity of pool members"
                },
                "current_virtual_server_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "The current number of virtual servers which has been configured in the\ngiven load balancer service.\n",
                    "title": "The current number of virtual servers"
                },
                "service_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "UUID of load balancer service",
                    "title": "UUID of load balancer service"
                },
                "current_pool_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "The current number of pools which has been configured in the given load\nbalancer service.\n",
                    "title": "The current number of pools"
                },
                "virtual_server_capacity": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Virtual server capacity means maximum number of virtual servers which\ncould be configured in the given load balancer service.\n",
                    "title": "The capacity of virtual servers"
                },
                "current_pool_member_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "The current number of pool members which has been configured in the given\nload balancer service.\n",
                    "title": "The current number of pool members"
                }
            },
            "title": "The usage information of the load balancer service"
        },
        "IpPool": {
            "x-vmw-nsx-module": "Ipam",
            "description": "A collection of one or more IPv4 or IPv6 subnets or ranges that are often not a contiguous address space. Clients are allocated IPs from an IP pool. Often used when a client that consumes addresses exhausts an initial subnet or range and needs to be expanded but the adjoining address space is not available as it has been allocated to a different client.",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Ipam",
                    "type": "object",
                    "properties": {
                        "subnets": {
                            "items": {
                                "$ref": "#/definitions/IpPoolSubnet"
                            },
                            "type": "array",
                            "description": "Subnets can be IPv4 or IPv6 and they should not overlap. The maximum number will not exceed 5 subnets.",
                            "maxItems": 5,
                            "title": "The collection of one or more subnet objects in a pool"
                        },
                        "pool_usage": {
                            "readOnly": true,
                            "title": "Pool usage statistics",
                            "description": "Pool usage statistics",
                            "$ref": "#/definitions/PoolUsage"
                        }
                    }
                }
            ]
        },
        "MACSet": {
            "x-vmw-nsx-module": "MACSet",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "MACSet",
                    "type": "object",
                    "properties": {
                        "mac_addresses": {
                            "items": {
                                "description": "A MAC address. Must be 6 pairs of hexadecimal digits, upper or lower case,\nseparated by colons or dashes. Examples: 01:23:45:67:89:ab, 01-23-45-67-89-AB.\n",
                                "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "MAC addresses",
                            "maxItems": 4000,
                            "title": "MAC addresses"
                        }
                    }
                }
            ],
            "description": "MACSet is used to group individual MAC addresses. MACSets can be used as\nsources and destinations in layer2 firewall rules. These can also be used as\nmembers of NSGroups.\n",
            "title": "Set of one or more MAC addresses"
        },
        "PBRRule": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/EmbeddedResource"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "required": [
                        "action"
                    ],
                    "type": "object",
                    "properties": {
                        "disabled": {
                            "default": false,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Flag to disable rule. Disabled will only be persisted but never provisioned/realized.",
                            "title": "Rule enable/disable flag"
                        },
                        "sources": {
                            "description": "List of sources. Null will be treated as any.",
                            "title": "Source List",
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        },
                        "rule_tag": {
                            "readOnly": false,
                            "maxLength": 32,
                            "type": "string",
                            "description": "User level field which will be printed in CLI and packet logs.",
                            "title": "Tag"
                        },
                        "services": {
                            "description": "List of the services. Null will be treated as any.",
                            "title": "Service List",
                            "items": {
                                "$ref": "#/definitions/PBRService"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        },
                        "notes": {
                            "readOnly": false,
                            "maxLength": 2048,
                            "type": "string",
                            "description": "User notes specific to the rule.",
                            "title": "Notes"
                        },
                        "applied_tos": {
                            "description": "List of object where rule will be enforced. field overrides this one. Null will be treated as any.",
                            "title": "AppliedTo List",
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        },
                        "logged": {
                            "default": false,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Flag to enable packet logging. Default is disabled.",
                            "title": "Enable logging flag"
                        },
                        "action": {
                            "readOnly": false,
                            "enum": [
                                "ROUTE_TO_UNDERLAY_NAT",
                                "ROUTE_TO_OVERLAY_NAT",
                                "ROUTE_TO_UNDERLAY",
                                "ROUTE_TO_OVERLAY"
                            ],
                            "type": "string",
                            "description": "Action enforced on the packets which matches the PBR rule.",
                            "title": "Action"
                        },
                        "destinations": {
                            "description": "List of the destinations. Null will be treated as any.",
                            "title": "Destination List",
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "LogicalPortState": {
            "description": "Contians realized state of the logical port. For example, transport node\non which the port is located, discovered and realized address bindings of\nthe logical port.\n",
            "title": "Realized state of the logical port.",
            "required": [
                "id"
            ],
            "x-vmw-nsx-module": "LogicalPort",
            "type": "object",
            "properties": {
                "transport_node_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Identifiers of the transport node where the port is located",
                    "title": "Identifiers of the transport node where the port is located"
                },
                "discovered_bindings": {
                    "items": {
                        "$ref": "#/definitions/AddressBindingEntry"
                    },
                    "type": "array",
                    "description": "Logical port bindings discovered automatically",
                    "title": "Logical port bindings discovered automatically"
                },
                "id": {
                    "type": "string",
                    "description": "Id of the logical port",
                    "title": "Id of the logical port"
                },
                "realized_bindings": {
                    "items": {
                        "$ref": "#/definitions/AddressBindingEntry"
                    },
                    "type": "array",
                    "description": "Realized logical port bindings",
                    "title": "Realized logical port bindings"
                }
            }
        },
        "L2VPNTapTrafficStatistics": {
            "x-vmw-nsx-module": "L2VPNStatistics",
            "type": "object",
            "description": "TAP (Terminal access point) traffic statistics for L2VPN.",
            "properties": {
                "packets_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of outgoing packets.",
                    "title": "Packets out"
                },
                "bytes_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming bytes.",
                    "title": "Bytes in"
                },
                "packets_sent_error": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of packets dropped while sending for any reason.",
                    "title": "Packets sent error"
                },
                "packets_receive_error": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming packets dropped.",
                    "title": "packets recieved error"
                },
                "packets_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming packets.",
                    "title": "Packets in"
                },
                "bytes_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of outgoing bytes.",
                    "title": "Bytes out"
                }
            },
            "title": "L2VPN TAP (Terminal access point) traffic statistics"
        },
        "IcmpEchoRequestHeader": {
            "x-vmw-nsx-module": "Traceflow",
            "type": "object",
            "properties": {
                "id": {
                    "description": "ICMP id",
                    "title": "ICMP id",
                    "default": 0,
                    "format": "int64",
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                },
                "sequence": {
                    "description": "ICMP sequence number",
                    "title": "ICMP sequence number",
                    "default": 0,
                    "format": "int64",
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "FirewallRule": {
            "x-vmw-nsx-module": "Firewall",
            "allOf": [
                {
                    "$ref": "#/definitions/DSRule"
                },
                {
                    "x-vmw-nsx-module": "Firewall",
                    "type": "object",
                    "properties": {
                        "services": {
                            "description": "List of the services. Null will be treated as any.",
                            "title": "Service List",
                            "items": {
                                "$ref": "#/definitions/FirewallService"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        },
                        "section_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Section Id of the section to which this rule belongs to.",
                            "title": "Section Id"
                        }
                    }
                }
            ]
        },
        "PBRInsertParameters": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/DSInsertParameters"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object"
                }
            ],
            "description": "Parameters that indicate where rule/section need to be added All the params take rule/section Id",
            "title": "Parameters that indicate where rule/section need to be added All the params take rule/section Id"
        },
        "LbServiceDebugInfo": {
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "description": "The information for a given load balancer service could be used for\ndebugging and troubleshooting. It includes load balancer service,\nassociated virtual servers, associated pools, associated profiles such as\npersistence, SSL, application, associated monitors and associated rules.\n",
            "properties": {
                "pools": {
                    "items": {
                        "$ref": "#/definitions/LbPool"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The pools which are associated to the given load balancer service would\nbe included. The pools could be defined in virtual server default pool,\nsorry pool or load balancer rule action.\n",
                    "title": "Associated load balancer pool settings"
                },
                "tcp_profiles": {
                    "items": {
                        "$ref": "#/definitions/LbTcpProfile"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The TCP profiles are associated to virtual servers\n",
                    "title": "Associated load balancer TCP profile settings"
                },
                "virtual_servers": {
                    "items": {
                        "$ref": "#/definitions/LbVirtualServer"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The virtual servers which are associated to the given load balancer\nservice would be included.\n",
                    "title": "Associated virtual server settings"
                },
                "client_ssl_profiles": {
                    "items": {
                        "$ref": "#/definitions/LbClientSslProfile"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The client SSL profiles are associated to virtual servers\n",
                    "title": "Associated load balancer client SSL profile settings"
                },
                "server_ssl_profiles": {
                    "items": {
                        "$ref": "#/definitions/LbServerSslProfile"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The server SSL profiles are associated to virtual servers\n",
                    "title": "Associated load balancer server SSL profile settings"
                },
                "service": {
                    "readOnly": true,
                    "title": "Load balancer service setting",
                    "description": "Load balancer service setting for a given load balancer service\nidentifier.\n",
                    "$ref": "#/definitions/LbService"
                },
                "rules": {
                    "items": {
                        "$ref": "#/definitions/LbRule"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The load balancer rules are associated to virtual servers\n",
                    "title": "Associated load balancer rule settings"
                },
                "application_profiles": {
                    "items": {
                        "$ref": "#/definitions/LbAppProfile"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The application profiles are associated to virtual servers\n",
                    "title": "Associated load balancer application profile settings"
                },
                "persistence_profiles": {
                    "items": {
                        "$ref": "#/definitions/LbPersistenceProfile"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The persistence profiles are associated to virtual servers\n",
                    "title": "Associated load balancer persistence profile settings"
                },
                "monitors": {
                    "items": {
                        "$ref": "#/definitions/LbMonitor"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The load balancer monitors are associated to pools.\n",
                    "title": "Associated load balancer monitor configurations"
                }
            },
            "title": "The debug information of the load balancer service"
        },
        "UpdatePrincipalIdentityCertificateRequest": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "principal_identity_id",
                        "certificate_id"
                    ],
                    "x-vmw-nsx-module": "CertificateManager",
                    "type": "object",
                    "properties": {
                        "principal_identity_id": {
                            "readOnly": false,
                            "maxLength": 255,
                            "type": "string",
                            "description": "Unique ID of the principal",
                            "title": "Principal Identity ID"
                        },
                        "certificate_id": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Id of the stored certificate",
                            "title": "Id of the stored certificate"
                        }
                    }
                }
            ],
            "description": "Request to update the certificate of a principal identity with a new\ncertificate\n",
            "title": "Request to update the certificate of a principal identity"
        },
        "ControlClusterNodeStatus": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "properties": {
                "mgmt_connection_status": {
                    "readOnly": true,
                    "title": "Status of this node's management plane connection",
                    "description": "Status of this node's management plane connection",
                    "$ref": "#/definitions/MgmtConnStatus"
                },
                "control_cluster_status": {
                    "description": "Status of this node's connection to the control cluster",
                    "enum": [
                        "CONNECTED",
                        "DISCONNECTED",
                        "UNKNOWN"
                    ],
                    "readOnly": true,
                    "type": "string"
                }
            }
        },
        "LabelValueConfiguration": {
            "x-vmw-nsx-module": "NsxDashboard",
            "allOf": [
                {
                    "$ref": "#/definitions/WidgetConfiguration"
                },
                {
                    "required": [
                        "properties"
                    ],
                    "x-vmw-nsx-module": "NsxDashboard",
                    "type": "object",
                    "properties": {
                        "navigation": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "Hyperlink of the specified UI page that provides details.",
                            "title": "Navigation to a specified UI page"
                        },
                        "properties": {
                            "items": {
                                "$ref": "#/definitions/PropertyItem"
                            },
                            "type": "array",
                            "description": "An array of label-value properties.",
                            "title": "Rows"
                        }
                    }
                }
            ],
            "description": "Represents a Label-Value widget configuration",
            "title": "Label Value Dashboard Widget Configuration"
        },
        "SnmpServiceProperties": {
            "description": "SNMP Service properties",
            "title": "SNMP Service properties",
            "required": [
                "start_on_boot"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "communities": {
                    "items": {
                        "$ref": "#/definitions/SnmpCommunity"
                    },
                    "type": "array",
                    "description": "SNMP v1, v2c community",
                    "maxItems": 1,
                    "title": "SNMP v1, v2c community"
                },
                "start_on_boot": {
                    "type": "boolean",
                    "description": "Start when system boots",
                    "title": "Start when system boots"
                }
            }
        },
        "Endpoint": {
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "description": "An Endpoint object is part of HostSwitch configuration in TransportNode",
            "properties": {
                "subnet_mask": {
                    "description": "Subnet mask",
                    "format": "ip",
                    "readOnly": true,
                    "type": "string"
                },
                "mac": {
                    "description": "MAC address",
                    "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                    "readOnly": true,
                    "type": "string"
                },
                "default_gateway": {
                    "description": "Gateway IP",
                    "format": "ip",
                    "readOnly": true,
                    "type": "string"
                },
                "ip": {
                    "description": "Depending upon the EndpointIpConfig used in HostSwitch, IP could be allocated either from DHCP (default) or from Static IP Pool.",
                    "format": "ip",
                    "readOnly": true,
                    "type": "string"
                },
                "device_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Name of the virtual tunnel endpoint",
                    "title": "Name of the virtual tunnel endpoint"
                },
                "label": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Unique label for this Endpoint",
                    "title": "Unique label for this Endpoint"
                }
            },
            "title": "Tunnel endpoint configuration"
        },
        "FirewallRuleListResult": {
            "x-vmw-nsx-module": "Firewall",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Firewall",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/FirewallRule"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Firewall rule list result with pagination support.",
                            "title": "Firewall rule list result"
                        }
                    }
                }
            ]
        },
        "RemoteFileServer": {
            "description": "Remote file server",
            "title": "Remote file server",
            "required": [
                "directory_path",
                "protocol",
                "server"
            ],
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "properties": {
                "directory_path": {
                    "type": "string",
                    "description": "Remote server directory to copy bundle files to",
                    "title": "Remote server directory to copy bundle files to"
                },
                "protocol": {
                    "title": "Protocol to use to copy file",
                    "description": "Protocol to use to copy file",
                    "$ref": "#/definitions/FileTransferProtocol"
                },
                "port": {
                    "description": "Server port",
                    "title": "Server port",
                    "default": 22,
                    "format": "int64",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                },
                "server": {
                    "format": "hostname-or-ip",
                    "type": "string",
                    "description": "Remote server hostname or IP address",
                    "title": "Remote server hostname or IP address"
                }
            }
        },
        "MigrationUnitGroupAggregateInfo": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "required": [
                        "group"
                    ],
                    "type": "object",
                    "properties": {
                        "status": {
                            "readOnly": true,
                            "enum": [
                                "SUCCESS",
                                "FAILED",
                                "IN_PROGRESS",
                                "NOT_STARTED",
                                "PAUSED"
                            ],
                            "type": "string",
                            "description": "Migration status of migration unit group",
                            "title": "Migration status of migration unit group"
                        },
                        "failed_count": {
                            "readOnly": true,
                            "format": "int32",
                            "type": "integer",
                            "description": "Number of nodes in the migration unit group that failed migration",
                            "title": "Number of nodes in the migration unit group that failed migration"
                        },
                        "group": {
                            "readOnly": false,
                            "title": "Migration unit group details",
                            "description": "Migration unit group details",
                            "$ref": "#/definitions/MigrationUnitGroup"
                        },
                        "percent_complete": {
                            "readOnly": true,
                            "type": "number",
                            "description": "Indicator of migration progress in percentage",
                            "title": "Indicator of migration progress in percentage"
                        }
                    }
                }
            ]
        },
        "ServiceEndpoint": {
            "x-vmw-nsx-module": "ClusterManagement",
            "required": [
                "ip_address",
                "port"
            ],
            "type": "object",
            "properties": {
                "certificate_sha256_thumbprint": {
                    "readOnly": true,
                    "type": "string"
                },
                "ip_address": {
                    "description": "IPv4 or IPv6 address",
                    "format": "ip",
                    "type": "string"
                },
                "fqdn": {
                    "readOnly": true,
                    "type": "string"
                },
                "certificate": {
                    "type": "string"
                },
                "port": {
                    "minimum": 0,
                    "type": "integer",
                    "maximum": 65535,
                    "format": "int64"
                }
            }
        },
        "HostSwitchSpec": {
            "description": "The HostSwitchSpec is the base class for standard and preconfigured\nhost switch specifications.\n",
            "title": "Abstract base type for transport node host switch specification",
            "required": [
                "resource_type"
            ],
            "discriminator": "resource_type",
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "properties": {
                "resource_type": {
                    "enum": [
                        "StandardHostSwitchSpec",
                        "PreconfiguredHostSwitchSpec"
                    ],
                    "type": "string"
                }
            }
        },
        "BgpNeighborAddressFamily": {
            "x-vmw-nsx-module": "Routing",
            "required": [
                "type"
            ],
            "type": "object",
            "properties": {
                "in_filter_ipprefixlist_id": {
                    "type": "string",
                    "description": "Id of the IPPrefix List to be used for IN direction filter",
                    "title": "Id of the IPPrefix List to be used for IN direction filter"
                },
                "out_filter_routemap_id": {
                    "type": "string",
                    "description": "Id of the RouteMap to be used for OUT direction filter",
                    "title": "Id of the RouteMap to be used for OUT direction filter"
                },
                "type": {
                    "description": "Address family type",
                    "enum": [
                        "IPV4_UNICAST",
                        "VPNV4_UNICAST"
                    ],
                    "type": "string"
                },
                "in_filter_routemap_id": {
                    "type": "string",
                    "description": "Id of the RouteMap to be used for IN direction filter",
                    "title": "Id of the RouteMap to be used for IN direction filter"
                },
                "enabled": {
                    "default": true,
                    "type": "boolean",
                    "description": "Enable this address family",
                    "title": "Enable this address family"
                },
                "out_filter_ipprefixlist_id": {
                    "type": "string",
                    "description": "Id of the IPPrefixList to be used for OUT direction filter",
                    "title": "Id of the IPPrefixList to be used for OUT direction filter"
                }
            }
        },
        "Certificate": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "CertificateManager",
                    "required": [
                        "pem_encoded"
                    ],
                    "type": "object",
                    "properties": {
                        "used_by": {
                            "items": {
                                "$ref": "#/definitions/NodeIdServicesMap"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "list of node IDs with services, that are using this certificate"
                        },
                        "details": {
                            "items": {
                                "$ref": "#/definitions/X509Certificate"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "list of X509Certificates"
                        },
                        "pem_encoded": {
                            "readOnly": false,
                            "type": "string",
                            "description": "pem encoded certificate data"
                        }
                    }
                }
            ]
        },
        "ExtraConfig": {
            "description": "Extra config is intended for supporting vendor specific configuration on the\ndata path, it can be set as key value string pairs on either logical switch\nor logical port.\nIf it was set on logical switch, it will be inherited automatically by logical\nports in it. Also logical port setting will override logical switch setting\nif specific key was dual set on both logical switch and logical port.\n",
            "title": "Vendor specific configuration on logical switch or logical port",
            "required": [
                "config_pair"
            ],
            "x-vmw-nsx-module": "Switching",
            "type": "object",
            "properties": {
                "config_pair": {
                    "title": "Key value pair in string for the configuration",
                    "description": "Key value pair in string for the configuration",
                    "$ref": "#/definitions/KeyValuePair"
                }
            }
        },
        "UpgradeUnitListResult": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/UpgradeUnit"
                            },
                            "type": "array",
                            "description": "Paged Collection of Upgrade units",
                            "title": "Paged Collection of Upgrade units"
                        }
                    }
                }
            ]
        },
        "OwnerResourceLink": {
            "x-vmw-nsx-module": "Common",
            "allOf": [
                {
                    "$ref": "#/definitions/ResourceLink"
                },
                {
                    "x-vmw-nsx-module": "Common",
                    "type": "object"
                }
            ],
            "description": "The server will populate this field when returing the resource. Ignored on PUT and POST.",
            "title": "Link to this resource"
        },
        "IpPoolSubnet": {
            "x-vmw-nsx-module": "Ipam",
            "description": "A set of IPv4 or IPv6 addresses defined by a network CIDR.",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Ipam",
                    "required": [
                        "cidr",
                        "allocation_ranges"
                    ],
                    "type": "object",
                    "properties": {
                        "dns_nameservers": {
                            "description": "The collection of upto 3 DNS servers for the subnet.",
                            "title": "The collection of upto 3 DNS servers for the subnet.",
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "maxItems": 3,
                            "uniqueItems": true,
                            "type": "array"
                        },
                        "cidr": {
                            "type": "string",
                            "description": "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain",
                            "title": "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain"
                        },
                        "gateway_ip": {
                            "description": "The default gateway address on a layer-3 router.",
                            "format": "ip",
                            "type": "string"
                        },
                        "allocation_ranges": {
                            "items": {
                                "$ref": "#/definitions/IpPoolRange"
                            },
                            "type": "array",
                            "description": "A collection of IPv4 or IPv6 IP Pool Ranges.",
                            "title": "A collection of IPv4 or IPv6 IP Pool Ranges."
                        },
                        "dns_suffix": {
                            "format": "hostname",
                            "type": "string",
                            "description": "The DNS suffix for the DNS server.",
                            "title": "The DNS suffix for the DNS server."
                        }
                    }
                }
            ]
        },
        "NatStatisticsPerRule": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "allOf": [
                {
                    "$ref": "#/definitions/NatCounters"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouter",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the logical router which owns the NAT rule.",
                            "title": "The id of the logical router which owns the NAT rule."
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the NAT rule.",
                            "title": "The id of the NAT rule."
                        },
                        "warning_message": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The warning message about the NAT Rule statistics.",
                            "title": "The warning message about the NAT Rule statistics."
                        }
                    }
                }
            ]
        },
        "AppDiscoverySession": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "status": {
                            "readOnly": true,
                            "enum": [
                                "FAILED",
                                "RUNNING",
                                "FINISHED"
                            ],
                            "type": "string",
                            "description": "The status of the session",
                            "title": "The status of the session"
                        },
                        "end_timestamp": {
                            "type": "integer",
                            "description": "End time of the session expressed in milliseconds since epoch",
                            "format": "int64"
                        },
                        "start_timestamp": {
                            "type": "integer",
                            "description": "Start time of the session expressed in milliseconds since epoch",
                            "format": "int64"
                        },
                        "failed_reason": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The reason for the session status failure.",
                            "title": "The reason for the session status failure."
                        },
                        "reclassification": {
                            "readOnly": true,
                            "enum": [
                                "NOT_REQUIRED",
                                "REQUIRED"
                            ],
                            "type": "string",
                            "description": "Some App Profiles that were part of the discovery session could be modified or deleted |\nafter the session has been completed. NOT_REQUIRED status denotes that there were no such modifications. |\nREQUIRED status denotes some App Profiles that were part of the session has been modified/deleted and some |\nand some applications might not have been classfifed correctly. Use /session/<session-id>/reclassify API to|\nre-classfy the applications discovered based on app profiles.\n",
                            "title": "The reclassification status of the discovery session"
                        }
                    }
                }
            ],
            "description": "Contains the details of an application discovery session\n",
            "title": "Contains the details of an application discovery session"
        },
        "MigrationFeedbackResponseList": {
            "description": "List of detailed feedback response for the migration tool.",
            "title": "List of feedback reponse for Migration",
            "required": [
                "response_list"
            ],
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "response_list": {
                    "items": {
                        "$ref": "#/definitions/MigrationFeedbackResponse"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "List of feedback responses.",
                    "title": "List of feedback responses"
                }
            }
        },
        "VniPool": {
            "x-vmw-nsx-module": "Vnim",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Vnim",
                    "required": [
                        "ranges"
                    ],
                    "type": "object",
                    "properties": {
                        "ranges": {
                            "items": {
                                "$ref": "#/definitions/VniRange"
                            },
                            "type": "array",
                            "description": "VNI range list results",
                            "title": "VNI range list results"
                        }
                    }
                }
            ]
        },
        "NicMetadata": {
            "description": "Information on the Network interfaces present on the partner appliance that needs to be configured by the NSX Manager.",
            "title": "NIC Metadata",
            "required": [
                "interface_label",
                "interface_type",
                "interface_index"
            ],
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "type": "object",
            "properties": {
                "interface_label": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Network Interface label.",
                    "title": "Interface label"
                },
                "interface_type": {
                    "readOnly": false,
                    "enum": [
                        "MANAGEMENT",
                        "DATA1",
                        "DATA2",
                        "HA1",
                        "HA2"
                    ],
                    "type": "string",
                    "description": "Interface that needs to be configured on the partner appliance. Ex. MANAGEMENT, DATA1, DATA2, HA1, HA2.",
                    "title": "Interface type"
                },
                "interface_index": {
                    "readOnly": false,
                    "format": "int64",
                    "type": "integer",
                    "description": "Network Interface index.",
                    "title": "Interface Index"
                }
            }
        },
        "FailedNodeSupportBundleResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "node_display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Display name of node",
                    "title": "Display name of node"
                },
                "node_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "UUID of node",
                    "title": "UUID of node"
                },
                "error_code": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Error code",
                    "title": "Error code"
                },
                "error_message": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Error message",
                    "title": "Error message"
                }
            }
        },
        "IPSecVPNPolicyTrafficStatistics": {
            "x-vmw-nsx-module": "VPNStatistics",
            "type": "object",
            "description": "IPSec VPN policy traffic statistics",
            "properties": {
                "aggregate_traffic_counters": {
                    "readOnly": true,
                    "title": "Traffic summary",
                    "description": "Aggregate traffic statistics across all ipsec tunnels.",
                    "$ref": "#/definitions/IPSecVPNTrafficCounters"
                },
                "tunnel_statistics": {
                    "items": {
                        "$ref": "#/definitions/IPSecVPNTunnelTrafficStatistics"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Tunnel statistics.",
                    "title": "Tunnel statistics"
                },
                "tunnel_port_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Tunnel port identifier.",
                    "title": "Tunnel port identifier"
                },
                "policy_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Policy Identifier.",
                    "title": "Policy Identifier"
                }
            },
            "title": "IPSec VPN policy traffic statistics"
        },
        "FeatureAccessListResult": {
            "x-vmw-nsx-module": "AAA",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AAA",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/FeatureAccess"
                            },
                            "type": "array",
                            "description": "List results",
                            "title": "List results"
                        }
                    }
                }
            ]
        },
        "LbPoolStatus": {
            "x-vmw-nsx-module": "AggSvcLb",
            "required": [
                "pool_id"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "enum": [
                        "UP",
                        "PARTIALLY_UP",
                        "PRIMARY_DOWN",
                        "DOWN",
                        "DETACHED",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "UP means that all primary members are in UP status.\nPARTIALLY_UP means that some(not all) primary members are in UP\nstatus, the number of these active members is larger or equal to\ncertain number(min_active_members) which is defined in LbPool.\nWhen there are no backup members which are in the UP status, the\nnumber(min_active_members) would be ignored.\nPRIMARY_DOWN means that less than certain(min_active_members) primary\nmembers are in UP status but backup members are in UP status,\nconnections to this pool would be dispatched to backup members.\nDOWN means that all primary and backup members are DOWN.\nDETACHED means that the pool is not bound to any virtual server.\nUNKOWN means that no status reported from transport-nodes. The\nassociated load balancer service may be working(or not working).\n",
                    "title": "Virtual server status"
                },
                "last_update_timestamp": {
                    "type": "integer",
                    "description": "Timestamp when the data was last updated",
                    "format": "int64"
                },
                "pool_id": {
                    "type": "string",
                    "description": "Load balancer pool identifier",
                    "title": "Load balancer pool identifier"
                },
                "members": {
                    "items": {
                        "$ref": "#/definitions/LbPoolMemberStatus"
                    },
                    "type": "array",
                    "description": "Status of load balancer pool members",
                    "title": "Status of load balancer pool members"
                }
            }
        },
        "NSGroupExpressionList": {
            "description": "List of NSGroupExpressions",
            "title": "List of NSGroupExpressions",
            "required": [
                "members"
            ],
            "x-vmw-nsx-module": "NSGroup",
            "type": "object",
            "properties": {
                "members": {
                    "items": {
                        "$ref": "#/definitions/NSGroupExpression"
                    },
                    "type": "array",
                    "description": "List of NSGroupExpressions to be passed to add and remove APIs\n",
                    "maxItems": 500,
                    "title": "List of NSGroupExpressions to be passed to add and remove APIs\n"
                }
            }
        },
        "SelfResourceLink": {
            "x-vmw-nsx-module": "Common",
            "allOf": [
                {
                    "$ref": "#/definitions/ResourceLink"
                },
                {
                    "x-vmw-nsx-module": "Common",
                    "type": "object"
                }
            ],
            "description": "The server will populate this field when returing the resource. Ignored on PUT and POST.",
            "title": "Link to this resource"
        },
        "ClusterNodeVMDeploymentConfig": {
            "description": "Contains info used to configure the VM on deployment",
            "title": "Configuration for deploying cluster node VM",
            "required": [
                "placement_type"
            ],
            "discriminator": "placement_type",
            "x-vmw-nsx-module": "ClusterNodeVMDeployment",
            "type": "object",
            "properties": {
                "placement_type": {
                    "enum": [
                        "VsphereClusterNodeVMDeploymentConfig"
                    ],
                    "type": "string",
                    "description": "Specifies the config for the platform through which to deploy the VM\n",
                    "title": "Type of deployment"
                }
            }
        },
        "Node": {
            "x-vmw-nsx-module": "FabricNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "FabricNode",
                    "required": [
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "discovered_ip_addresses": {
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Discovered IP Addresses of the fabric node, version 4 or 6",
                            "title": "Discovered IP Addresses of the fabric node, version 4 or 6"
                        },
                        "ip_addresses": {
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "IP Addresses of the Node, version 4 or 6. This property is mandatory for all nodes except for\nautomatic deployment of edge virtual machine node. For automatic deployment, the ip address from\nmanagement_port_subnets property will be considered.\n",
                            "title": "IP Addresses of the Node, version 4 or 6"
                        },
                        "external_id": {
                            "type": "string",
                            "description": "ID of the Node maintained on the Node and used to recognize the Node",
                            "title": "ID of the Node maintained on the Node and used to recognize the Node"
                        },
                        "fqdn": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Fully qualified domain name of the fabric node",
                            "title": "Fully qualified domain name of the fabric node"
                        },
                        "resource_type": {
                            "type": "string",
                            "description": "Fabric node type, for example 'HostNode', 'EdgeNode' or 'PublicCloudGatewayNode'",
                            "title": "Fabric node type, for example 'HostNode', 'EdgeNode' or 'PublicCloudGatewayNode'"
                        }
                    }
                }
            ]
        },
        "ClusterNodeStatus": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "properties": {
                "system_status": {
                    "readOnly": true,
                    "title": "Node status properties",
                    "description": "Node status properties",
                    "$ref": "#/definitions/NodeStatusProperties"
                },
                "mgmt_cluster_status": {
                    "readOnly": true,
                    "title": "Clustering status for management plane functions on this node",
                    "description": "Clustering status for management plane functions on this node",
                    "$ref": "#/definitions/ManagementClusterNodeStatus"
                },
                "version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Software version running on node",
                    "title": "Software version running on node"
                },
                "control_cluster_status": {
                    "readOnly": true,
                    "title": "Clustering status for control plane functions on this node",
                    "description": "Clustering status for control plane functions on this node",
                    "$ref": "#/definitions/ControlClusterNodeStatus"
                }
            }
        },
        "GlobalRestoreStatus": {
            "x-vmw-nsx-module": "ClusterRestore",
            "type": "object",
            "description": "Overall restore process status",
            "properties": {
                "description": {
                    "readOnly": true,
                    "type": "string",
                    "description": "A description of the restore status",
                    "title": "A description of the restore status"
                },
                "value": {
                    "readOnly": true,
                    "enum": [
                        "NOT_AVAILABLE",
                        "NOT_STARTED",
                        "SUCCESS",
                        "ERROR",
                        "RUNNING",
                        "SUSPENDING",
                        "SUSPENDED",
                        "ABORTED"
                    ],
                    "type": "string",
                    "description": "Global rolled-up restore status value",
                    "title": "Global rolled-up restore status value"
                }
            },
            "title": "Overall restore process status"
        },
        "ClusterInitializationNodeInfo": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "description": "The type provides the information of a non-running cluster node required for the initialization of a management cluster. The administrator needs to start this node for management cluster to initialize properly (or decommission it explicitly).",
            "properties": {
                "disk_store_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The (internal) disk-store ID of the member",
                    "title": "The (internal) disk-store ID of the member"
                },
                "host_address": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The IP address (or domain name) of the cluster node",
                    "title": "The IP address (or domain name) of the cluster node"
                }
            }
        },
        "DirectoryGroupListResults": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DirectoryGroup"
                            },
                            "type": "array",
                            "description": "Directory group list",
                            "title": "Directory group list"
                        }
                    }
                }
            ]
        },
        "SshKeyBaseProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "required": [
                "label"
            ],
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Current password for user (required for users root and admin)",
                    "title": "Current password for user (required for users root and admin)"
                },
                "label": {
                    "type": "string",
                    "description": "SSH key label (used to identify the key)",
                    "title": "SSH key label (used to identify the key)"
                }
            }
        },
        "TransportNodeState": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ConfigurationState"
                },
                {
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "host_switch_states": {
                            "items": {
                                "$ref": "#/definitions/HostSwitchState"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "States of HostSwitches on the host",
                            "title": "States of HostSwitches on the host"
                        },
                        "maintenance_mode_state": {
                            "description": "the present realized maintenance mode state",
                            "enum": [
                                "ENTERING",
                                "ENABLED",
                                "EXITING",
                                "DISABLED"
                            ],
                            "readOnly": true,
                            "type": "string"
                        },
                        "transport_node_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Unique Id of the TransportNode",
                            "title": "Unique Id of the TransportNode"
                        }
                    }
                }
            ],
            "description": "Transport Node State",
            "title": "Transport Node State"
        },
        "L2VPNSessionSummary": {
            "x-vmw-nsx-module": "L2VPNStatistics",
            "type": "object",
            "description": "List summary of L2VPN sessions.",
            "properties": {
                "total_l2vpn_sessions": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total L2VPN sessions configured.",
                    "title": "Total L2VPN sessions"
                },
                "established_l2vpn_sessions": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of established L2VPN sessions. L2VPN session is established when all the tunnels are up.",
                    "title": "Established L2VPN sessions"
                },
                "failed_l2vpn_sessions": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of failed L2VPN sessions. L2VPN session is failed when all the tunnels are down.",
                    "title": "Failed L2VPN sessions"
                }
            },
            "title": "L2VPN session status summary"
        },
        "BasicAuthenticationScheme": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/AuthenticationScheme"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "required": [
                        "username",
                        "scheme_name"
                    ],
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "User name to authenticate with",
                            "title": "User name to authenticate with"
                        },
                        "scheme_name": {
                            "enum": [
                                "basic"
                            ],
                            "type": "string",
                            "description": "Authentication scheme name",
                            "title": "Authentication scheme name"
                        },
                        "password": {
                            "type": "string",
                            "description": "Password to authenticate with",
                            "title": "Password to authenticate with"
                        }
                    }
                }
            ]
        },
        "TraceflowListResult": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/Traceflow"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Traceflow Results",
                            "title": "Traceflow Results"
                        }
                    }
                }
            ],
            "description": "Traceflow queries result",
            "title": "Traceflow queries result"
        },
        "StaticIpPoolSpec": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/IpAssignmentSpec"
                },
                {
                    "required": [
                        "ip_pool_id"
                    ],
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "ip_pool_id": {
                            "readOnly": false,
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "IP assignment specification for Static IP Pool.",
            "title": "IP assignment specification for Static IP Pool."
        },
        "IpDiscoverySwitchingProfile": {
            "x-vmw-nsx-module": "IpDiscoverySwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseSwitchingProfile"
                },
                {
                    "x-vmw-nsx-module": "IpDiscoverySwitchingProfile",
                    "type": "object",
                    "properties": {
                        "arp_snooping_enabled": {
                            "default": true,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Indicates whether ARP snooping is enabled",
                            "title": "Indicates whether ARP snooping is enabled"
                        },
                        "arp_bindings_limit": {
                            "description": "Indicates the number of arp snooped IP addresses to be remembered per LogicalPort. Decreasing this value, will retain the latest bindings from the existing list of address bindings. Increasing this value will retain existing bindings and also learn any new address bindings discovered on the port until the new limit is reached.",
                            "title": "Number of arp snooped IP addresses",
                            "default": 1,
                            "format": "int32",
                            "maximum": 128,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "vm_tools_enabled": {
                            "default": false,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "This option is only supported on ESX where vm-tools is installed.",
                            "title": "Indicates whether fetching IP using vm-tools is enabled"
                        },
                        "dhcp_snooping_enabled": {
                            "default": true,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Indicates whether DHCP snooping is enabled",
                            "title": "Indicates whether DHCP snooping is enabled"
                        }
                    }
                }
            ]
        },
        "FirewallStatsList": {
            "x-vmw-nsx-module": "FirewallStatsRule",
            "type": "object",
            "properties": {
                "result_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total count for firewall rule statistics in results set",
                    "title": "Firewall Rules stats count"
                },
                "section_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Corresponding firewall section identifier for list of rule statistics",
                    "title": "Firewall Section ID"
                },
                "results": {
                    "description": "List of rule statistics",
                    "title": "Firewall Rules stats",
                    "items": {
                        "$ref": "#/definitions/FirewallStats"
                    },
                    "readOnly": true,
                    "maxItems": 1000,
                    "type": "array"
                }
            }
        },
        "EdgeHighAvailabilityProfile": {
            "x-vmw-nsx-module": "EdgeHighAvailabilityProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ClusterProfile"
                },
                {
                    "x-vmw-nsx-module": "EdgeHighAvailabilityProfile",
                    "type": "object",
                    "properties": {
                        "bfd_declare_dead_multiple": {
                            "description": "Number of times a packet is missed before BFD declares the neighbor down.",
                            "title": "Number of times a packet is missed before BFD declares the neighbor down.",
                            "default": 3,
                            "format": "int64",
                            "maximum": 16,
                            "minimum": 2,
                            "type": "integer"
                        },
                        "bfd_probe_interval": {
                            "description": "the time interval (in millisec) between probe packets for heartbeat purpose",
                            "title": "the time interval (in millisec) between probe packets for heartbeat purpose",
                            "default": 1000,
                            "format": "int64",
                            "maximum": 60000,
                            "minimum": 300,
                            "type": "integer"
                        },
                        "bfd_allowed_hops": {
                            "description": "BFD allowed hops",
                            "title": "BFD allowed hops",
                            "default": 255,
                            "format": "int64",
                            "maximum": 255,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "Profile for BFD HA cluster setting",
            "title": "Profile for BFD HA cluster setting"
        },
        "NodeRouteProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "required": [
                        "route_type"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "src": {
                            "type": "string",
                            "description": "Source address to prefer when sending to destinations of route",
                            "title": "Source address to prefer when sending to destinations of route"
                        },
                        "from_address": {
                            "type": "string",
                            "description": "From address",
                            "title": "From address"
                        },
                        "proto": {
                            "default": "boot",
                            "enum": [
                                "unspec",
                                "redirect",
                                "kernel",
                                "boot",
                                "static",
                                "gated",
                                "ra",
                                "mrt",
                                "zebra",
                                "bird",
                                "dnrouted",
                                "xorp",
                                "ntk",
                                "dhcp"
                            ],
                            "type": "string",
                            "description": "Routing protocol identifier of route",
                            "title": "Routing protocol identifier of route"
                        },
                        "route_type": {
                            "enum": [
                                "default",
                                "static",
                                "blackhole",
                                "prohibit",
                                "throw",
                                "unreachable"
                            ],
                            "type": "string",
                            "description": "Route type",
                            "title": "Route type"
                        },
                        "metric": {
                            "type": "string",
                            "description": "Metric value of route",
                            "title": "Metric value of route"
                        },
                        "destination": {
                            "type": "string",
                            "description": "Destination covered by route",
                            "title": "Destination covered by route"
                        },
                        "interface_id": {
                            "type": "string",
                            "description": "Network interface id of route",
                            "title": "Network interface id of route"
                        },
                        "route_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Unique identifier for the route",
                            "title": "Unique identifier for the route"
                        },
                        "netmask": {
                            "type": "string",
                            "description": "Netmask of destination covered by route",
                            "title": "Netmask of destination covered by route"
                        },
                        "scope": {
                            "type": "string",
                            "description": "Scope of destinations covered by route",
                            "title": "Scope of destinations covered by route"
                        },
                        "gateway": {
                            "type": "string",
                            "description": "Address of next hop",
                            "title": "Address of next hop"
                        }
                    }
                }
            ],
            "description": "Node network route properties",
            "title": "Node network route properties"
        },
        "MacTableEntry": {
            "x-vmw-nsx-module": "AggSvcLogicalSwitch",
            "required": [
                "mac_address"
            ],
            "type": "object",
            "properties": {
                "vtep_mac_address": {
                    "type": "string",
                    "description": "The virtual tunnel endpoint MAC address",
                    "title": "The virtual tunnel endpoint MAC address"
                },
                "vtep_ip": {
                    "description": "The virtual tunnel endpoint IP address",
                    "format": "ip",
                    "type": "string"
                },
                "mac_address": {
                    "type": "string",
                    "description": "The MAC address",
                    "title": "The MAC address"
                }
            }
        },
        "AdvanceClusterRestoreRequest": {
            "x-vmw-nsx-module": "ClusterRestore",
            "required": [
                "data"
            ],
            "type": "object",
            "properties": {
                "data": {
                    "items": {
                        "$ref": "#/definitions/AdvanceClusterRestoreInput"
                    },
                    "type": "array",
                    "description": "List of instructions and their associated data",
                    "title": "List of instructions and their associated data"
                }
            }
        },
        "NodeRoutePropertiesListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NodeRouteProperties"
                            },
                            "type": "array",
                            "description": "Node route property results",
                            "title": "Node route property results"
                        }
                    }
                }
            ],
            "description": "Node network route properties list results",
            "title": "Node network route properties list results"
        },
        "UdpHeader": {
            "x-vmw-nsx-module": "Traceflow",
            "type": "object",
            "properties": {
                "src_port": {
                    "description": "Source port of udp header",
                    "title": "Source port of udp header",
                    "default": 0,
                    "format": "int64",
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                },
                "dst_port": {
                    "description": "Destination port of udp header",
                    "title": "Destination port of udp header",
                    "default": 0,
                    "format": "int64",
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "NodeUserProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "username": {
                            "minLength": 1,
                            "maxLength": 32,
                            "type": "string",
                            "description": "User login name (must be \"root\" if userid is 0)",
                            "title": "User login name (must be \"root\" if userid is 0)"
                        },
                        "password": {
                            "type": "string",
                            "description": "Password for the user (optionally specified on PUT, unspecified on GET)",
                            "title": "Password for the user (optionally specified on PUT, unspecified on GET)"
                        },
                        "userid": {
                            "description": "Numeric id for the user",
                            "title": "Numeric id for the user",
                            "format": "int64",
                            "maximum": 2147483647,
                            "readOnly": true,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "old_password": {
                            "type": "string",
                            "description": "Old password for the user (required on PUT if password specified)",
                            "title": "Old password for the user (required on PUT if password specified)"
                        },
                        "full_name": {
                            "type": "string",
                            "description": "Full name for the user",
                            "title": "Full name for the user"
                        }
                    }
                }
            ],
            "description": "Node user properties",
            "title": "Node user properties"
        },
        "MirrorDestination": {
            "discriminator": "resource_type",
            "x-vmw-nsx-module": "PortMirroring",
            "required": [
                "resource_type"
            ],
            "type": "object",
            "properties": {
                "resource_type": {
                    "description": "Resource types of mirror destination",
                    "enum": [
                        "LogicalPortMirrorDestination",
                        "PnicMirrorDestination",
                        "IPMirrorDestination"
                    ],
                    "type": "string"
                }
            }
        },
        "BFDDiagnosticCount": {
            "x-vmw-nsx-module": "Heatmap",
            "type": "object",
            "properties": {
                "concatenated_path_down_count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of tunnels with concatenated path down diagnostic message",
                    "title": "Number of tunnels with concatenated path down diagnostic message"
                },
                "administratively_down_count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of tunnels with administratively down diagnostic message",
                    "title": "Number of tunnels with administratively down diagnostic message"
                },
                "no_diagnostic_count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of tunnels with no diagnostic",
                    "title": "Number of tunnels with no diagnostic"
                },
                "path_down_count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of tunnels with path down diagnostic message",
                    "title": "Number of tunnels with path down diagnostic message"
                },
                "reverse_concatenated_path_down_count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of tunnels with reverse concatenated path down diagnostic message",
                    "title": "Number of tunnels with reverse concatenated path down diagnostic message"
                },
                "neighbor_signaled_session_down_count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of tunnels neighbor signaled session down",
                    "title": "Number of tunnels neighbor signaled session down"
                },
                "control_detection_time_expired_count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of tunnels with control detection time expired diagnostic message",
                    "title": "Number of tunnels with control detection time expired diagnostic message"
                },
                "echo_function_failed_count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of tunnels with echo function failed diagnostic message",
                    "title": "Number of tunnels with echo function failed diagnostic message"
                },
                "forwarding_plane_reset_count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of tunnels with forwarding plane reset diagnostic message",
                    "title": "Number of tunnels with forwarding plane reset diagnostic message"
                }
            }
        },
        "RenderConfiguration": {
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "description": "Render configuration to be applied to the widget.",
            "properties": {
                "color": {
                    "enum": [
                        "GREY",
                        "SKY_BLUE",
                        "BLUE",
                        "GREEN",
                        "YELLOW",
                        "RED"
                    ],
                    "type": "string",
                    "description": "The color to use when rendering an entity. For example, set color as 'RED' to render a portion of donut in red.",
                    "title": "Color of the entity"
                },
                "condition": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "If the condition is met then the rendering specified for the condition will be applied. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.",
                    "title": "Expression for evaluating condition"
                },
                "display_value": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "If specified, overrides the field value. This can be used to display a meaningful value in situations where field value is not available or not configured.",
                    "title": "Overridden value to display, if any"
                },
                "tooltip": {
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/Tooltip"
                    },
                    "type": "array",
                    "description": "Multi-line text to be shown on tooltip while hovering over the UI element if the condition is met.",
                    "title": "Multi-line tooltip"
                },
                "icons": {
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/Icon"
                    },
                    "type": "array",
                    "description": "Icons to be applied at dashboard for widgets and UI elements.",
                    "title": "Icons"
                }
            },
            "title": "Render Configuration"
        },
        "L2VPNSessionStatus": {
            "x-vmw-nsx-module": "L2VPNStatistics",
            "type": "object",
            "description": "L2VPN session status.",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "UP",
                        "DOWN"
                    ],
                    "type": "string",
                    "description": "L2 VPN session status, specifies UP/DOWN.",
                    "title": "L2 VPN session status"
                },
                "transport_tunnels": {
                    "items": {
                        "$ref": "#/definitions/L2VPNTransportTunnelStatus"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Transport tunnels status.",
                    "title": "Transport tunnels status"
                },
                "display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "L2VPN display name.",
                    "title": "Display name"
                },
                "session_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "L2VPN session identifier.",
                    "title": "Session identifier"
                }
            },
            "title": "L2VPN Session Status"
        },
        "PortConnectionEntity": {
            "x-vmw-nsx-module": "PortConnection",
            "type": "object",
            "description": "Port Connection Entity",
            "properties": {
                "resource": {
                    "readOnly": true,
                    "title": "Resource reference with details of the entity",
                    "description": "Resource reference with details of the entity",
                    "$ref": "#/definitions/ManagedResource"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Resource ID is mapped to this. (ID is Generated for Edge node groups, since resource will be null)",
                    "title": "Resource ID is mapped to this. (ID is Generated for Edge node groups, since resource will be null)"
                }
            },
            "title": "Port Connection Entity"
        },
        "RepoSyncStatusReport": {
            "x-vmw-nsx-module": "ClusterNodeVMDeployment",
            "required": [
                "status"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "enum": [
                        "NOT_STARTED",
                        "IN_PROGRESS",
                        "FAILED",
                        "SUCCESS"
                    ],
                    "type": "string",
                    "description": "Status of the repo sync operation on the single nsx-manager\n",
                    "title": "Repository Synchronization Status"
                },
                "status_message": {
                    "type": "string",
                    "description": "Describes the steps which repo sync operation is performing currently.\n",
                    "title": "Status message"
                },
                "failure_message": {
                    "type": "string",
                    "description": "In case if repo sync fails due to some issue, an error message will be\nstored here.\n",
                    "title": "Error message for failure"
                },
                "failure_code": {
                    "format": "int64",
                    "type": "integer",
                    "description": "In case of repo sync related failure, the code for the error will\nbe stored here.\n",
                    "title": "Error code for failure"
                }
            }
        },
        "Ipv4Header": {
            "x-vmw-nsx-module": "Traceflow",
            "type": "object",
            "properties": {
                "src_ip": {
                    "description": "The source ip address.",
                    "format": "ip",
                    "type": "string"
                },
                "flags": {
                    "description": "IP flags",
                    "title": "IP flags",
                    "default": 0,
                    "format": "int64",
                    "maximum": 8,
                    "minimum": 0,
                    "type": "integer"
                },
                "dst_ip": {
                    "description": "The destination ip address.",
                    "format": "ip",
                    "type": "string"
                },
                "src_subnet_prefix_len": {
                    "description": "This is used together with src_ip to calculate dst_ip for broadcast when dst_ip is not given; not used in all other cases.",
                    "format": "int64",
                    "title": "source subnet prefix length.",
                    "maximum": 32,
                    "minimum": 1,
                    "type": "integer"
                },
                "ttl": {
                    "description": "Time to live (ttl)",
                    "title": "Time to live (ttl)",
                    "default": 64,
                    "format": "int64",
                    "maximum": 255,
                    "minimum": 0,
                    "type": "integer"
                },
                "protocol": {
                    "description": "IP protocol - defaults to ICMP",
                    "title": "IP protocol - defaults to ICMP",
                    "default": 1,
                    "format": "int64",
                    "maximum": 255,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "DailyTelemetrySchedule": {
            "x-vmw-nsx-module": "TelemetryConfig",
            "allOf": [
                {
                    "$ref": "#/definitions/TelemetrySchedule"
                },
                {
                    "x-vmw-nsx-module": "TelemetryConfig",
                    "required": [
                        "hour_of_day"
                    ],
                    "type": "object",
                    "properties": {
                        "minutes": {
                            "description": "Minute at which data will be collected. Specify a value between 0 through 59.\n",
                            "title": "Minute at which data will be collected",
                            "default": 0,
                            "format": "int64",
                            "maximum": 59,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "hour_of_day": {
                            "description": "Hour at which data will be collected. Specify a value between 0 through 23.\n",
                            "format": "int64",
                            "title": "Hour at which data will be collected",
                            "maximum": 23,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "MigrationUnitStatus": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "IN_PROGRESS",
                        "NOT_STARTED",
                        "PAUSED"
                    ],
                    "type": "string",
                    "description": "Status of migration unit",
                    "title": "Status of migration unit"
                },
                "errors": {
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "List of errors occurred during migration of this migration unit",
                    "title": "List of errors occurred during migration of this migration unit"
                },
                "display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Name of migration unit",
                    "title": "Name of migration unit"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier of migration unit",
                    "title": "UUID of migration unit"
                },
                "percent_complete": {
                    "readOnly": true,
                    "type": "number",
                    "description": "Indicator of migration progress in percentage",
                    "title": "Indicator of migration progress in percentage"
                }
            }
        },
        "LbHttpRequestUriArgumentsCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "uri_arguments"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "uri_arguments": {
                            "type": "string",
                            "description": "URI arguments, aka query string of URI.\n",
                            "title": "URI arguments"
                        },
                        "match_type": {
                            "description": "Match type of URI arguments",
                            "default": "REGEX",
                            "enum": [
                                "STARTS_WITH",
                                "ENDS_WITH",
                                "EQUALS",
                                "CONTAINS",
                                "REGEX"
                            ],
                            "type": "string"
                        },
                        "case_sensitive": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, case is significant when comparing URI arguments.\n",
                            "title": "A case sensitive flag for URI arguments comparing"
                        }
                    }
                }
            ],
            "description": "This condition is used to match URI arguments aka query string of Http\nrequest messages, for example, in URI http://exaple.com?foo=1&bar=2, the\n\"foo=1&bar=2\" is the query string containing URI arguments. In an URI\nscheme, query string is indicated by the first question mark (\"?\")\ncharacter and terminated by a number sign (\"#\") character or by the end of\nthe URI.\nThe uri_arguments field can be specified as a regular expression(Set\nmatch_type to REGEX). For example, \"foo=(?&lt;x&gt;\\d+)\". It matches HTTP\nrequests whose URI arguments containing \"foo\", the value of foo contains\nonly digits. And the value of foo is captured as $x which can be used in\nLbRuleAction fields which support variables.\n",
            "title": "Condition to match URI arguments of HTTP requests"
        },
        "NSGroupExpression": {
            "description": "Policy expression for NSGroup membership",
            "title": "Policy expression for NSGroup membership",
            "required": [
                "resource_type"
            ],
            "discriminator": "resource_type",
            "x-vmw-nsx-module": "NSGroup",
            "type": "object",
            "properties": {
                "resource_type": {
                    "enum": [
                        "NSGroupSimpleExpression",
                        "NSGroupComplexExpression",
                        "NSGroupTagExpression"
                    ],
                    "type": "string"
                }
            }
        },
        "RelatedDataRequest": {
            "x-vmw-nsx-module": "Search",
            "allOf": [
                {
                    "$ref": "#/definitions/AggregateRequest"
                },
                {
                    "required": [
                        "join_condition"
                    ],
                    "x-vmw-nsx-module": "Search",
                    "type": "object",
                    "properties": {
                        "join_condition": {
                            "type": "string",
                            "description": "Join condition between the parent and the related object.\nThis is to be specified in \"relatedObjectFieldName:ParentObjectFieldName\" format.\n",
                            "title": "Join condition"
                        },
                        "size": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of related objects to return.\nIf not specified all the related objects will be returned.\nShould be set to 0 if only the count of related objects is desired.\n",
                            "title": "Size"
                        }
                    }
                }
            ],
            "description": "Request parameters for the related types",
            "title": "Related object request"
        },
        "PackageStore": {
            "description": "Contains package information",
            "title": "Contains package information",
            "required": [
                "package_url",
                "bulletin_ids"
            ],
            "x-vmw-nsx-module": "HostPrepServiceFabric",
            "type": "object",
            "properties": {
                "package_url": {
                    "type": "string",
                    "description": "url of the package",
                    "title": "url of the package"
                },
                "bulletin_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "List of bulletin ids",
                    "title": "List of bulletin ids"
                }
            }
        },
        "RuleState": {
            "x-vmw-nsx-module": "Firewall",
            "allOf": [
                {
                    "$ref": "#/definitions/DSRuleState"
                },
                {
                    "x-vmw-nsx-module": "Firewall",
                    "type": "object"
                }
            ]
        },
        "MigrationSummary": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "migration_status": {
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "IN_PROGRESS",
                        "NOT_STARTED",
                        "PAUSED"
                    ],
                    "type": "string",
                    "description": "Status of migration",
                    "title": "Status of migration"
                },
                "component_target_versions": {
                    "items": {
                        "$ref": "#/definitions/ComponentTargetVersion"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "target_version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Target system version",
                    "title": "Target system version"
                },
                "migration_coordinator_version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Current version of migration coordinator",
                    "title": "Current version of migration coordinator"
                },
                "system_version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Current system version",
                    "title": "Current system version"
                },
                "migration_bundle_file_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Name of the last successfully uploaded migration bundle file",
                    "title": "Name of the last successfully uploaded migration bundle file"
                }
            }
        },
        "ClusterRestoreStatus": {
            "x-vmw-nsx-module": "ClusterRestore",
            "type": "object",
            "description": "Cluster restore status",
            "properties": {
                "status": {
                    "$ref": "#/definitions/GlobalRestoreStatus"
                },
                "step": {
                    "$ref": "#/definitions/RestoreStep"
                },
                "endpoints": {
                    "items": {
                        "$ref": "#/definitions/ResourceLink"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The list of allowed endpoints, based on the current state of\nthe restore process\n",
                    "title": "The list of allowed endpoints, based on the current state of\nthe restore process\n"
                },
                "total_steps": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of steps in the entire restore process",
                    "title": "Total number of steps in the entire restore process"
                },
                "restore_start_time": {
                    "description": "Timestamp when restore was started in epoch millisecond",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "restore_end_time": {
                    "description": "Timestamp when restore was completed in epoch millisecond",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "backup_timestamp": {
                    "description": "Timestamp when backup was initiated in epoch millisecond",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Unique id for backup request",
                    "title": "Unique id for backup request"
                },
                "instructions": {
                    "items": {
                        "$ref": "#/definitions/InstructionInfo"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Instructions for users to reconcile Restore operations",
                    "title": "Instructions for users to reconcile Restore operations"
                }
            },
            "title": "Cluster restore status"
        },
        "BfdConfigParameters": {
            "x-vmw-nsx-module": "Routing",
            "type": "object",
            "description": "BFD configuration for the given Peer.",
            "properties": {
                "receive_interval": {
                    "description": "the time interval (in milliseconds) between heartbeat packets for BFD when receiving heartbeats.",
                    "title": "the time interval (in milliseconds) between heartbeat packets for BFD when receiving heartbeats.",
                    "default": 1000,
                    "format": "int64",
                    "maximum": 60000,
                    "minimum": 300,
                    "type": "integer"
                },
                "declare_dead_multiple": {
                    "description": "Number of times a packet is missed before BFD declares the neighbor down.",
                    "title": "Number of times a packet is missed before BFD declares the neighbor down.",
                    "default": 3,
                    "format": "int64",
                    "maximum": 16,
                    "minimum": 2,
                    "type": "integer"
                },
                "transmit_interval": {
                    "description": "the time interval (in milliseconds) between heartbeat packets for BFD when sending heartbeats.",
                    "title": "the time interval (in milliseconds) between heartbeat packets for BFD when sending heartbeats.",
                    "default": 1000,
                    "format": "int64",
                    "maximum": 60000,
                    "minimum": 300,
                    "type": "integer"
                }
            },
            "title": "BFD configuration for the given Peer."
        },
        "ICMPTypeNSService": {
            "x-vmw-nsx-module": "Types",
            "allOf": [
                {
                    "$ref": "#/definitions/NSServiceElement"
                },
                {
                    "required": [
                        "protocol"
                    ],
                    "x-vmw-nsx-module": "Types",
                    "type": "object",
                    "properties": {
                        "icmp_code": {
                            "format": "int64",
                            "type": "integer",
                            "description": "ICMP message code",
                            "title": "ICMP message code"
                        },
                        "icmp_type": {
                            "format": "int64",
                            "type": "integer",
                            "description": "ICMP message type",
                            "title": "ICMP message type"
                        },
                        "protocol": {
                            "enum": [
                                "ICMPv4",
                                "ICMPv6"
                            ],
                            "type": "string",
                            "description": "ICMP protocol type",
                            "title": "ICMP protocol type"
                        }
                    }
                }
            ],
            "description": "A NSService that represents IPv4 or IPv6 ICMP protocol",
            "title": "A NSService that represents IPv4 or IPv6 ICMP protocol"
        },
        "ClusterNodeVMDeploymentRequestList": {
            "x-vmw-nsx-module": "ClusterNodeVMDeployment",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "ClusterNodeVMDeployment",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ClusterNodeVMDeploymentRequest"
                            },
                            "type": "array",
                            "description": "Array of existing ClusterNodeVMDeploymentRequests\n",
                            "title": "Results"
                        }
                    }
                }
            ],
            "description": "List of ClusterNodeVMDeploymentRequests",
            "title": "ClusterNodeVMDeploymentRequest list"
        },
        "BatchResponse": {
            "description": "The reponse to a batch operation",
            "title": "The reponse to a batch operation",
            "required": [
                "results"
            ],
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "properties": {
                "has_errors": {
                    "type": "boolean",
                    "description": "Indicates if any of the APIs failed",
                    "title": "errors indicator"
                },
                "rolled_back": {
                    "type": "boolean",
                    "description": "Optional flag indicating that all items were rolled back even if succeeded initially",
                    "title": "indicates if all items were rolled back."
                },
                "results": {
                    "items": {
                        "$ref": "#/definitions/BatchResponseItem"
                    },
                    "type": "array",
                    "description": "Bulk list results",
                    "title": "Bulk list results"
                }
            }
        },
        "NodeInterfaceAlias": {
            "x-vmw-nsx-module": "ApplianceStats",
            "type": "object",
            "description": "Node network interface alias",
            "properties": {
                "ip_configuration": {
                    "enum": [
                        "dhcp",
                        "static",
                        "not configured"
                    ],
                    "type": "string",
                    "description": "Interface configuration",
                    "title": "Interface configuration"
                },
                "netmask": {
                    "type": "string",
                    "description": "Interface netmask",
                    "title": "Interface netmask"
                },
                "ip_address": {
                    "description": "Interface IP address",
                    "format": "ip",
                    "type": "string"
                },
                "physical_address": {
                    "description": "Interface MAC address",
                    "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                    "type": "string"
                },
                "broadcast_address": {
                    "description": "Interface broadcast address",
                    "format": "ip",
                    "type": "string"
                }
            },
            "title": "Node network interface alias"
        },
        "DirectoryDomain": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "name",
                        "resource_type"
                    ],
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique contraint for domain name among different domains.",
                            "title": "Directory domain name"
                        },
                        "resource_type": {
                            "type": "string",
                            "description": "Domain resource type comes from multiple sub-classes extending this base class. For example, DirectoryAdDomain is one accepted resource_type. If there are more sub-classes defined, they will also be accepted resource_type.",
                            "title": "Directory domain resource type"
                        }
                    }
                }
            ],
            "description": "Directory Domain",
            "title": "Directory Domain"
        },
        "FirewallSectionsSummary": {
            "x-vmw-nsx-module": "FirewallSummary",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "FirewallSummary",
                    "type": "object",
                    "properties": {
                        "section_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Total number of sections for the section type.",
                            "title": "Section count"
                        },
                        "rule_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Total number of rules in the section.",
                            "title": "Rule count"
                        },
                        "section_type": {
                            "description": "Type of rules which a section can contain.",
                            "enum": [
                                "L2DFW",
                                "L3DFW"
                            ],
                            "readOnly": true,
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "LogicalService": {
            "x-vmw-nsx-module": "LogicalService",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "LogicalService",
                    "required": [
                        "dhcp_relay_profile_id",
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "dhcp_relay_profile_id": {
                            "type": "string",
                            "description": "dhcp relay profile referenced by the dhcp relay service",
                            "title": "dhcp relay profile referenced by the dhcp relay service"
                        },
                        "resource_type": {
                            "description": "Resource type of the logical service",
                            "enum": [
                                "DhcpRelayService"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "NSGroupMetaInfoListResult": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NSGroupMetaInfo"
                            },
                            "type": "array",
                            "description": "list of NSGroupMetaInfos",
                            "title": "list of NSGroupMetaInfos"
                        }
                    }
                }
            ],
            "description": "NSGroupMetaInfo list",
            "title": "NSGroupMetaInfo list"
        },
        "LbHttpMonitor": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbActiveMonitor"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "response_status_codes": {
                            "items": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "type": "array",
                            "description": "The HTTP response status code should be a valid HTTP status code.\n",
                            "maxItems": 64,
                            "title": "Array of single HTTP response status codes"
                        },
                        "request_method": {
                            "description": "the health check method for HTTP monitor type",
                            "default": "GET",
                            "enum": [
                                "GET",
                                "OPTIONS",
                                "POST",
                                "HEAD",
                                "PUT"
                            ],
                            "type": "string"
                        },
                        "request_body": {
                            "type": "string",
                            "description": "String to send as part of HTTP health check request body. Valid only\nfor certain HTTP methods like POST.\n",
                            "title": "String to send as part of HTTP health check request body. Valid only\nfor certain HTTP methods like POST.\n"
                        },
                        "response_body": {
                            "type": "string",
                            "description": "If HTTP response body match string (regular expressions not supported)\nis specified (using LbHttpMonitor.response_body) then the\nhealthcheck HTTP response body is matched against the specified string\nand server is considered healthy only if there is a match.\nIf the response body string is not specified, HTTP healthcheck is\nconsidered successful if the HTTP response status code is 2xx, but it\ncan be configured to accept other status codes as successful.\n",
                            "title": "response body to match"
                        },
                        "request_url": {
                            "type": "string",
                            "description": "URL used for HTTP monitor",
                            "title": "URL used for HTTP monitor"
                        },
                        "request_version": {
                            "description": "HTTP request version",
                            "default": "HTTP_VERSION_1_1",
                            "enum": [
                                "HTTP_VERSION_1_0",
                                "HTTP_VERSION_1_1",
                                "HTTP_VERSION_2_0"
                            ],
                            "type": "string"
                        },
                        "request_headers": {
                            "items": {
                                "$ref": "#/definitions/LbHttpRequestHeader"
                            },
                            "type": "array",
                            "description": "Array of HTTP request headers",
                            "title": "Array of HTTP request headers"
                        }
                    }
                }
            ]
        },
        "TunnelStatusCount": {
            "x-vmw-nsx-module": "Heatmap",
            "allOf": [
                {
                    "$ref": "#/definitions/StatusCount"
                },
                {
                    "x-vmw-nsx-module": "Heatmap",
                    "type": "object",
                    "properties": {
                        "bfd_diagnostic": {
                            "title": "BFD Diagnostic",
                            "description": "BFD Diagnostic",
                            "$ref": "#/definitions/BFDDiagnosticCount"
                        },
                        "bfd_status": {
                            "title": "BFD Status",
                            "description": "BFD Status",
                            "$ref": "#/definitions/BFDStatusCount"
                        }
                    }
                }
            ]
        },
        "ComputeCollectionTransportNodeTemplateStateList": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ComputeCollectionTransportNodeTemplateState"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "State list per compute collection",
                            "title": "State list per compute collection"
                        }
                    }
                }
            ],
            "description": "Transport node creation state list",
            "title": "Transport node creation state list"
        },
        "UpgradeStatus": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "properties": {
                "host_status": {
                    "readOnly": true,
                    "title": "Host upgrade status",
                    "description": "Host upgrade status",
                    "$ref": "#/definitions/HostUpgradeStatus"
                },
                "ccp_status": {
                    "readOnly": true,
                    "title": "CCP upgrade status",
                    "description": "CCP upgrade status",
                    "$ref": "#/definitions/CCPUpgradeStatus"
                },
                "edge_status": {
                    "readOnly": true,
                    "title": "Edge upgrade status",
                    "description": "Edge upgrade status",
                    "$ref": "#/definitions/EdgeUpgradeStatus"
                },
                "overall_upgrade_status": {
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "IN_PROGRESS",
                        "NOT_STARTED",
                        "PAUSED"
                    ],
                    "type": "string",
                    "description": "Status of upgrade",
                    "title": "Status of upgrade"
                },
                "component_status": {
                    "items": {
                        "$ref": "#/definitions/ComponentUpgradeStatus"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "List of component statuses",
                    "title": "List of component statuses"
                }
            }
        },
        "DnsForwarderListResult": {
            "x-vmw-nsx-module": "DnsForwarder",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "DnsForwarder",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DnsForwarder"
                            },
                            "type": "array",
                            "description": "Paginated list of dns forwarders",
                            "title": "Paginated list of dns forwarders"
                        }
                    }
                }
            ]
        },
        "IpfixSwitchUpmProfile": {
            "x-vmw-nsx-module": "UpmIpfix",
            "allOf": [
                {
                    "$ref": "#/definitions/IpfixUpmProfile"
                },
                {
                    "required": [
                        "priority",
                        "collector_profile",
                        "observation_domain_id"
                    ],
                    "x-vmw-nsx-module": "UpmIpfix",
                    "type": "object",
                    "properties": {
                        "priority": {
                            "description": "This priority field is used to resolve conflicts in logical ports/switch\n which inherit multiple switch IPFIX profiles from NSGroups.\n\nOverride rule is : for multiple profiles inherited from NSGroups, the\none with highest priority (lowest number) overrides others; the profile\ndirectly applied to logical switch overrides profiles inherited from\nNSGroup; the profile directly applied to logical port overides profiles\ninherited from logical switch and/or nsgroup;\n\nThe IPFIX exporter will send records to collectors of final effective\nprofile only.\n",
                            "format": "int32",
                            "title": "Profile Priority",
                            "maximum": 65536,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "collector_profile": {
                            "type": "string",
                            "description": "Each IPFIX switching profile can have its own collector profile.\n",
                            "title": "UUID of IPFIX Collector Profile"
                        },
                        "idle_timeout": {
                            "description": "The time in seconds after a flow is expired if no more packets matching\nthis flow are received by the cache.\n",
                            "title": "Idle Timeout",
                            "default": 300,
                            "format": "int32",
                            "maximum": 3600,
                            "minimum": 60,
                            "type": "integer"
                        },
                        "max_flows": {
                            "description": "The maximum number of flow entries in each exporter flow cache.\n",
                            "title": "Max Flows",
                            "default": 16384,
                            "format": "int64",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "observation_domain_id": {
                            "description": "An identifier that is unique to the exporting process and used to\nmeter the Flows.\n",
                            "format": "int64",
                            "title": "Observation Domain ID",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "active_timeout": {
                            "description": "The time in seconds after a flow is expired even if more packets\nmatching this Flow are received by the cache.\n",
                            "title": "Active Timeout",
                            "default": 300,
                            "format": "int32",
                            "maximum": 3600,
                            "minimum": 60,
                            "type": "integer"
                        },
                        "applied_tos": {
                            "title": "Entitys Applied with Profile",
                            "description": "Entities where the IPFIX profile will be enabled on. Maximum\nentity count of all types is 128.\n",
                            "$ref": "#/definitions/AppliedTos"
                        },
                        "packet_sample_probability": {
                            "description": "The probability in percentage that a packet is sampled, in range\n(0,100]. The probability is equal for every packet.\n",
                            "title": "Packet Sample Probability",
                            "default": 0.1,
                            "exclusiveMinimum": true,
                            "maximum": 100,
                            "minimum": 0,
                            "type": "number"
                        }
                    }
                }
            ],
            "description": "The configuration for Internet protocol flow information export (IPFIX) and\nwould be enabled on the switching module to collect flow information.\n",
            "title": "Switching IPFIX Profile"
        },
        "DhcpProfile": {
            "x-vmw-nsx-module": "Dhcp",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Dhcp",
                    "required": [
                        "edge_cluster_id"
                    ],
                    "type": "object",
                    "properties": {
                        "edge_cluster_member_indexes": {
                            "description": "If none is provided, the NSX will auto-select two edge-nodes from the given edge cluster.\nIf user provides only one edge node, there will be no HA support.\nIf both the member indexes are changed in a same PUT API, e.g. change from [a,b] to [x,y],\nthe current dhcp server states will be lost, which could cause the network crash due to ip conflicts.\nHence the suggestion is to change only one member index in one single update, e.g. from [a,b] to [a,y].\n",
                            "title": "edge node indexes",
                            "minItems": 0,
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 2,
                            "uniqueItems": true,
                            "type": "array"
                        },
                        "edge_cluster_id": {
                            "type": "string",
                            "description": "edge cluster uuid",
                            "title": "edge cluster uuid"
                        }
                    }
                }
            ]
        },
        "NodeLogPropertiesListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NodeLogProperties"
                            },
                            "type": "array",
                            "description": "Node log property results",
                            "title": "Node log property results"
                        }
                    }
                }
            ],
            "description": "Node log property query results",
            "title": "Node log property query results"
        },
        "BFDProperties": {
            "x-vmw-nsx-module": "Tunnel",
            "type": "object",
            "description": "BFD information",
            "properties": {
                "active": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "True if tunnel is active in a gateway HA setup",
                    "title": "True if tunnel is active in a gateway HA setup"
                },
                "state": {
                    "readOnly": true,
                    "enum": [
                        "UNKNOWN_STATE",
                        "ADMIN_DOWN",
                        "DOWN",
                        "INIT",
                        "UP"
                    ],
                    "type": "string",
                    "description": "State of the BFD session",
                    "title": "State of the BFD session"
                },
                "remote_state": {
                    "readOnly": true,
                    "enum": [
                        "UNKNOWN_STATE",
                        "ADMIN_DOWN",
                        "DOWN",
                        "INIT",
                        "UP"
                    ],
                    "type": "string",
                    "description": "State of the remote interface's BFD session",
                    "title": "State of the remote interface's BFD session"
                },
                "remote_diagnostic": {
                    "readOnly": true,
                    "type": "string",
                    "description": "A short message indicating what the remote interface's BFD session thinks is wrong in case of a problem",
                    "title": "Diagnostic message of a problem"
                },
                "forwarding": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "True if the BFD session believes this interface may be used to forward traffic",
                    "title": "True if the BFD session believes this interface may be used to forward traffic"
                },
                "diagnostic": {
                    "readOnly": true,
                    "type": "string",
                    "description": "A short message indicating what the BFD session thinks is wrong in case of a problem",
                    "title": "Diagnostic message of a problem"
                }
            },
            "title": "BFD information"
        },
        "InterfaceNeighborProperties": {
            "x-vmw-nsx-module": "Lldp",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Lldp",
                    "type": "object",
                    "properties": {
                        "ifindex": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Interface index",
                            "title": "Interface index"
                        },
                        "neighbors": {
                            "description": "Neighbor properties",
                            "title": "Neighbor properties",
                            "items": {
                                "$ref": "#/definitions/NeighborProperties"
                            },
                            "readOnly": true,
                            "uniqueItems": true,
                            "type": "array"
                        },
                        "mac": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Interface MAC address",
                            "title": "Interface MAC address"
                        },
                        "name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Interface Name",
                            "title": "Interface Name"
                        }
                    }
                }
            ],
            "description": "Interface neighbor properties",
            "title": "Interface neighbor properties"
        },
        "StaticIpListSpec": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/IpAssignmentSpec"
                },
                {
                    "required": [
                        "subnet_mask",
                        "ip_list",
                        "default_gateway"
                    ],
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "subnet_mask": {
                            "description": "Subnet mask",
                            "format": "ip",
                            "readOnly": false,
                            "type": "string"
                        },
                        "ip_list": {
                            "description": "List of IPs for transport node host switch virtual tunnel endpoints",
                            "title": "List of IPs for transport node host switch virtual tunnel endpoints",
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "readOnly": false,
                            "maxItems": 32,
                            "type": "array"
                        },
                        "default_gateway": {
                            "description": "Gateway IP",
                            "format": "ip",
                            "readOnly": false,
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "IP assignment specification for Static IP List.",
            "title": "IP assignment specification for Static IP List."
        },
        "SshServiceProperties": {
            "description": "SSH Service properties",
            "title": "SSH Service properties",
            "required": [
                "start_on_boot"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "start_on_boot": {
                    "type": "boolean",
                    "description": "Start service when system boots",
                    "title": "Start service when system boots"
                }
            }
        },
        "LoginCredential": {
            "description": "Base type for various login credential types",
            "title": "Base type for various login credential types",
            "required": [
                "credential_type"
            ],
            "discriminator": "credential_type",
            "x-vmw-nsx-module": "Types",
            "type": "object",
            "properties": {
                "credential_type": {
                    "type": "string",
                    "description": "Possible values are 'UsernamePasswordLoginCredential', 'VerifiableAsymmetricLoginCredential'.",
                    "title": "Login credential, for example username-password-thumbprint or certificate based, etc"
                }
            }
        },
        "LbHttpRequestUriRewriteAction": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleAction"
                },
                {
                    "required": [
                        "uri"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "uri_arguments": {
                            "type": "string",
                            "description": "Query string of URI, typically contains key value pairs, for example:\nfoo1=bar1&foo2=bar2\n",
                            "title": "URI arguments"
                        },
                        "uri": {
                            "type": "string",
                            "description": "URI of HTTP request",
                            "title": "URI of HTTP request"
                        }
                    }
                }
            ],
            "description": "This action is used to rewrite URIs in matched HTTP request messages.\nSpecify the uri and uri_arguments fields in this condition to rewrite the\nmatched HTTP request message's URI and URI arguments to the new values.\nFull URI scheme of HTTP messages have following syntax:\nscheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]\nThe uri field of this action is used to rewrite the /path part in above\nscheme. And the uri_arguments field is used to rewrite the query part.\nCaptured variables and built-in variables can be used in the uri and\nuri_arguments fields.\nCheck the example in LbRuleAction to see how to use variables in this\naction.\n",
            "title": "Action to rewrite HTTP request URIs."
        },
        "LbPassiveMonitor": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbMonitor"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "max_fails": {
                            "description": "When the consecutive failures reach this value, then the member is\nconsidered temporarily unavailable for a configurable period\n",
                            "title": "number of consecutive connection failures",
                            "default": 5,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "timeout": {
                            "description": "After this timeout period, the member is tried again for a new\nconnection to see if it is available.\n",
                            "title": "timeout in seconds before it is selected again for a new connection",
                            "default": 5,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "SIPacketsDroppedBySecurity": {
            "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
            "type": "object",
            "properties": {
                "spoof_guard_dropped": {
                    "items": {
                        "$ref": "#/definitions/SIPacketTypeAndCounter"
                    },
                    "type": "array",
                    "description": "The packets dropped by \"Spoof Guard\"; supported packet types are IPv4, IPv6, ARP, ND, non-IP.",
                    "title": "The packets dropped by \"Spoof Guard\"; supported packet types are IPv4, IPv6, ARP, ND, non-IP."
                },
                "dhcp_server_dropped_ipv4": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of IPv4 packets dropped by \"DHCP server block\".",
                    "title": "The number of IPv4 packets dropped by \"DHCP server block\"."
                },
                "dhcp_server_dropped_ipv6": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of IPv6 packets dropped by \"DHCP server block\".",
                    "title": "The number of IPv6 packets dropped by \"DHCP server block\"."
                },
                "dhcp_client_dropped_ipv4": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of IPv4 packets dropped by \"DHCP client block\".",
                    "title": "The number of IPv4 packets dropped by \"DHCP client block\"."
                },
                "bpdu_filter_dropped": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of packets dropped by \"BPDU filter\".",
                    "title": "The number of packets dropped by \"BPDU filter\"."
                },
                "dhcp_client_dropped_ipv6": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of IPv6 packets dropped by \"DHCP client block\".",
                    "title": "The number of IPv6 packets dropped by \"DHCP client block\"."
                }
            }
        },
        "CsrList": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "CertificateManager",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/Csr"
                            },
                            "readOnly": false,
                            "type": "array",
                            "description": "CSR list"
                        }
                    }
                }
            ],
            "description": "Csr queries result",
            "title": "Csr queries result"
        },
        "EgressRateShaper": {
            "x-vmw-nsx-module": "QosSwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/QosBaseRateShaper"
                },
                {
                    "x-vmw-nsx-module": "QosSwitchingProfile",
                    "type": "object",
                    "properties": {
                        "average_bandwidth_mbps": {
                            "description": "Average bandwidth in Mb/s",
                            "format": "int32",
                            "default": 0,
                            "title": "Average bandwidth in Mb/s",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "peak_bandwidth_mbps": {
                            "description": "Peak bandwidth in Mb/s",
                            "format": "int32",
                            "default": 0,
                            "title": "Peak bandwidth in Mb/s",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "burst_size_bytes": {
                            "description": "Burst size in bytes",
                            "format": "int32",
                            "default": 0,
                            "title": "Burst size in bytes",
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "A shaper that specifies egress rate properties in Mb/s",
            "title": "A shaper that specifies egress rate properties in Mb/s"
        },
        "MacAddressListResult": {
            "x-vmw-nsx-module": "AggSvcLogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "logical_switch_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the logical Switch",
                            "title": "The id of the logical Switch"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MacTableEntry"
                            },
                            "type": "array"
                        },
                        "transport_node_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Transport node identifier",
                            "title": "Transport node identifier"
                        }
                    }
                }
            ]
        },
        "TraceflowObservationCounters": {
            "x-vmw-nsx-module": "Traceflow",
            "type": "object",
            "properties": {
                "forwarded_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of forwarded observations for this traceflow round.",
                    "title": "Forwarded observation count"
                },
                "dropped_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of dropped observations for this round.",
                    "title": "Dropped observation count"
                },
                "delivered_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of delivered observations for this traceflow round.",
                    "title": "Delivered observation count"
                },
                "received_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of received observations for this traceflow round.",
                    "title": "Received observation count"
                }
            }
        },
        "LogicalPortStatusSummary": {
            "x-vmw-nsx-module": "AggSvcLogicalPort",
            "required": [
                "total_ports",
                "up_ports"
            ],
            "type": "object",
            "properties": {
                "total_ports": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of logical ports.",
                    "title": "The total number of logical ports."
                },
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "up_ports": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of logical ports whose Operational status is UP",
                    "title": "The number of logical ports whose Operational status is UP"
                },
                "filters": {
                    "items": {
                        "$ref": "#/definitions/Filter"
                    },
                    "type": "array",
                    "description": "The filters used to find the logical ports- TransportZone id, LogicalSwitch id or LogicalSwitchProfile id",
                    "title": "The filters used to find the logical ports- TransportZone id, LogicalSwitch id or LogicalSwitchProfile id"
                }
            }
        },
        "InstructionInfo": {
            "x-vmw-nsx-module": "ClusterRestore",
            "type": "object",
            "description": "Details of the instructions displayed during restore process",
            "properties": {
                "fields": {
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "A list of fields that are displayable to users in a table",
                    "title": "Displayable fields"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "UUID of the instruction",
                    "title": "UUID of the instruction"
                },
                "actions": {
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "A list of actions that are to be applied to resources",
                    "title": "Actions list"
                },
                "name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Instruction name",
                    "title": "Instruction name"
                }
            },
            "title": "Details of the instructions displayed during restore process"
        },
        "DirectoryDomainSyncNodeListResults": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DirectoryDomainSyncNode"
                            },
                            "type": "array",
                            "description": "List of Directory Domain Synchronization Nodes",
                            "title": "List of Directory Domain Synchronization Nodes"
                        }
                    }
                }
            ],
            "description": "List of Directory Domain Synchronization Nodes",
            "title": "List of Directory Domain Synchronization Nodes"
        },
        "HeatMapTransportZoneStatus": {
            "x-vmw-nsx-module": "Heatmap",
            "type": "object",
            "properties": {
                "degraded_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of transport nodes that are degraded",
                    "title": "Number of transport nodes that are degraded"
                },
                "down_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of transport nodes that are down",
                    "title": "Number of transport nodes that are down"
                },
                "unknown_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of transport nodes with unknown status",
                    "title": "Number of transport nodes with unknown status"
                },
                "up_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of transport nodes that are up",
                    "title": "Number of transport nodes that are up"
                }
            }
        },
        "Tooltip": {
            "description": "Tooltip to be shown while hovering over the dashboard UI element.",
            "title": "Tooltip",
            "required": [
                "text"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "text": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Text to be shown on tooltip while hovering over UI element. The text would be wrapped if it exceeds 80 chars.",
                    "title": "Textbox shown at tooltip"
                },
                "condition": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "If the condition is met then the tooltip will be applied. If no condition is provided, then the tooltip will be applied unconditionally. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.",
                    "title": "Expression for evaluating condition"
                }
            }
        },
        "MigrationBundleId": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "description": "Identifier of the migration bundle",
            "properties": {
                "bundle_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier of bundle upload",
                    "title": "Bundle Id of migration bundle uploaded"
                }
            },
            "title": "Bundle id of migration bundle"
        },
        "LbVirtualServerWithRule": {
            "x-vmw-nsx-module": "LoadBalancer",
            "required": [
                "virtual_server"
            ],
            "type": "object",
            "properties": {
                "rules": {
                    "items": {
                        "$ref": "#/definitions/LbRule"
                    },
                    "type": "array",
                    "description": "It is used to add rules, update rules and bind rules to the virtual\nserver.\nTo add new rules, make sure that the rules have no identifier\nspecified, the new rules are automatically generated and associated to\nthe virtual server.\nIf the virtual server need to consume some existed rules without\nchange, those rules should not be specified in the list, otherwise,\nthe rules are updated.\nFor update_with_rules action, it supports rules delete and update.\nTo delete old rules, the rules should not be configured in new action,\nthe UUID of deleted rules should be removed from rule_ids.\nTo update rules, the rules should be specified with new change and\nconfigured with identifier.\nIf there are some rules which are not modified, those rule should not\nbe specified in the rules list, the UUID list of rules should be\nspecified in rule_ids of LbVirtualServer.\n",
                    "title": "Associated load balancer rules"
                },
                "virtual_server": {
                    "title": "Virtual server configuration",
                    "description": "If rules need to be associated to the virtual server, please set rules\nproperties of LbVirtualServerWithRule with rule list configuration.\nFor the rules which are not modified but associated to the virtual\nserver, the rule UUID list should be specified in rule_ids property of\nLbVirtualServer and the associated rules should not be specified in\nrules of LbVirtualServerWithRule.\n",
                    "$ref": "#/definitions/LbVirtualServer"
                }
            }
        },
        "MetadataProxy": {
            "x-vmw-nsx-module": "MetadataProxy",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "MetadataProxy",
                    "required": [
                        "metadata_server_url",
                        "edge_cluster_id"
                    ],
                    "type": "object",
                    "properties": {
                        "secret": {
                            "type": "string",
                            "description": "secret to access metadata server",
                            "title": "secret to access metadata server"
                        },
                        "metadata_server_ca_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "The CAs referenced here must be uploaded to the truststore using the API\nPOST /api/v1/trust-management/certificates?action=import.\nUser needs to ensure a correct CA for this metedata server is used. The REST API can\nnot detect a wrong CA which was used to verify a different server. If the Metadata\nProxy reports an ERROR or NO_BACKUP status, user can check the metadata proxy log\nat transport node for a possible CA issue.\n",
                            "title": "uuids of CAs to verify metadata server certificate"
                        },
                        "edge_cluster_member_indexes": {
                            "description": "If none is provided, the NSX will auto-select two edge-nodes from the given edge cluster.\nIf user provides only one edge node, there will be no HA support.\n",
                            "title": "edge cluster member indexes",
                            "minItems": 0,
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 2,
                            "uniqueItems": true,
                            "type": "array"
                        },
                        "crypto_protocols": {
                            "items": {
                                "description": "Metadata proxy supported cryptographic protocol",
                                "enum": [
                                    "TLS_V1",
                                    "TLS_V1_1",
                                    "TLS_V1_2"
                                ],
                                "type": "string"
                            },
                            "readOnly": false,
                            "type": "array",
                            "description": "The cryptographic protocols listed here are supported by the metadata proxy.\nThe TLSv1.1 and TLSv1.2 are supported by default.\n",
                            "title": "metadata proxy supported cryptographic protocols."
                        },
                        "metadata_server_url": {
                            "type": "string",
                            "description": "The URL in format scheme://host:port/path. Please note, the scheme supports only http\nand https as of now, port supports range 3000 - 9000, inclusive.\n",
                            "title": "metadata server url"
                        },
                        "attached_logical_port_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "id of attached logical port",
                            "title": "id of attached logical port"
                        },
                        "edge_cluster_id": {
                            "type": "string",
                            "description": "edge cluster uuid",
                            "title": "edge cluster uuid"
                        }
                    }
                }
            ]
        },
        "LbVirtualServerStatus": {
            "x-vmw-nsx-module": "AggSvcLb",
            "required": [
                "virtual_server_id"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "enum": [
                        "UP",
                        "PARTIALLY_UP",
                        "PRIMARY_DOWN",
                        "DOWN",
                        "DETACHED",
                        "DISABLED",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "UP means that all primary members in default pool are in UP status.\nFor L7 virtual server, if there is no default pool, the virtual server\nwould be treated as UP.\nPARTIALLY_UP means that some(not all) primary members in default pool\nare in UP status. The size of these active primary members should be\nlarger than or equal to the certain number(min_active_members) which is\ndefined in LbPool. When there are no backup members which are in the UP\nstatus, the number(min_active_members) would be ignored.\nPRIMARY_DOWN means that less than certain(min_active_members) primary\nmembers in default pool are in UP status but backup members are in UP\nstatus, the connections would be dispatched to backup members.\nDOWN means that all primary and backup members are in DOWN status.\nDETACHED means that the virtual server is not bound to any service.\nDISABLED means that the admin state of the virtual server is disabled.\nUNKOWN means that no status reported from transport-nodes. The\nassociated load balancer service may be working(or not working).\n",
                    "title": "Virtual server status"
                },
                "last_update_timestamp": {
                    "type": "integer",
                    "description": "Timestamp when the data was last updated.",
                    "format": "int64"
                },
                "virtual_server_id": {
                    "type": "string",
                    "description": "load balancer virtual server identifier",
                    "title": "load balancer virtual server identifier"
                }
            }
        },
        "LbTcpHeaderCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "source_port"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "source_port": {
                            "description": "TCP source port of HTTP message",
                            "format": "port-or-range",
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "This condition is used to match TCP header fields of HTTP messages.\nCurrently, only the TCP source port is supported. Ports can be expressed as\na single port number like 80, or a port range like 1024-1030.\n",
            "title": "Condition to match TCP header fields"
        },
        "ComponentMigrationStatus": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "IN_PROGRESS",
                        "NOT_STARTED",
                        "PAUSED"
                    ],
                    "type": "string",
                    "description": "Migration status of component",
                    "title": "Migration status of component"
                },
                "percent_complete": {
                    "readOnly": true,
                    "type": "number",
                    "description": "Indicator of migration progress in percentage",
                    "title": "Indicator of migration progress in percentage"
                },
                "can_skip": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Can the migration of the remaining units in this component be skipped",
                    "title": "Can the migration of the remaining units in this component be skipped"
                },
                "details": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Details about the migration status",
                    "title": "Details about the migration status"
                },
                "component_type": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Component type for the migration status",
                    "title": "Component type for the migration status"
                }
            }
        },
        "EffectiveMemberTypeListResult": {
            "x-vmw-nsx-module": "NSGroup",
            "required": [
                "results"
            ],
            "type": "object",
            "properties": {
                "results": {
                    "items": {
                        "description": "Resource type valid for use in an NSGroupExpression",
                        "enum": [
                            "NSGroup",
                            "IPSet",
                            "MACSet",
                            "LogicalSwitch",
                            "LogicalPort",
                            "VirtualMachine",
                            "DirectoryGroup"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Collection of member types for the given NSGroup",
                    "title": "Collection of member types for the given NSGroup"
                },
                "result_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Count of the member types in the results array",
                    "title": "Count of the member types in the results array"
                }
            }
        },
        "LogicalRouterRouteEntry": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "required": [
                "route_type",
                "network"
            ],
            "type": "object",
            "properties": {
                "lr_component_id": {
                    "type": "string",
                    "description": "Logical router component(Service Router/Distributed Router) id",
                    "title": "Logical router component(Service Router/Distributed Router) id"
                },
                "next_hop": {
                    "description": "The IP address of the next hop",
                    "format": "ip",
                    "type": "string"
                },
                "lr_component_type": {
                    "type": "string",
                    "description": "Logical router component(Service Router/Distributed Router) type",
                    "title": "Logical router component(Service Router/Distributed Router) type"
                },
                "network": {
                    "description": "CIDR network address",
                    "format": "ipv4-cidr-block",
                    "type": "string"
                },
                "route_type": {
                    "type": "string",
                    "description": "Route type (USER, CONNECTED, NSX_INTERNAL,..)",
                    "title": "Route type (USER, CONNECTED, NSX_INTERNAL,..)"
                },
                "logical_router_port_id": {
                    "type": "string",
                    "description": "The id of the logical router port which is used as the next hop",
                    "title": "The id of the logical router port which is used as the next hop"
                },
                "admin_distance": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The admin distance of the next hop",
                    "title": "The admin distance of the next hop"
                }
            }
        },
        "TransportNodeStatus": {
            "x-vmw-nsx-module": "Heatmap",
            "type": "object",
            "properties": {
                "status": {
                    "enum": [
                        "UP",
                        "DOWN",
                        "DEGRADED",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "Roll-up status of pNIC, management connection, control connection, tunnel status",
                    "title": "Roll-up status of pNIC, management connection, control connection, tunnel status"
                },
                "node_uuid": {
                    "type": "string",
                    "description": "Transport node uuid",
                    "title": "Transport node uuid"
                },
                "mgmt_connection_status": {
                    "enum": [
                        "UP",
                        "DOWN"
                    ],
                    "type": "string",
                    "description": "Management connection status",
                    "title": "Management connection status"
                },
                "control_connection_status": {
                    "title": "Control connection status",
                    "description": "Control connection status",
                    "$ref": "#/definitions/StatusCount"
                },
                "pnic_status": {
                    "title": "pNIC status",
                    "description": "pNIC status",
                    "$ref": "#/definitions/StatusCount"
                },
                "node_display_name": {
                    "type": "string",
                    "description": "Transport node display name",
                    "title": "Display name"
                },
                "tunnel_status": {
                    "title": "Tunnel Status",
                    "description": "Tunnel Status",
                    "$ref": "#/definitions/TunnelStatusCount"
                }
            }
        },
        "DiscoveredResource": {
            "x-vmw-nsx-module": "Common",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Common",
                    "type": "object",
                    "properties": {
                        "_last_sync_time": {
                            "description": "Timestamp of last modification",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "display_name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "Defaults to ID if not set",
                            "title": "Identifier to use when displaying entity in logs or GUI"
                        },
                        "description": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "Description of this resource",
                            "title": "Description of this resource"
                        },
                        "resource_type": {
                            "readOnly": false,
                            "type": "string",
                            "description": "The type of this resource."
                        },
                        "tags": {
                            "items": {
                                "$ref": "#/definitions/Tag"
                            },
                            "type": "array",
                            "description": "Opaque identifiers meaningful to the API user",
                            "maxItems": 30,
                            "title": "Opaque identifiers meaningful to the API user"
                        }
                    }
                }
            ],
            "description": "Base class for resources that are discovered and automatically updated",
            "title": "Base class for resources that are discovered and automatically updated"
        },
        "BackupOperationStatus": {
            "description": "Backup operation status",
            "title": "Backup operation status",
            "required": [
                "backup_id",
                "success"
            ],
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "properties": {
                "backup_id": {
                    "type": "string",
                    "description": "Unique identifier of a backup",
                    "title": "Unique identifier of a backup"
                },
                "end_time": {
                    "type": "integer",
                    "description": "Time when operation was ended",
                    "format": "int64"
                },
                "success": {
                    "type": "boolean",
                    "description": "True if backup is successfully completed, else false",
                    "title": "True if backup is successfully completed, else false"
                },
                "start_time": {
                    "type": "integer",
                    "description": "Time when operation was started",
                    "format": "int64"
                },
                "error_message": {
                    "type": "string",
                    "description": "Error code details",
                    "title": "Error code details"
                },
                "error_code": {
                    "enum": [
                        "BACKUP_NOT_RUN_ON_MASTER",
                        "BACKUP_SERVER_UNREACHABLE",
                        "BACKUP_AUTHENTICATION_FAILURE",
                        "BACKUP_PERMISSION_ERROR",
                        "BACKUP_TIMEOUT",
                        "BACKUP_BAD_FINGERPRINT",
                        "BACKUP_GENERIC_ERROR"
                    ],
                    "type": "string",
                    "description": "Error code",
                    "title": "Error code"
                }
            }
        },
        "BGPCommunityListListResult": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/BGPCommunityList"
                            },
                            "type": "array",
                            "description": "Paginated list of bgp community lists",
                            "title": "List of bgp communities"
                        }
                    }
                }
            ]
        },
        "LbServiceStatus": {
            "x-vmw-nsx-module": "AggSvcLb",
            "required": [
                "service_id"
            ],
            "type": "object",
            "properties": {
                "pools": {
                    "items": {
                        "$ref": "#/definitions/LbPoolStatus"
                    },
                    "type": "array",
                    "description": "status of load balancer pools",
                    "title": "status of load balancer pools"
                },
                "cpu_usage": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Cpu usage in percentage",
                    "title": "Cpu usage in percentage"
                },
                "active_transport_nodes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Ids of load balancer service related active transport nodes",
                    "title": "Ids of load balancer service related active transport nodes"
                },
                "memory_usage": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Memory usage in percentage",
                    "title": "Memory usage in percentage"
                },
                "service_id": {
                    "type": "string",
                    "description": "Load balancer service identifier",
                    "title": "Load balancer service identifier"
                },
                "last_update_timestamp": {
                    "type": "integer",
                    "description": "Timestamp when the data was last updated",
                    "format": "int64"
                },
                "standby_transport_nodes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Ids of load balancer service related standby transport nodes",
                    "title": "Ids of load balancer service related standby transport nodes"
                },
                "error_message": {
                    "type": "string",
                    "description": "Error message, if available",
                    "title": "Error message, if available"
                },
                "virtual_servers": {
                    "items": {
                        "$ref": "#/definitions/LbVirtualServerStatus"
                    },
                    "type": "array",
                    "description": "status of load balancer virtual servers",
                    "title": "status of load balancer virtual servers"
                },
                "service_status": {
                    "enum": [
                        "UP",
                        "DOWN",
                        "ERROR",
                        "NO_STANDBY",
                        "DETACHED",
                        "DISABLED",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "UP means the load balancer service is working fine on both\ntransport-nodes(if have);\nDOWN means the load balancer service is down on both transport-nodes\n(if have), hence the load balancer will not respond to any requests;\nERROR means error happens on transport-node(s) or no status is\nreported from transport-node(s). The load balancer service may be\nworking (or not working);\nNO_STANDBY means load balancer service is working in one of the\ntransport node while not in the other transport-node (if have). Hence\nif the load balancer service in the working transport-node goes down,\nthe load balancer service will go down;\nDETACHED means that the load balancer service has no attachment setting\nand is not instantiated in any transport nodes;\nDISABLED means that admin state of load balancer service is DISABLED;\nUNKNOWN means that no status reported from transport-nodes.The load\nbalancer service may be working(or not working).\n",
                    "title": "Status of load balancer service"
                }
            }
        },
        "AssignedByDhcp": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/IpAssignmentSpec"
                },
                {
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object"
                }
            ],
            "description": "This type can be specified in ip assignment spec of host switch if DHCP based IP assignment is desired for host switch virtual tunnel endpoints.",
            "title": "DHCP based IP assignment."
        },
        "ServiceAttachmentListResult": {
            "x-vmw-nsx-module": "ServiceInsertion",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertion",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ServiceAttachment"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of the Service Attachments.",
                            "title": "Service-Attachment list"
                        }
                    }
                }
            ],
            "description": "List of Service Attachments.",
            "title": "Service Attachment List"
        },
        "VtepLabelPool": {
            "x-vmw-nsx-module": "VtepLabel",
            "description": "A collection of ranges of virtual tunnel endpoint labels",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "VtepLabel",
                    "required": [
                        "ranges"
                    ],
                    "type": "object",
                    "properties": {
                        "ranges": {
                            "items": {
                                "$ref": "#/definitions/VtepLabelRange"
                            },
                            "type": "array",
                            "description": "Array of ranges for virtual tunnel endpoint labels",
                            "title": "Array of ranges for virtual tunnel endpoint labels"
                        },
                        "pool_usage": {
                            "readOnly": true,
                            "title": "Pool usage statistics",
                            "description": "Pool usage statistics",
                            "$ref": "#/definitions/VtepLabelPoolUsage"
                        }
                    }
                }
            ]
        },
        "NamedTeamingPolicy": {
            "x-vmw-nsx-module": "UplinkHostSwitchProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/TeamingPolicy"
                },
                {
                    "required": [
                        "name"
                    ],
                    "x-vmw-nsx-module": "UplinkHostSwitchProfile",
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "An uplink teaming policy of a given name defined in UplinkHostSwitchProfile. The names of all NamedTeamingPolicies in an UplinkHostSwitchProfile must be different, but a name can be shared by different UplinkHostSwitchProfiles. Different TransportNodes can use different NamedTeamingPolicies having the same name in different UplinkHostSwitchProfiles to realize an uplink teaming policy on a logical switch. An uplink teaming policy on a logical switch can be any policy defined by a user; it does not have to be a single type of FAILOVER or LOADBALANCE. It can be a combination of types, for instance, a user can define a policy with name \"MyHybridTeamingPolicy\" as \"FAILOVER on all ESX TransportNodes and LOADBALANCE on all KVM TransportNodes\". The name is the key of the teaming policy and can not be changed once assigned.",
                            "title": "The name of the uplink teaming policy"
                        }
                    }
                }
            ],
            "description": "Uplink Teaming Policy with a name that can be referenced by logical switches",
            "title": "Uplink Teaming Policy with a name that can be referenced by logical switches"
        },
        "IpfixDfwConfig": {
            "x-vmw-nsx-module": "Ipfix",
            "allOf": [
                {
                    "$ref": "#/definitions/IpfixConfig"
                },
                {
                    "required": [
                        "priority",
                        "collector",
                        "observation_domain_id"
                    ],
                    "x-vmw-nsx-module": "Ipfix",
                    "type": "object",
                    "properties": {
                        "priority": {
                            "description": "This priority field is used to resolve conflicts in Logical Ports\nwhich are covered by more than one IPFIX profiles. The IPFIX\nexporter will send records to Collectors in highest priority\nprofile (lowest number) only.\n",
                            "title": "Config Priority",
                            "default": 0,
                            "format": "int64",
                            "maximum": 65536,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "collector": {
                            "type": "string",
                            "description": "Each IPFIX DFW config can have its own collector config.\n",
                            "title": "UUID of IPFIX DFW Collector Config"
                        },
                        "active_flow_export_timeout": {
                            "description": "For long standing active flows, IPFIX records will be sent per timeout period\n",
                            "title": "Active flow export timeout (minutes)",
                            "default": 1,
                            "format": "int64",
                            "maximum": 60,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "template_parameters": {
                            "title": "Template Parameters",
                            "description": "An object that indicates whether each corresponding template parameter\nis required or not.\n",
                            "$ref": "#/definitions/IpfixDfwTemplateParameters"
                        },
                        "observation_domain_id": {
                            "description": "An identifier that is unique to the exporting process and used to\nmeter the Flows.\n",
                            "format": "int64",
                            "title": "Observation domain ID",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "It defines IPFIX DFW Configuration.",
            "title": "IPFIX Config for the DFW Module"
        },
        "MigrationUnitList": {
            "x-vmw-nsx-module": "Migration",
            "required": [
                "list"
            ],
            "type": "object",
            "properties": {
                "list": {
                    "items": {
                        "$ref": "#/definitions/MigrationUnit"
                    },
                    "type": "array",
                    "description": "Collection of Migration units",
                    "title": "Collection of Migration units"
                }
            }
        },
        "X509Crl": {
            "x-vmw-nsx-module": "CertificateManager",
            "type": "object",
            "description": "A CRL is a time-stamped list identifying revoked certificates.",
            "properties": {
                "next_update": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Next update time for the CRL"
                },
                "version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "CRL's version number either 1 or 2"
                },
                "crl_entries": {
                    "items": {
                        "$ref": "#/definitions/X509CrlEntry"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "list of X509CrlEntry"
                },
                "issuer": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Issuer's distinguished name(DN)"
                }
            },
            "title": "A CRL is a time-stamped list identifying revoked certificates."
        },
        "DiscoveredNodeNetworkInterfaces": {
            "description": "All the network interfaces of the discovered node",
            "title": "Discovered node network interfaces",
            "required": [
                "discovered_node_id"
            ],
            "x-vmw-nsx-module": "InventoryCmObj",
            "type": "object",
            "properties": {
                "discovered_node_id": {
                    "type": "string",
                    "description": "Id of the discovered node",
                    "title": "Discovered node Id"
                },
                "network_interfaces": {
                    "items": {
                        "$ref": "#/definitions/DiscoveredNodeInterfaceProperties"
                    },
                    "type": "array",
                    "description": "Network interfaces of the node",
                    "title": "Discovered Node interfaces"
                }
            }
        },
        "LogicalRouterPortArpTableInCsvFormat": {
            "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalRouterPortArpCsvRecord"
                            },
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "NodeInfoListResult": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NodeInfo"
                            },
                            "type": "array",
                            "description": "Paged Collection of Nodes",
                            "title": "Paged Collection of Nodes"
                        }
                    }
                }
            ]
        },
        "BfdConfig": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "type": "object",
                    "properties": {
                        "receive_interval": {
                            "description": "the time interval (in milliseconds) between heartbeat packets for BFD when receiving heartbeats.",
                            "title": "Receive interval for heartbeats",
                            "default": 1000,
                            "format": "int64",
                            "maximum": 60000,
                            "minimum": 100,
                            "type": "integer"
                        },
                        "declare_dead_multiple": {
                            "description": "Number of times a packet is missed before BFD declares the neighbor down.",
                            "title": "Number of times a packet is missed before BFD declares the neighbor down.",
                            "default": 3,
                            "format": "int64",
                            "maximum": 16,
                            "minimum": 2,
                            "type": "integer"
                        },
                        "enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to enable BFD for this LogicalRouter",
                            "title": "Flag to enable BFD for this LogicalRouter"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "transmit_interval": {
                            "description": "the time interval (in milliseconds) between heartbeat packets for BFD when sending heartbeats.",
                            "title": "Transmit interval for heartbeats",
                            "default": 1000,
                            "format": "int64",
                            "maximum": 60000,
                            "minimum": 100,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "BFD configuration for LogicalRouter",
            "title": "BFD configuration for LogicalRouter"
        },
        "IpfixConfig": {
            "x-vmw-nsx-module": "Ipfix",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "resource_type"
                    ],
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "Ipfix",
                    "type": "object",
                    "properties": {
                        "applied_tos": {
                            "description": "List of objects where the IPFIX Config will be enabled.",
                            "title": "AppliedTo List",
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        },
                        "resource_type": {
                            "description": "Supported IPFIX Config Types.",
                            "enum": [
                                "IpfixSwitchConfig",
                                "IpfixDfwConfig"
                            ],
                            "readOnly": false,
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "IPFIX Config base representation",
            "title": "IPFIX Config base representation"
        },
        "UserInfo": {
            "x-vmw-nsx-module": "AAA",
            "type": "object",
            "description": "Authenticated User Info",
            "properties": {
                "user_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "User Name",
                    "title": "User Name"
                },
                "roles": {
                    "items": {
                        "$ref": "#/definitions/NsxRole"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Permissions",
                    "title": "Permissions"
                }
            },
            "title": "Authenticated User Info"
        },
        "ManagementClusterStatus": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "INITIALIZING",
                        "UNSTABLE",
                        "STABLE",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "The current status of the management cluster",
                    "title": "The current status of the management cluster"
                },
                "offline_nodes": {
                    "items": {
                        "$ref": "#/definitions/ManagementPlaneBaseNodeInfo"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Current missing management plane nodes"
                },
                "required_members_for_initialization": {
                    "items": {
                        "$ref": "#/definitions/ClusterInitializationNodeInfo"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The details of the cluster nodes required for cluster initialization"
                },
                "online_nodes": {
                    "items": {
                        "$ref": "#/definitions/ManagementPlaneBaseNodeInfo"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Current alive management plane nodes"
                }
            }
        },
        "LbHttpRequestUriCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "uri"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "match_type": {
                            "description": "Match type of URI",
                            "default": "REGEX",
                            "enum": [
                                "STARTS_WITH",
                                "ENDS_WITH",
                                "EQUALS",
                                "CONTAINS",
                                "REGEX"
                            ],
                            "type": "string"
                        },
                        "uri": {
                            "type": "string",
                            "description": "A string used to identify resource",
                            "title": "A string used to identify resource"
                        },
                        "case_sensitive": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, case is significant when comparing URI.\n",
                            "title": "A case sensitive flag for URI comparing"
                        }
                    }
                }
            ],
            "description": "This condition is used to match URIs(Uniform Resource Identifier) of HTTP\nrequest messages. The URI field can be specified as a regular expression.\nIf an HTTP request message is requesting an URI which matches specified\nregular expression, it matches the condition.\nThe syntax of whole URI looks like this:\nscheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]\nThis condition matches only the path part of entire URI.\nWhen match_type field is specified as REGEX, the uri field is used as a\nregular expression to match URI path of HTTP requests. For example, to\nmatch any URI that has \"/image/\" or \"/images/\", uri field can be specified\nas: \"/image[s]?/\".\nNamed capturing groups can be used in the uri field to capture substrings\nof matched URIs and store them in variables for use in LbRuleAction. For\nexample, specify uri field as:\n\"/news/(?&lt;year&gt;\\d+)/(?&lt;month&gt;\\d+)/(?&lt;article&gt;.*)\"\nIf the URI path is /articles/news/2017/06/xyz.html, then substring \"2017\"\nis captured in variable year, \"06\" is captured in variable month, and\n\"xyz.html\" is captured in variable article. These variables can then\nbe used in an LbRuleAction field which supports variables, such as uri\nfield of LbHttpRequestUriRewriteAction. For example, set the uri field\nof LbHttpRequestUriRewriteAction as:\n\"/articles/news/$year-$month-$article\"\nThen the URI path /articles/news/2017/06/xyz.html is rewritten to:\n\"/articles/news/2017-06-xyz.html\"\n",
            "title": "Condition to match URIs of HTTP request messages"
        },
        "AdvertisementConfig": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "type": "object",
                    "properties": {
                        "advertise_nsx_connected_routes": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to advertise all connected routes",
                            "title": "Flag to advertise all connected routes"
                        },
                        "advertise_lb_vip": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to advertise lb vip",
                            "title": "Flag to advertise lb vip"
                        },
                        "advertise_static_routes": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to advertise all static routes",
                            "title": "Flag to advertise all static routes"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "advertise_nat_routes": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to advertise all routes of nat",
                            "title": "Flag to advertise all routes of nat"
                        },
                        "enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to enable this configuration",
                            "title": "Flag to enable this configuration"
                        },
                        "advertise_lb_snat_ip": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to advertise all lb SNAT ips",
                            "title": "Flag to advertise all lb SNAT ips"
                        }
                    }
                }
            ]
        },
        "License": {
            "x-vmw-nsx-module": "License",
            "description": "license properties",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "License",
                    "type": "object",
                    "properties": {
                        "features": {
                            "readOnly": true,
                            "type": "string",
                            "description": "semicolon delimited feature list",
                            "title": "semicolon delimited feature list"
                        },
                        "description": {
                            "readOnly": true,
                            "type": "string",
                            "description": "license edition",
                            "title": "license edition"
                        },
                        "product_version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "product version",
                            "title": "product version"
                        },
                        "expiry": {
                            "description": "date that license expires",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "is_eval": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "true for evalution license",
                            "title": "true for evalution license"
                        },
                        "is_mh": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "multi-hypervisor support",
                            "title": "multi-hypervisor support"
                        },
                        "license_key": {
                            "type": "string",
                            "description": "license key",
                            "title": "license key"
                        },
                        "is_expired": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "whether the license has expired",
                            "title": "whether the license has expired"
                        },
                        "product_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "product name",
                            "title": "product name"
                        },
                        "capacity_type": {
                            "readOnly": true,
                            "enum": [
                                "VM",
                                "CPU",
                                "USER"
                            ],
                            "type": "string",
                            "description": "license metric",
                            "title": "license metric"
                        },
                        "quantity": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "license capacity; 0 for unlimited",
                            "title": "license capacity; 0 for unlimited"
                        }
                    }
                }
            ]
        },
        "NodeStatus": {
            "x-vmw-nsx-module": "FabricNode",
            "type": "object",
            "description": "Runtime status information of the fabric node.",
            "properties": {
                "mpa_connectivity_status": {
                    "readOnly": true,
                    "enum": [
                        "UP",
                        "DOWN",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "Indicates the fabric node's MP<->MPA channel connectivity status, UP, DOWN, UNKNOWN.",
                    "title": "Indicates the fabric node's MP<->MPA channel connectivity status, UP, DOWN, UNKNOWN."
                },
                "lcp_connectivity_status_details": {
                    "description": "Details, if any, about the current LCP<->CCP channel connectivity status of the fabric node.",
                    "title": "Details, if any, about the current LCP<->CCP channel connectivity status of the fabric node.",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/ControlConnStatus"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "mpa_connectivity_status_details": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Details, if any, about the current MP<->MPA channel connectivity status of the fabric node.",
                    "title": "Details, if any, about the current MP<->MPA channel connectivity status of the fabric node."
                },
                "external_id": {
                    "type": "string",
                    "description": "HostNode external id",
                    "title": "HostNode external id"
                },
                "software_version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Software version of the fabric node.",
                    "title": "Software version of the fabric node."
                },
                "maintenance_mode": {
                    "readOnly": true,
                    "enum": [
                        "OFF",
                        "ENTERING",
                        "ON",
                        "EXITING"
                    ],
                    "type": "string",
                    "description": "Indicates the fabric node's status of maintenance mode, OFF, ENTERING, ON, EXITING.",
                    "title": "Indicates the fabric node's status of maintenance mode, OFF, ENTERING, ON, EXITING."
                },
                "inventory_sync_paused": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Is true if inventory sync is paused else false",
                    "title": "Is true if inventory sync is paused else false"
                },
                "system_status": {
                    "readOnly": true,
                    "title": "Node status properties",
                    "description": "Node status properties",
                    "$ref": "#/definitions/NodeStatusProperties"
                },
                "inventory_sync_reenable_time": {
                    "description": "Inventory sync auto re-enable target time, in epoch milis",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "lcp_connectivity_status": {
                    "description": "Indicates the fabric node's LCP<->CCP channel connectivity status, UP, DOWN, DEGRADED, UNKNOWN.",
                    "title": "Indicates the fabric node's LCP<->CCP channel connectivity status, UP, DOWN, DEGRADED, UNKNOWN.",
                    "default": "UNKNOWN",
                    "enum": [
                        "UP",
                        "DOWN",
                        "DEGRADED",
                        "UNKNOWN"
                    ],
                    "readOnly": true,
                    "type": "string"
                },
                "last_heartbeat_timestamp": {
                    "description": "Timestamp of the last heartbeat status change, in epoch milliseconds.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "last_sync_time": {
                    "description": "Timestamp of the last successful update of Inventory, in epoch milliseconds.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "host_node_deployment_status": {
                    "readOnly": true,
                    "enum": [
                        "NOT_PREPARED",
                        "INSTALL_IN_PROGRESS",
                        "INSTALL_FAILED",
                        "INSTALL_SUCCESSFUL",
                        "UNINSTALL_IN_PROGRESS",
                        "UNINSTALL_FAILED",
                        "UNINSTALL_SUCCESSFUL",
                        "UPGRADE_IN_PROGRESS",
                        "UPGRADE_FAILED",
                        "PENDING_UPGRADE",
                        "NOT_AVAILABLE",
                        "VM_DEPLOYMENT_QUEUED",
                        "VM_DEPLOYMENT_IN_PROGRESS",
                        "VM_DEPLOYMENT_FAILED",
                        "VM_POWER_ON_IN_PROGRESS",
                        "VM_POWER_ON_FAILED",
                        "REGISTRATION_PENDING",
                        "NODE_NOT_READY",
                        "NODE_READY",
                        "VM_POWER_OFF_IN_PROGRESS",
                        "VM_POWER_OFF_FAILED",
                        "VM_UNDEPLOY_IN_PROGRESS",
                        "VM_UNDEPLOY_FAILED",
                        "VM_UNDEPLOY_SUCCESSFUL",
                        "EDGE_CONFIG_ERROR",
                        "VM_DEPLOYMENT_RESTARTED",
                        "REGISTRATION_FAILED"
                    ],
                    "type": "string",
                    "description": "This enum specifies the current nsx install state for host node or\ncurrent deployment and ready state for edge node.\nThe ready status 'NODE_READY' indicates whether edge node is\nready to become a transport node.\nThe status 'EDGE_CONFIG_ERROR' indicates that edge hardware or underlying\nhost is not supported.\n",
                    "title": "Install/Uninstall status of deployment."
                }
            },
            "title": "Runtime status information of the fabric node."
        },
        "ClusterGroupStatus": {
            "x-vmw-nsx-module": "Cluster",
            "type": "object",
            "description": "This type contains the attributes and status of a group.",
            "properties": {
                "members": {
                    "items": {
                        "$ref": "#/definitions/ClusterGroupMemberStatus"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Array of group members and their statuses",
                    "title": "Array of group members and their statuses"
                },
                "group_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "UUID of the group",
                    "title": "UUID of the group"
                },
                "leaders": {
                    "items": {
                        "$ref": "#/definitions/ClusterGroupServiceLeader"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Array of group leaders and their attributes",
                    "title": "Array of group leaders and their attributes"
                },
                "group_status": {
                    "readOnly": true,
                    "enum": [
                        "STABLE",
                        "DEGRADED",
                        "UNSTABLE",
                        "UNAVAILABLE"
                    ],
                    "type": "string",
                    "description": "Group status",
                    "title": "Group status"
                },
                "group_type": {
                    "readOnly": true,
                    "enum": [
                        "MANAGER",
                        "CONTROLLER",
                        "POLICY",
                        "HTTP"
                    ],
                    "type": "string",
                    "description": "Type of the group",
                    "title": "Type of the group"
                }
            },
            "title": "Status of a group"
        },
        "VlanMirrorSource": {
            "x-vmw-nsx-module": "PortMirroring",
            "allOf": [
                {
                    "$ref": "#/definitions/MirrorSource"
                },
                {
                    "x-vmw-nsx-module": "PortMirroring",
                    "required": [
                        "vlan_ids"
                    ],
                    "type": "object",
                    "properties": {
                        "vlan_ids": {
                            "minItems": 1,
                            "items": {
                                "type": "integer",
                                "description": "Virtual Local Area Network Identifier",
                                "format": "int64"
                            },
                            "type": "array",
                            "description": "Source VLAN ID list",
                            "title": "Source VLAN ID list"
                        }
                    }
                }
            ]
        },
        "MigrationUnitGroupStatusListResult": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MigrationUnitGroupStatus"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Paged collection of migration status for migration unit groups",
                            "title": "Paged collection of migration status for migration unit groups"
                        }
                    }
                }
            ]
        },
        "MgmtConnStatus": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "properties": {
                "connectivity_status": {
                    "readOnly": true,
                    "enum": [
                        "CONNECTED",
                        "DISCONNECTED",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "Indicates the controller node's MP channel connectivity status",
                    "title": "Indicates the controller node's MP channel connectivity status"
                }
            }
        },
        "LbPersistenceProfileListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbPersistenceProfile"
                            },
                            "type": "array",
                            "description": "paginated list of load balancer persistence profiles",
                            "title": "paginated list of load balancer persistence profiles"
                        }
                    }
                }
            ]
        },
        "StatsConfiguration": {
            "x-vmw-nsx-module": "NsxDashboard",
            "allOf": [
                {
                    "$ref": "#/definitions/WidgetConfiguration"
                },
                {
                    "x-vmw-nsx-module": "NsxDashboard",
                    "type": "object",
                    "properties": {
                        "navigation": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "Hyperlink of the specified UI page that provides details.",
                            "title": "Navigation to a specified UI page"
                        },
                        "stat": {
                            "title": "Expression for feching statistic of an entity",
                            "description": "Expression that fetches statistic. It can be used to show the characteristics of entities such as Logical Switches, Firewall Rules, and so on. For example, number of logical switches and their admin states. If stat is not provided, then it will not be displayed.",
                            "$ref": "#/definitions/StatItem"
                        },
                        "sections": {
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/DonutSection"
                            },
                            "type": "array",
                            "description": "Sections",
                            "title": "Sections"
                        },
                        "label": {
                            "title": "Label of the Stats Configuration",
                            "description": "Displayed at the sections, by default. It labels the entities of sections. If label is not provided, the sections are not labelled.",
                            "$ref": "#/definitions/Label"
                        }
                    }
                }
            ],
            "description": "Represents configuration of a statistic for an entity. Example, number of logical switches and their admin states.",
            "title": "Stats Configuration"
        },
        "RuntimeInterfaceStatistics": {
            "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
            "allOf": [
                {
                    "$ref": "#/definitions/SIAggregatedDataCounterEx"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "interface_index": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Index of the interface",
                            "title": "Index of the interface"
                        }
                    }
                }
            ]
        },
        "L2VpnSessionPeerCodes": {
            "description": "Get the peer_code for each tunnel to paste on the remote end of the tunnel. Currently only stand-along/unmanaged edge is supported on the remote end of the tunnel.",
            "title": "Peer code to configure the other side of the tunnel",
            "required": [
                "peer_codes"
            ],
            "x-vmw-nsx-module": "L2VPN",
            "type": "object",
            "properties": {
                "peer_codes": {
                    "description": "List of peer codes per transport tunnel.",
                    "title": "List of peer codes",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/L2VpnTunnelPeerCode"
                    },
                    "maxItems": 1,
                    "type": "array"
                }
            }
        },
        "IpPoolRange": {
            "x-vmw-nsx-module": "Ipam",
            "description": "A set of IPv4 or IPv6 addresses defined by a start and end address.",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Ipam",
                    "required": [
                        "start",
                        "end"
                    ],
                    "type": "object",
                    "properties": {
                        "start": {
                            "description": "The start IP Address of the IP Range.",
                            "format": "ip",
                            "type": "string"
                        },
                        "end": {
                            "description": "The end IP Address of the IP Range.",
                            "format": "ip",
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "ListResultQueryParameters": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "Parameters that affect how list results are processed",
            "properties": {
                "fields": {
                    "type": "string",
                    "description": "Comma-separated field names to include in query result",
                    "title": "Fields to include in query results"
                }
            },
            "title": "Parameters that affect how list results are processed"
        },
        "LogicalPortMacAddressListResult": {
            "x-vmw-nsx-module": "AggSvcLogicalPort",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalPort",
                    "type": "object",
                    "properties": {
                        "logical_port_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the logical port",
                            "title": "The id of the logical port"
                        },
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalPortMacTableEntry"
                            },
                            "type": "array"
                        },
                        "transport_node_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Transport node identifier",
                            "title": "Transport node identifier"
                        }
                    }
                }
            ]
        },
        "IPSecVPNIKEServiceSummary": {
            "x-vmw-nsx-module": "VPNStatistics",
            "allOf": [
                {
                    "$ref": "#/definitions/IPSecVPNSessionSummary"
                },
                {
                    "x-vmw-nsx-module": "VPNStatistics",
                    "type": "object",
                    "properties": {
                        "ipsec_vpn_service_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "UUID for a vpn service.",
                            "title": "Service identifier"
                        },
                        "display_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "VPN service display name.",
                            "title": "Display name"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router identifier associated with vpn service.",
                            "title": "Logical router identifier"
                        }
                    }
                }
            ],
            "description": "Summarized view of all IPSec VPN sessions for a specified service.",
            "title": "IPSec VPN IKE service summary"
        },
        "LbHttpRequestCookieCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "cookie_name",
                        "cookie_value"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "match_type": {
                            "description": "Match type of cookie value",
                            "default": "REGEX",
                            "enum": [
                                "STARTS_WITH",
                                "ENDS_WITH",
                                "EQUALS",
                                "CONTAINS",
                                "REGEX"
                            ],
                            "type": "string"
                        },
                        "cookie_name": {
                            "type": "string",
                            "description": "Name of cookie",
                            "title": "Name of cookie"
                        },
                        "cookie_value": {
                            "type": "string",
                            "description": "Value of cookie",
                            "title": "Value of cookie"
                        },
                        "case_sensitive": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, case is significant when comparing cookie value.\n",
                            "title": "A case sensitive flag for cookie value comparing"
                        }
                    }
                }
            ],
            "description": "This condition is used to match HTTP request messages by cookie which is a\nspecific type of HTTP header. The match_type and case_sensitive define how\nto compare cookie value.\n",
            "title": "Condition to match HTTP request cookie"
        },
        "IPSecVPNTrafficCounters": {
            "x-vmw-nsx-module": "VPNStatistics",
            "type": "object",
            "description": "Traffic counters for IPSec VPN session.",
            "properties": {
                "packets_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of packets sent.",
                    "title": "Packets out"
                },
                "dropped_packets_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of outgoing packets dropped on outbound security association.",
                    "title": "Dropped outgoing packets"
                },
                "bytes_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of bytes recevied.",
                    "title": "Bytes in"
                },
                "bytes_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of bytes sent.",
                    "title": "Bytes out"
                },
                "dropped_packets_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming packets dropped on inbound security association.",
                    "title": "Dropped incoming packets"
                },
                "packets_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of packets received.",
                    "title": "Packets in"
                }
            },
            "title": "IPSec VPN traffic counters"
        },
        "DonutPart": {
            "description": "Represents an entity or portion to be plotted on a donut or stats chart.",
            "title": "Portion of a donut or stats chart",
            "required": [
                "field"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "field": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "A numerical value that represents the portion or entity of the donut or stats chart.",
                    "title": "Value of the portion or entity of donut or stats chart"
                },
                "render_configuration": {
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/RenderConfiguration"
                    },
                    "type": "array",
                    "description": "Additional rendering or conditional evaluation of the field values to be performed, if any.",
                    "title": "Render Configuration"
                },
                "tooltip": {
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/Tooltip"
                    },
                    "type": "array",
                    "description": "Multi-line text to be shown on tooltip while hovering over the portion.",
                    "title": "Multi-line tooltip"
                },
                "label": {
                    "title": "Label of the portion or entity of donut or stats chart",
                    "description": "If a section 'template' holds this donut or stats part, then the label is auto-generated from the fetched field values after applying the template.",
                    "$ref": "#/definitions/Label"
                }
            }
        },
        "LbPoolListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbPool"
                            },
                            "type": "array",
                            "description": "paginated list of pools",
                            "title": "paginated list of pools"
                        }
                    }
                }
            ]
        },
        "ServiceInsertionRuleList": {
            "description": "List of ServiceInsertion Rules.",
            "title": "ServiceInsertion Section RuleList",
            "required": [
                "rules"
            ],
            "x-vmw-nsx-module": "ServiceInsertionRules",
            "type": "object",
            "properties": {
                "rules": {
                    "items": {
                        "$ref": "#/definitions/ServiceInsertionRule"
                    },
                    "type": "array",
                    "description": "List of ServiceInsertion rules in the section. Only homogeneous rules are supported.",
                    "maxItems": 1000,
                    "title": "List of the ServiceInsertion rules"
                }
            }
        },
        "LogicalSwitchState": {
            "x-vmw-nsx-module": "LogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/ConfigurationState"
                },
                {
                    "x-vmw-nsx-module": "LogicalSwitch",
                    "type": "object",
                    "properties": {
                        "logical_switch_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Id of the logical switch",
                            "title": "Id of the logical switch"
                        }
                    }
                }
            ]
        },
        "ResourceLink": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "A link to a related resource",
            "properties": {
                "action": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Optional action",
                    "title": "Optional action"
                },
                "href": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Link to resource",
                    "title": "Link to resource"
                },
                "rel": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Custom relation type (follows RFC 5988 where appropriate definitions exist)",
                    "title": "Link relation type"
                }
            },
            "title": "A link to a related resource"
        },
        "IPSet": {
            "x-vmw-nsx-module": "IPSet",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "IPSet",
                    "type": "object",
                    "properties": {
                        "ip_addresses": {
                            "items": {
                                "description": "IPElement can be a single IP address, IP address range or a Subnet. Its\ntype can be of IPv4 or IPv6. Supported list of formats are \"192.168.1.1\",\n\"192.168.1.1-192.168.1.100\", \"192.168.0.0/24\",\n\"fe80::250:56ff:fe83:318c\",\n\"fe80::250:56ff:fe83:3181-fe80::250:56ff:fe83:318c\",\n\"fe80::250:56ff:fe83:318c/64\"\n",
                                "format": "address-or-block-or-range",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "IP addresses",
                            "maxItems": 4000,
                            "title": "IP addresses"
                        }
                    }
                }
            ],
            "description": "IPSet is used to group individual IP addresses, range of IP addresses or subnets.\nAn IPSet is a homogeneous group of IP addresses, either of type IPv4 or of type\nIPv6. IPSets can be used as source or destination in firewall rules. These can\nalso be used as members of NSGroups.\n",
            "title": "Set of one or more IP addresses"
        },
        "LbTcpProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "nagle_algorithm_enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "Setting this option to enable or disable Nagle's algorithm.",
                            "title": "Setting this option to enable or disable Nagle's algorithm."
                        },
                        "receive_window_size": {
                            "description": "If the field is not specified, the load balancer will use the default\nsetting per load balancer service flavor.\n",
                            "format": "int64",
                            "title": "Sets max TCP receive buffer, specified in bytes.",
                            "maximum": 2147483647,
                            "minimum": 1024,
                            "type": "integer"
                        },
                        "fin_wait2_timeout": {
                            "description": "If the field is not specified, the load balancer will use the default\nsetting per load balancer service flavor.\n",
                            "format": "int64",
                            "title": "Sets how long TCP connections in FIN_WAIT2 state are kept.",
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "max_syn_retransmissions": {
                            "description": "If the field is not specified, the load balancer will use the default\nsetting per load balancer service flavor.\n",
                            "format": "int64",
                            "title": "Sets the max number of times TCP SYN is retransmitted before failing an\nattempt to connect.\n",
                            "maximum": 127,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "transmit_window_size": {
                            "description": "If the field is not specified, the load balancer will use the default\nsetting per load balancer service flavor.\n",
                            "format": "int64",
                            "title": "Sets max TCP transmit buffer, specified in bytes.",
                            "maximum": 2147483647,
                            "minimum": 2048,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "TCP profile allows customization of TCP stack behavior for each\napplication. As TCP connections are terminated (or initiated) on the load\nbalancer only for L7 virtual servers, TCP profiles are applicable only to\nthem. As the desired TCP characteristics (e.g. Rx/Tx buffers) may be\ndifferent for client (typically on WAN) and server (typically on LAN)\nsides, two separate profiles can be bound to virtual server, one for\nclient-side (LbVirtualServer.client_tcp_profile_id) and another for\nserver-side (LbVirtualServer.server_tcp_profile_id).\n",
            "title": "TCP profile allows customization of TCP stack behavior."
        },
        "IPSecVPNTunnelProfileListResult": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNTunnelProfile"
                            },
                            "type": "array",
                            "description": "IPSec Tunnel Profile list results",
                            "title": "IPSec Tunnel Profile list results"
                        }
                    }
                }
            ],
            "description": "List all the tunnel profiles.",
            "title": "List tunnel profiles"
        },
        "EdgeCluster": {
            "x-vmw-nsx-module": "EdgeClusters",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "EdgeClusters",
                    "type": "object",
                    "properties": {
                        "member_node_type": {
                            "description": "Edge cluster is homogenous collection of transport nodes.\nHence all transport nodes of the cluster must be of same type.\nThis readonly field shows the type of transport nodes.\n",
                            "enum": [
                                "EDGE_NODE",
                                "PUBLIC_CLOUD_GATEWAY_NODE",
                                "UNKNOWN"
                            ],
                            "readOnly": true,
                            "type": "string"
                        },
                        "cluster_profile_bindings": {
                            "items": {
                                "$ref": "#/definitions/ClusterProfileTypeIdEntry"
                            },
                            "type": "array",
                            "description": "Edge cluster profile bindings",
                            "title": "Edge cluster profile bindings"
                        },
                        "members": {
                            "items": {
                                "$ref": "#/definitions/EdgeClusterMember"
                            },
                            "type": "array",
                            "description": "EdgeCluster only supports homogeneous members.\nThese member should be backed by either EdgeNode or PublicCloudGatewayNode.\nTransportNode type of these nodes should be the same.\nDeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is\nrecommended to be the same. EdgeCluster supports members of different\ndeployment types.\n",
                            "title": "Edge cluster members"
                        },
                        "deployment_type": {
                            "description": "This field is a readonly field which shows the deployment_type of members.\nIt returns UNKNOWN if there are no members, and returns VIRTUAL_MACHINE|\nPHYSICAL_MACHINE if all edge members are VIRTUAL_MACHINE|PHYSICAL_MACHINE.\nIt returns HYBRID if the cluster contains edge members of both types\nVIRTUAL_MACHINE and PHYSICAL_MACHINE.\n",
                            "enum": [
                                "VIRTUAL_MACHINE",
                                "PHYSICAL_MACHINE",
                                "UNKNOWN"
                            ],
                            "readOnly": true,
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "BgpNeighborsStatusListResult": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouter",
                    "type": "object",
                    "properties": {
                        "logical_router_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Name of the logical router",
                            "title": "Name of the logical router"
                        },
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated, unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "results": {
                            "description": "Status of BGP neighbors of the logical router",
                            "title": "Status of BGP neighbors of the logical router",
                            "items": {
                                "$ref": "#/definitions/BgpNeighborStatus"
                            },
                            "readOnly": true,
                            "additionalProperties": false,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "DSSection": {
            "x-vmw-nsx-module": "DistributedServices",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "DistributedServices",
                    "required": [
                        "stateful",
                        "section_type"
                    ],
                    "type": "object",
                    "properties": {
                        "stateful": {
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Stateful or Stateless nature of distributed service section is enforced on all rules inside the section. Layer3 sections can be stateful or stateless. Layer2 sections can only be stateless.",
                            "title": "Stateful nature of the distributed service rules in the section."
                        },
                        "is_default": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "It is a boolean flag which reflects whether a distributed service section is default section or not. Each Layer 3 and Layer 2 section will have at least and at most one default section.",
                            "title": "Default section flag"
                        },
                        "applied_tos": {
                            "description": "List of objects where the rules in this section will be enforced. This will take precedence over rule level appliedTo.",
                            "title": "AppliedTo List",
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        },
                        "rule_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of rules in this section.",
                            "title": "Rule count"
                        },
                        "section_type": {
                            "readOnly": false,
                            "enum": [
                                "LAYER2",
                                "LAYER3",
                                "L3REDIRECT"
                            ],
                            "type": "string",
                            "description": "Type of the rules which a section can contain. Only homogeneous sections are supported.",
                            "title": "Section Type"
                        }
                    }
                }
            ]
        },
        "ComputeManagerStatus": {
            "x-vmw-nsx-module": "InventoryCmObj",
            "type": "object",
            "description": "Runtime status information of the compute manager",
            "properties": {
                "version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Version of the compute manager",
                    "title": "Version of the compute manager"
                },
                "connection_status": {
                    "readOnly": true,
                    "enum": [
                        "UP",
                        "DOWN",
                        "CONNECTING"
                    ],
                    "type": "string",
                    "description": "Status of connection with the compute manager",
                    "title": "Status of connection with the compute manager"
                },
                "connection_errors": {
                    "items": {
                        "$ref": "#/definitions/ErrorInfo"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Errors when connecting with compute manager",
                    "title": "Errors when connecting with compute manager"
                },
                "last_sync_time": {
                    "description": "Timestamp of the last successful update of Inventory, in epoch milliseconds.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "connection_status_details": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Details about connection status",
                    "title": "Details about connection status"
                },
                "registration_errors": {
                    "items": {
                        "$ref": "#/definitions/ErrorInfo"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Errors when registering with compute manager",
                    "title": "Errors when registering with compute manager"
                },
                "registration_status": {
                    "readOnly": true,
                    "enum": [
                        "REGISTERED",
                        "UNREGISTERED",
                        "REGISTERING"
                    ],
                    "type": "string",
                    "description": "Registration status of compute manager",
                    "title": "Registration status of compute manager"
                }
            },
            "title": "Runtime status information of the compute manager"
        },
        "LbAppProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "resource_type": {
                            "description": "An application profile can be bound to a virtual server\nto specify the application protocol characteristics. It is used to\ninfluence how load balancing is performed. Currently, three types of\napplication profiles are supported: LbFastTCPProfile,\nLbFastUDPProfile and LbHttpProfile.\nLbFastTCPProfile or LbFastUDPProfile is typically\nused when the application is using a custom protocol or a standard protocol\nnot supported by the load balancer. It is also used in cases where the user\nonly wants L4 load balancing mainly because L4 load balancing has much\nhigher performance and scalability, and/or supports connection mirroring.\nLbHttpProfile is used for both HTTP and HTTPS applications.\nThough application rules, if bound to the virtual server, can be used\nto accomplish the same goal, LbHttpProfile is intended to\nsimplify enabling certain common use cases.\n",
                            "enum": [
                                "LbHttpProfile",
                                "LbFastTcpProfile",
                                "LbFastUdpProfile"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "ServiceInsertionSection": {
            "x-vmw-nsx-module": "ServiceInsertionRules",
            "allOf": [
                {
                    "$ref": "#/definitions/DSSection"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertionRules",
                    "type": "object"
                }
            ],
            "description": "A ServiceInsertion section composed of ServiceInsertion Rules.",
            "title": "ServiceInsertion Section"
        },
        "LogicalRouterIPTunnelPort": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "allOf": [
                {
                    "$ref": "#/definitions/LogicalRouterPort"
                },
                {
                    "x-vmw-nsx-module": "LogicalRouterPorts",
                    "type": "object",
                    "properties": {
                        "subnets": {
                            "description": "Tunnel port subnets.",
                            "title": "Tunnel port subnets",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IPSubnet"
                            },
                            "readOnly": true,
                            "maxItems": 1,
                            "type": "array"
                        },
                        "admin_state": {
                            "readOnly": true,
                            "enum": [
                                "UP",
                                "DOWN"
                            ],
                            "type": "string",
                            "description": "Admin state of port.",
                            "title": "Admin state of port"
                        },
                        "vpn_session_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Associated VPN session identifier.",
                            "title": "VPN session identifier"
                        }
                    }
                }
            ],
            "description": "Logical router IP tunnel port.",
            "title": "Logical router IP tunnel port"
        },
        "LogicalRouterRouteTableInCsvFormat": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouter",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalRouterRouteCsvRecord"
                            },
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "ResourceAllocation": {
            "description": "Specify limit, shares and reservation for all kinds of traffic.\nValues for limit and reservation are expressed in percentage. And for shares,\nthe value is expressed as a number between 1-100.\nThe overall reservation among all traffic types should not exceed 75%.\nOtherwise, the API request will be rejected.\n",
            "title": "Resource allocation information for a host infrastructure traffic type",
            "required": [
                "reservation",
                "traffic_type",
                "limit",
                "shares"
            ],
            "x-vmw-nsx-module": "NiocProfile",
            "type": "object",
            "properties": {
                "reservation": {
                    "description": "Minimum guaranteed bandwidth percentage",
                    "title": "Minimum guaranteed bandwidth percentage",
                    "default": 0.0,
                    "maximum": 75,
                    "minimum": 0,
                    "type": "number"
                },
                "traffic_type": {
                    "title": "Resource allocation traffic type",
                    "description": "Resource allocation traffic type",
                    "$ref": "#/definitions/HostInfraTrafficType"
                },
                "limit": {
                    "description": "The limit property specifies the maximum bandwidth allocation for a given\ntraffic type and is expressed in percentage. The default value for this\nfield is set to -1 which means the traffic is unbounded for the traffic\ntype. All other negative values for this property is not supported\nand will be rejected by the API.\n",
                    "title": "Maximum bandwidth percentage",
                    "default": -1.0,
                    "maximum": 100,
                    "minimum": -1,
                    "type": "number"
                },
                "shares": {
                    "description": "Shares",
                    "title": "Shares",
                    "default": 50,
                    "format": "int32",
                    "maximum": 100,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "ErrorResolverUserInputData": {
            "x-vmw-nsx-module": "ErrorResolver",
            "required": [
                "data_type",
                "property_name"
            ],
            "type": "object",
            "description": "Corresponds to one property entered by the user",
            "properties": {
                "data_type": {
                    "enum": [
                        "TEXT",
                        "NUMBER",
                        "PASSWORD"
                    ],
                    "type": "string",
                    "description": "The datatype of the given property. Useful for data validation",
                    "title": "The datatype of the given property. Useful for data validation"
                },
                "property_name": {
                    "type": "string",
                    "description": "Name of the property supplied by the user",
                    "title": "Name of the property supplied by the user"
                },
                "property_value": {
                    "type": "string",
                    "description": "The value associated with the above property",
                    "title": "The value associated with the above property"
                }
            }
        },
        "BridgeEndpointProfile": {
            "x-vmw-nsx-module": "BridgeEndpointProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "edge_cluster_id"
                    ],
                    "x-vmw-nsx-module": "BridgeEndpointProfile",
                    "type": "object",
                    "properties": {
                        "failover_mode": {
                            "default": "PREEMPTIVE",
                            "enum": [
                                "PREEMPTIVE",
                                "NON_PREEMPTIVE"
                            ],
                            "type": "string",
                            "description": "Faileover mode can be preemmptive or non-preemptive",
                            "title": "Failover mode for the edge bridge cluster"
                        },
                        "edge_cluster_member_indexes": {
                            "items": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "type": "array",
                            "description": "First index will be used as the preferred member",
                            "title": "Indexes of the member hosts of the edge bridge cluster"
                        },
                        "high_availability_mode": {
                            "default": "ACTIVE_STANDBY",
                            "enum": [
                                "ACTIVE_STANDBY"
                            ],
                            "type": "string",
                            "description": "High avaialability mode can be active-active or active-standby",
                            "title": "High availability mode for the edge bridge cluster"
                        },
                        "edge_cluster_id": {
                            "maxLength": 36,
                            "type": "string",
                            "description": "UUID of the edge cluster for this bridge endpoint",
                            "title": "UUID of the edge cluster for this bridge endpoint"
                        }
                    }
                }
            ],
            "description": "Bridge Endpoint Profile",
            "title": "Bridge Endpoint Profile"
        },
        "LbHttpResponseHeaderRewriteAction": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleAction"
                },
                {
                    "required": [
                        "header_value",
                        "header_name"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "header_value": {
                            "type": "string",
                            "description": "Value of header field",
                            "title": "Value of header field"
                        },
                        "header_name": {
                            "type": "string",
                            "description": "Name of a header field of HTTP request message",
                            "title": "Name of a header field of HTTP request message"
                        }
                    }
                }
            ],
            "description": "This action is used to rewrite header fields of HTTP response messages to\nspecified new values at HTTP_RESPONSE_REWRITE phase. One action can be used\nto rewrite one header field. To rewrite multiple header fields, multiple\nactions must be defined.\nCaptured variables and built-in variables can be used in the header_value\nfield, header_name field does not support variables.\n",
            "title": "Action to rewrite HTTP response header fields"
        },
        "LbPoolStatistics": {
            "x-vmw-nsx-module": "AggSvcLb",
            "required": [
                "statistics",
                "pool_id"
            ],
            "type": "object",
            "properties": {
                "last_update_timestamp": {
                    "type": "integer",
                    "description": "Timestamp when the data was last updated",
                    "format": "int64"
                },
                "statistics": {
                    "title": "Virtual server statistics counter",
                    "description": "Virtual server statistics counter",
                    "$ref": "#/definitions/LbStatisticsCounter"
                },
                "pool_id": {
                    "type": "string",
                    "description": "Load balancer pool identifier",
                    "title": "Load balancer pool identifier"
                },
                "members": {
                    "items": {
                        "$ref": "#/definitions/LbPoolMemberStatistics"
                    },
                    "type": "array",
                    "description": "Statistics of load balancer pool members",
                    "title": "Statistics of load balancer pool members"
                }
            }
        },
        "RelatedData": {
            "x-vmw-nsx-module": "Search",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "Search",
                    "type": "object",
                    "properties": {
                        "alias": {
                            "type": "string",
                            "description": "Alias for the related type",
                            "title": "Alias"
                        },
                        "results": {
                            "items": {
                                "type": "object"
                            },
                            "type": "array",
                            "description": "Array of related objects",
                            "title": "Related objects"
                        }
                    }
                }
            ],
            "description": "The results array will contain all the related objects\n",
            "title": "Related object details"
        },
        "DirectoryAdDomain": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/DirectoryDomain"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "base_distinguished_name": {
                            "type": "string",
                            "description": "Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain's distinguished name (DN) and is typically referred to as the NC head.",
                            "title": "Directory domain base distinguished name"
                        },
                        "sync_settings": {
                            "title": "Directory domain sync settings",
                            "description": "Each domain sync settings can be changed using this object. It is not required since there are default values used if there is no specification for this object.",
                            "$ref": "#/definitions/DirectoryDomainSyncSettings"
                        }
                    }
                }
            ],
            "description": "Active Directory Domain",
            "title": "Active Directory Domain"
        },
        "NodeInterfacePropertiesListResult": {
            "x-vmw-nsx-module": "ApplianceStats",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "ApplianceStats",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NodeInterfaceProperties"
                            },
                            "type": "array",
                            "description": "Node interface property results",
                            "title": "Node interface property results"
                        }
                    }
                }
            ],
            "description": "Node network interface properties list results",
            "title": "Node network interface properties list results"
        },
        "L2VpnSession": {
            "x-vmw-nsx-module": "L2VPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "l2vpn_service_id",
                        "transport_tunnels"
                    ],
                    "x-vmw-nsx-module": "L2VPN",
                    "type": "object",
                    "properties": {
                        "l2vpn_service_id": {
                            "type": "string",
                            "description": "L2VPN service id",
                            "title": "L2VPN service id"
                        },
                        "tunnel_encapsulation": {
                            "readOnly": true,
                            "title": "Tunnel encapsulation config",
                            "description": "Tunnel encapsulation config.",
                            "$ref": "#/definitions/L2VpnTunnelEncapsulation"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "Enable to extend all the associated logical switches.",
                            "title": "Enable L2VPN session"
                        },
                        "transport_tunnels": {
                            "description": "List of transport tunnels for redundancy.",
                            "title": "List of transport tunnels",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "maxItems": 1,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "Defines the tunnel local and peer addresses along with the multiple tansport tunnels for redundancy. L2VpnSession belongs on to only one L2VpnService.",
            "title": "L2VPN Session"
        },
        "StatItem": {
            "description": "Displayed as a single number. It can be used to show the characteristics of entities such as Logical Switches, Firewall Rules, and so on. For example, number of logical switches and their admin states.",
            "title": "Statistic of an entity",
            "required": [
                "value"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "drilldown_id": {
                    "type": "string",
                    "description": "Id of drilldown widget, if any. Id should be a valid id of an existing widget.",
                    "title": "Id of drilldown widget"
                },
                "tooltip": {
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/Tooltip"
                    },
                    "type": "array",
                    "description": "Multi-line text to be shown on tooltip while hovering over the stat.",
                    "title": "Multi-line tooltip"
                },
                "value": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Expression for stat to be displayed.",
                    "title": "Stat"
                }
            }
        },
        "ManagementClusterNodeStatus": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "properties": {
                "mgmt_cluster_status": {
                    "description": "Status of this node's connection to the management cluster",
                    "enum": [
                        "CONNECTED",
                        "DISCONNECTED",
                        "UNKNOWN"
                    ],
                    "readOnly": true,
                    "type": "string"
                }
            }
        },
        "DiscoveredNodeListResult": {
            "x-vmw-nsx-module": "InventoryCmObj",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "InventoryCmObj",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DiscoveredNode"
                            },
                            "type": "array",
                            "description": "Discovered Node list results",
                            "title": "Discovered Node list results"
                        }
                    }
                }
            ],
            "description": "Discovered Node list result",
            "title": "Discovered Node list result"
        },
        "RelatedApiError": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "Detailed information about a related API error",
            "properties": {
                "module_name": {
                    "type": "string",
                    "description": "The module name where the error occurred",
                    "title": "The module name where the error occurred"
                },
                "error_message": {
                    "type": "string",
                    "description": "A description of the error",
                    "title": "A description of the error"
                },
                "error_code": {
                    "format": "int64",
                    "type": "integer",
                    "description": "A numeric error code",
                    "title": "A numeric error code"
                },
                "details": {
                    "type": "string",
                    "description": "Further details about the error",
                    "title": "Further details about the error"
                },
                "error_data": {
                    "type": "object",
                    "description": "Additional data about the error",
                    "title": "Additional data about the error"
                }
            },
            "title": "Detailed information about a related API error"
        },
        "BridgeCluster": {
            "x-vmw-nsx-module": "BridgeCluster",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "bridge_nodes"
                    ],
                    "x-vmw-nsx-module": "BridgeCluster",
                    "type": "object",
                    "properties": {
                        "cluster_profile_bindings": {
                            "items": {
                                "$ref": "#/definitions/ClusterProfileTypeIdEntry"
                            },
                            "type": "array",
                            "description": "Bridge cluster profile bindings",
                            "title": "Bridge cluster profile bindings"
                        },
                        "bridge_nodes": {
                            "items": {
                                "$ref": "#/definitions/BridgeClusterNode"
                            },
                            "type": "array",
                            "description": "Nodes used in bridging",
                            "maxItems": 2,
                            "title": "Nodes used in bridging"
                        }
                    }
                }
            ],
            "description": "Bridge Cluster",
            "title": "Bridge Cluster"
        },
        "LbMonitorListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbMonitor"
                            },
                            "type": "array",
                            "description": "paginated list of load balancer monitors",
                            "title": "paginated list of load balancer monitors"
                        }
                    }
                }
            ]
        },
        "IPMirrorDestination": {
            "x-vmw-nsx-module": "PortMirroring",
            "allOf": [
                {
                    "$ref": "#/definitions/MirrorDestination"
                },
                {
                    "x-vmw-nsx-module": "PortMirroring",
                    "required": [
                        "destination_ips",
                        "encapsulation_type"
                    ],
                    "type": "object",
                    "properties": {
                        "destination_ips": {
                            "description": "The destination IPs of the mirror packet will be sent to.",
                            "title": "List of destination IP addresses",
                            "minItems": 1,
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "maxItems": 3,
                            "type": "array"
                        },
                        "encapsulation_type": {
                            "description": "You can choose GRE, ERSPAN II or ERSPAN III.",
                            "default": "GRE",
                            "enum": [
                                "GRE",
                                "ERSPAN_TWO",
                                "ERSPAN_THREE"
                            ],
                            "type": "string"
                        },
                        "erspan_id": {
                            "description": "Used by physical switch for the mirror traffic forwarding.\nMust be provided and only effective when encapsulation type is\nERSPAN type II or type III.\n",
                            "format": "int32",
                            "title": "ERSPAN session id",
                            "maximum": 1023,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "gre_key": {
                            "format": "int32",
                            "type": "integer",
                            "description": "User-configurable 32-bit key only for GRE",
                            "title": "GRE encapsulation key"
                        }
                    }
                }
            ]
        },
        "InventoryConfig": {
            "x-vmw-nsx-module": "Inventory",
            "required": [
                "compute_managers_soft_limit"
            ],
            "type": "object",
            "properties": {
                "compute_managers_soft_limit": {
                    "readOnly": false,
                    "format": "int32",
                    "type": "integer",
                    "description": "Soft limit on number of compute managers, which can be added, beyond which,\naddition of compute managers will result in warning getting logged\n",
                    "title": "Soft limit on number of compute managers"
                }
            }
        },
        "ResourceReference": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "A weak reference to an NSX resource.",
            "properties": {
                "target_display_name": {
                    "readOnly": true,
                    "maxLength": 255,
                    "type": "string",
                    "description": "Display name of the NSX resource.",
                    "title": "Target display name"
                },
                "is_valid": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Will be set to false if the referenced NSX resource has been deleted.",
                    "title": "Target validity"
                },
                "target_id": {
                    "readOnly": false,
                    "maxLength": 64,
                    "type": "string",
                    "description": "Identifier of the NSX resource.",
                    "title": "Target ID"
                },
                "target_type": {
                    "readOnly": false,
                    "maxLength": 255,
                    "type": "string",
                    "description": "Type of the NSX resource.",
                    "title": "Target type"
                }
            }
        },
        "RowListField": {
            "description": "Root of the api result set for forming rows.",
            "title": "List of fields from which rows are formed",
            "required": [
                "path"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "alias": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "Short name or alias of row list field, if any. If unspecified, the row list field can be referenced by its index in the array of row list fields as $<index> (for example, $0).",
                    "title": "Alias Name"
                },
                "path": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "JSON path to the root of the api result set for forming rows.",
                    "title": "JSON path"
                }
            }
        },
        "QuickSearchResponse": {
            "x-vmw-nsx-module": "Search",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Search",
                    "required": [
                        "results",
                        "result_count"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/TypeGroup"
                            },
                            "type": "array",
                            "description": "Search results",
                            "title": "Search results"
                        },
                        "result_count": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Result count",
                            "title": "Result count"
                        }
                    }
                }
            ]
        },
        "SVMDeploymentSpec": {
            "description": "Deployment Specs holds information required to deploy the Service-VMs.i.e. OVF url where the partner Service-VM OVF is hosted. The host type on which the OVF(Open Virtualization Format) can be deployed, Form factor to name a few.",
            "title": "Service-VM Deployment Spec",
            "required": [
                "ovf_url",
                "host_type"
            ],
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "type": "object",
            "properties": {
                "ovf_url": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Location of the partner VM OVF to be deployed.",
                    "title": "OVF url"
                },
                "service_form_factor": {
                    "description": "Supported ServiceInsertion Form Factor for the OVF deployment. The default FormFactor is Medium.",
                    "title": "Service Form Factor",
                    "default": "MEDIUM",
                    "enum": [
                        "SMALL",
                        "MEDIUM",
                        "LARGE"
                    ],
                    "readOnly": false,
                    "type": "string"
                },
                "host_type": {
                    "readOnly": false,
                    "enum": [
                        "ESXI",
                        "RHELKVM",
                        "UBUNTUKVM"
                    ],
                    "type": "string",
                    "description": "Host Type on which the specified OVF can be deployed.",
                    "title": "HostType"
                },
                "name": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Deployment Spec name for ease of use, since multiple DeploymentSpec can be specified.",
                    "title": "name"
                }
            }
        },
        "IPSecVPNLocalEndpointListResult": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNLocalEndpoint"
                            },
                            "type": "array",
                            "description": "IPSec local endpoint list results",
                            "title": "IPSec local endpoint list results"
                        }
                    }
                }
            ],
            "description": "List all the local endpoints.",
            "title": "List local endpoints"
        },
        "MigrationStatus": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "overall_migration_status": {
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "IN_PROGRESS",
                        "NOT_STARTED",
                        "PAUSED"
                    ],
                    "type": "string",
                    "description": "Status of migration",
                    "title": "Status of migration"
                },
                "component_status": {
                    "items": {
                        "$ref": "#/definitions/ComponentMigrationStatus"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "List of component statuses",
                    "title": "List of component statuses"
                }
            }
        },
        "LbPoolMemberStatus": {
            "x-vmw-nsx-module": "AggSvcLb",
            "required": [
                "status",
                "ip_address"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "enum": [
                        "UP",
                        "DOWN",
                        "DISABLED",
                        "GRACEFUL_DISABLED",
                        "UNUSED"
                    ],
                    "type": "string",
                    "description": "UP means that pool member is enabled and monitors have marked the pool\nmember as UP. If the pool member has no monitor configured, it would\nbe treated as UP.\nDOWN means that pool member is enabled and monitors have marked the\npool member as DOWN.\nDISABLED means that admin state of pool member is set to DISABLED.\nGRACEFUL_DISABLED means that admin state of pool member is set to\nGRACEFUL_DISABLED.\nUNUSED means that the pool member is not used when the IP list size\nof member group exceeds the maximum setting. The remaining IP addresses\nwould not be used as available backend servers, hence mark the status\nas UNUSED.\n",
                    "title": "Pool member status"
                },
                "failure_cause": {
                    "type": "string",
                    "description": "The healthcheck failure cause when status is DOWN",
                    "title": "The healthcheck failure cause when status is DOWN"
                },
                "last_check_time": {
                    "type": "integer",
                    "description": "Timestamp in milliseconds since epoch",
                    "format": "int64"
                },
                "ip_address": {
                    "description": "Pool member IP address",
                    "format": "ip",
                    "type": "string"
                },
                "last_state_change_time": {
                    "type": "integer",
                    "description": "Timestamp in milliseconds since epoch",
                    "format": "int64"
                },
                "port": {
                    "description": "The port is configured in pool member. For virtual server port range\ncase, pool member port must be null.\n",
                    "format": "port-or-range",
                    "type": "string"
                }
            }
        },
        "MacLearningCounters": {
            "x-vmw-nsx-module": "AggSvcL2Types",
            "type": "object",
            "properties": {
                "macs_learned": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of MACs learned",
                    "title": "Number of MACs learned"
                },
                "mac_not_learned_packets_dropped": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of packets with unknown source MAC address that are dropped without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_DROP.",
                    "title": "Number of dropped packets with unknown source MAC address."
                },
                "mac_not_learned_packets_allowed": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of packets with unknown source MAC address that are dispatched without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_ALLOW.",
                    "title": "Number of dispatched packets with unknown source MAC address."
                }
            }
        },
        "EULAAcceptance": {
            "x-vmw-nsx-module": "EULA",
            "required": [
                "acceptance"
            ],
            "type": "object",
            "description": "Indicate the status of End User License Agreement acceptance",
            "properties": {
                "acceptance": {
                    "type": "boolean",
                    "description": "End User License Agreement acceptance status",
                    "title": "End User License Agreement acceptance status"
                }
            }
        },
        "LbPersistenceCookieTime": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbCookieTime"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "cookie_max_idle"
                    ],
                    "type": "object",
                    "properties": {
                        "cookie_max_idle": {
                            "description": "HTTP cookie max-age to expire cookie, only available for insert mode.\n",
                            "format": "int64",
                            "title": "persistence cookie max idle time in seconds",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "FilePropertiesListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/FileProperties"
                            },
                            "type": "array",
                            "description": "File property results",
                            "title": "File property results"
                        }
                    }
                }
            ],
            "description": "File properties query results",
            "title": "File properties query results"
        },
        "NSGroup": {
            "x-vmw-nsx-module": "NSGroup",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "NSGroup",
                    "type": "object",
                    "properties": {
                        "member_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Count of the members added to this NSGroup",
                            "title": "Count of the members added to this NSGroup"
                        },
                        "members": {
                            "items": {
                                "$ref": "#/definitions/NSGroupSimpleExpression"
                            },
                            "type": "array",
                            "description": "Reference to the direct/static members of the NSGroup.\nCan be ID based expressions only. VirtualMachine cannot\nbe added as a static member.\n",
                            "maxItems": 500,
                            "title": "Members of NSGroup"
                        },
                        "membership_criteria": {
                            "items": {
                                "$ref": "#/definitions/NSGroupExpression"
                            },
                            "type": "array",
                            "description": "List of tag or name based expressions which define the dynamic membership criteria\nfor this NSGroup. An object must satisfy atleast one of these expressions\nto qualify as a member of this group.\n",
                            "maxItems": 5,
                            "title": "The criteria for membership of this NSGroup"
                        }
                    }
                }
            ],
            "description": "NSGroups are recursive groupings of different NSX elements (logical and physical), typically used in policy definitions.",
            "title": "Networking and Security Group"
        },
        "LbStatisticsCounter": {
            "x-vmw-nsx-module": "AggSvcLb",
            "required": [
                "bytes_out",
                "max_sessions",
                "total_sessions",
                "bytes_in",
                "current_sessions"
            ],
            "type": "object",
            "properties": {
                "source_ip_persistence_entry_size": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of source IP persistence entries",
                    "title": "Number of source IP persistence entries"
                },
                "packets_out": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of packets out",
                    "title": "Number of packets out"
                },
                "bytes_out_rate": {
                    "type": "number",
                    "description": "The average number of outbound bytes per second, the number is\naveraged over the last 5 one-second intervals.\n",
                    "title": "The average number of outbound bytes per second, the number is\naveraged over the last 5 one-second intervals.\n"
                },
                "total_sessions": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of total sessions",
                    "title": "Number of total sessions"
                },
                "http_request_rate": {
                    "type": "number",
                    "description": "The average number of http requests per second, the number is\naveraged over the last 5 one-second intervals.\n",
                    "title": "The average number of http requests per second, the number is\naveraged over the last 5 one-second intervals.\n"
                },
                "bytes_out": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of bytes out",
                    "title": "Number of bytes out"
                },
                "packets_in_rate": {
                    "type": "number",
                    "description": "The average number of inbound packets per second, the number is\naveraged over the last 5 one-second intervals.\n",
                    "title": "The average number of inbound packets per second, the number is\naveraged over the last 5 one-second intervals.\n"
                },
                "bytes_in_rate": {
                    "type": "number",
                    "description": "The average number of inbound bytes per second, the number is\naveraged over the last 5 one-second intervals.\n",
                    "title": "The average number of inbound bytes per second, the number is\naveraged over the last 5 one-second intervals.\n"
                },
                "current_sessions": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of current sessions",
                    "title": "Number of current sessions"
                },
                "max_sessions": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of maximum sessions",
                    "title": "Number of maximum sessions"
                },
                "packets_out_rate": {
                    "type": "number",
                    "description": "The average number of outbound packets per second, the number is\naveraged over the last 5 one-second intervals.\n",
                    "title": "The average number of outbound packets per second, the number is\naveraged over the last 5 one-second intervals.\n"
                },
                "http_requests": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of http requests.",
                    "title": "The total number of http requests."
                },
                "bytes_in": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of bytes in",
                    "title": "Number of bytes in"
                },
                "current_session_rate": {
                    "type": "number",
                    "description": "The average number of current sessions per second, the number is\naveraged over the last 5 one-second intervals.\n",
                    "title": "The average number of current sessions per second, the number is\naveraged over the last 5 one-second intervals.\n"
                },
                "packets_in": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of packets in",
                    "title": "Number of packets in"
                }
            }
        },
        "IPSecVPNDPDProfile": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, enable dead peer detection.",
                            "title": "Enable dead peer detection (DPD)"
                        },
                        "dpd_probe_interval": {
                            "description": "DPD probe interval defines a periodic interval for DPD probes.",
                            "title": "DPD probe interval in seconds",
                            "default": 60,
                            "format": "int64",
                            "maximum": 360,
                            "minimum": 3,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "Dead peer detection (DPD) is a method that allows detection of unreachable internet key excahnge (IKE) peers. Any changes affects all IPSec VPN sessions consuming this profile.",
            "title": "Dead peer detection (DPD) profile"
        },
        "DSSectionListResult": {
            "x-vmw-nsx-module": "DistributedServices",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "DistributedServices",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DSSection"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of the distributed service sections. The list has to be homogenous.",
                            "title": "Section list"
                        }
                    }
                }
            ]
        },
        "NodeIdServicesMap": {
            "x-vmw-nsx-module": "CertificateManager",
            "required": [
                "service_types",
                "node_id"
            ],
            "type": "object",
            "properties": {
                "service_types": {
                    "items": {
                        "description": "Supported service types, that are using certificates.",
                        "enum": [
                            "MGMT_CLUSTER",
                            "MGMT_PLANE",
                            "API"
                        ],
                        "type": "string"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "list of ServiceTypes"
                },
                "node_id": {
                    "readOnly": false,
                    "maxLength": 255,
                    "type": "string",
                    "description": "NodeId",
                    "title": "NodeId"
                }
            }
        },
        "PreconfiguredHostSwitchSpec": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/HostSwitchSpec"
                },
                {
                    "required": [
                        "host_switches"
                    ],
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "host_switches": {
                            "items": {
                                "$ref": "#/definitions/PreconfiguredHostSwitch"
                            },
                            "type": "array",
                            "description": "Preconfigured Transport Node host switches",
                            "maxItems": 1,
                            "title": "Preconfigured Transport Node host switches"
                        }
                    }
                }
            ],
            "description": "Preconfigured host switch specification is used for manually configured transport node. It is user's responsibility to ensure correct configuration is provided to NSX. This type is only valid for supported KVM fabric nodes.",
            "title": "Specification of transport node preconfigured host switch"
        },
        "FirewallStatus": {
            "x-vmw-nsx-module": "FirewallStatus",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "global_status",
                        "context"
                    ],
                    "x-vmw-nsx-module": "FirewallStatus",
                    "type": "object",
                    "properties": {
                        "global_status": {
                            "description": "Firewall status for a fabric entity or in global context where firewall is supported.",
                            "enum": [
                                "DISABLED",
                                "ENABLED"
                            ],
                            "readOnly": false,
                            "type": "string"
                        },
                        "context": {
                            "description": "Types of firewall contexts.",
                            "enum": [
                                "transport_nodes",
                                "logical_routers"
                            ],
                            "readOnly": false,
                            "type": "string"
                        },
                        "target_statuses": {
                            "items": {
                                "$ref": "#/definitions/TargetResourceStatus"
                            },
                            "readOnly": false,
                            "type": "array",
                            "description": "List of firewall status on various target logical resources. This will override the global status of corresponding firewall context (e.g it will override the gloabal status of logical_routers).",
                            "title": "List of target resource status"
                        }
                    }
                }
            ],
            "description": "Firewall Status Response",
            "title": "Firewall Status Response"
        },
        "DiscoveredNodeInterfaceProperties": {
            "x-vmw-nsx-module": "InventoryCmObj",
            "type": "object",
            "description": "Network interface properties of discovered node",
            "properties": {
                "physical_address": {
                    "description": "Mac address of the interface",
                    "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                    "type": "string"
                },
                "connected_switch": {
                    "type": "string",
                    "description": "Switch name which is connected to nic, switch can be opaque, proxyHostSwitch or virtual",
                    "title": "Connected switch"
                },
                "interface_id": {
                    "type": "string",
                    "description": "Id of the network interface",
                    "title": "Interface ID"
                }
            },
            "title": "Discovered node network interface properties"
        },
        "VersionedDeploymentSpec": {
            "description": "Versioned DeploymentSpec contains vibs and ofv urls for specific version of fabric module and host type and host version.",
            "title": "Versioned DeploymentSpec contains vibs and ofv urls for specific version of fabric module and host type and host version.",
            "required": [
                "package_stores",
                "host_type",
                "host_version"
            ],
            "x-vmw-nsx-module": "HostPrepServiceFabric",
            "type": "object",
            "properties": {
                "service_vm_ovf_url": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "list of service vm ovf urls",
                    "title": "list of service vm ovf urls"
                },
                "package_stores": {
                    "items": {
                        "$ref": "#/definitions/PackageStore"
                    },
                    "type": "array",
                    "description": "Package store contains package url and bulletin_ids",
                    "title": "Package store contains package url and bulletin_ids"
                },
                "host_type": {
                    "enum": [
                        "ESXI",
                        "RHELKVM",
                        "UBUNTUKVM",
                        "RHELCONTAINER",
                        "RHELSERVER",
                        "UBUNTUSERVER",
                        "CENTOSSERVER",
                        "CENTOSKVM"
                    ],
                    "type": "string",
                    "description": "type of host",
                    "title": "type of host"
                },
                "host_version": {
                    "type": "string",
                    "description": "version of the host",
                    "title": "version of the host"
                }
            }
        },
        "ErrorResolverInfoList": {
            "description": "Collection of all registered ErrorResolverInfo",
            "title": "Collection of all registered ErrorResolverInfo",
            "required": [
                "results"
            ],
            "x-vmw-nsx-module": "ErrorResolver",
            "type": "object",
            "properties": {
                "results": {
                    "items": {
                        "$ref": "#/definitions/ErrorResolverInfo"
                    },
                    "type": "array",
                    "description": "ErrorResolverInfo list",
                    "title": "ErrorResolverInfo list"
                }
            }
        },
        "FirewallRuleList": {
            "x-vmw-nsx-module": "Firewall",
            "required": [
                "rules"
            ],
            "type": "object",
            "properties": {
                "rules": {
                    "items": {
                        "$ref": "#/definitions/FirewallRule"
                    },
                    "type": "array",
                    "description": "List of firewall rules in the section. Only homogenous rules are supported.",
                    "maxItems": 1000,
                    "title": "List of the firewall rules"
                }
            }
        },
        "IPSecVPNServiceListResult": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNService"
                            },
                            "type": "array",
                            "description": "IPSec VPN serivce list result",
                            "title": "IPSec VPN serivce list result"
                        }
                    }
                }
            ],
            "description": "List all the IPSec VPN services.",
            "title": "List IPSec VPN services"
        },
        "IPsecVPNIKESessionSummary": {
            "x-vmw-nsx-module": "VPNStatistics",
            "type": "object",
            "description": "IPSec VPN session status summary, gives total, failed, degraded and established IPSec VPN sessions.",
            "properties": {
                "established_sessions": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of established sessions.",
                    "title": "Established sessions"
                },
                "total_sessions": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total sessions configured.",
                    "title": "Total sessions"
                },
                "failed_sessions": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of failed sessions.",
                    "title": "Failed sessions"
                },
                "degraded_sessions": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of degraded sessions.",
                    "title": "Degraded sessions"
                }
            },
            "title": "IPSec VPN session status summary"
        },
        "SearchResponse": {
            "x-vmw-nsx-module": "Search",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Search",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "type": "object"
                            },
                            "type": "array",
                            "description": "Search results",
                            "title": "Search results"
                        }
                    }
                }
            ]
        },
        "EdgeNodeDeploymentConfig": {
            "x-vmw-nsx-module": "FabricNode",
            "required": [
                "node_user_settings",
                "vm_deployment_config"
            ],
            "type": "object",
            "properties": {
                "node_user_settings": {
                    "title": "Node user settings",
                    "description": "Username and password settings for the node.\nNote - these settings will be honored only during node deployment.\nPost deployment, CLI must be used for changing the user settings, changes to these parameters will not have any effect.\n",
                    "$ref": "#/definitions/NodeUserSettings"
                },
                "vm_deployment_config": {
                    "$ref": "#/definitions/DeploymentConfig"
                },
                "form_factor": {
                    "description": "Supported edge form factor.",
                    "default": "MEDIUM",
                    "enum": [
                        "SMALL",
                        "MEDIUM",
                        "LARGE"
                    ],
                    "type": "string"
                }
            }
        },
        "Protocol": {
            "discriminator": "name",
            "x-vmw-nsx-module": "MISSING_MODULE",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "enum": [
                        "http",
                        "https",
                        "scp",
                        "sftp"
                    ],
                    "type": "string",
                    "description": "Protocol name",
                    "title": "Protocol name"
                }
            }
        },
        "LbClientCertificateIssuerDnCondition": {
            "description": "Match condition for client certficate issuer DN",
            "title": "Match condition for client certficate issuer DN",
            "required": [
                "issuer_dn"
            ],
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "properties": {
                "case_sensitive": {
                    "default": true,
                    "type": "boolean",
                    "description": "If true, case is significant when comparing issuer DN value.\n",
                    "title": "A case sensitive flag for issuer DN comparing"
                },
                "match_type": {
                    "description": "Match type of issuer DN",
                    "default": "REGEX",
                    "enum": [
                        "STARTS_WITH",
                        "ENDS_WITH",
                        "EQUALS",
                        "CONTAINS",
                        "REGEX"
                    ],
                    "type": "string"
                },
                "issuer_dn": {
                    "type": "string",
                    "description": "Value of issuer DN",
                    "title": "Value of issuer DN"
                }
            }
        },
        "PortMirroringSessionListResult": {
            "x-vmw-nsx-module": "PortMirroring",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "PortMirroring",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/PortMirroringSession"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Port mirroring session results",
                            "title": "Port mirroring session results"
                        }
                    }
                }
            ],
            "description": "Mirror session queries result",
            "title": "Mirror session queries result"
        },
        "InstallUpgradeServiceProperties": {
            "description": "install-upgrade service properties",
            "title": "install-upgrade service properties",
            "required": [
                "enabled"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "enabled_on": {
                    "readOnly": true,
                    "type": "string",
                    "description": "IP of manager on which install-upgrade is enabled",
                    "title": "IP of manager on which install-upgrade is enabled"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "True if service enabled; otherwise, false",
                    "title": "True if service enabled; otherwise, false"
                }
            }
        },
        "LogicalRouterPortArpCsvRecord": {
            "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvRecord"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
                    "required": [
                        "ip",
                        "mac_address"
                    ],
                    "type": "object",
                    "properties": {
                        "ip": {
                            "description": "The IP address",
                            "format": "ip",
                            "type": "string"
                        },
                        "mac_address": {
                            "type": "string",
                            "description": "The MAC address",
                            "title": "The MAC address"
                        }
                    }
                }
            ]
        },
        "PortConnectionLogicalSwitch": {
            "x-vmw-nsx-module": "PortConnection",
            "allOf": [
                {
                    "$ref": "#/definitions/PortConnectionEntity"
                },
                {
                    "x-vmw-nsx-module": "PortConnection",
                    "type": "object",
                    "properties": {
                        "vm_ports_states": {
                            "items": {
                                "$ref": "#/definitions/LogicalPortState"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "States of Logical Ports that are attached to a VIF/VM",
                            "title": "States of Logical Ports that are attached to a VIF/VM"
                        },
                        "vm_ports": {
                            "items": {
                                "$ref": "#/definitions/LogicalPort"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Logical Ports that are attached to a VIF/VM",
                            "title": "Logical Ports that are attached to a VIF/VM"
                        },
                        "vm_vnics": {
                            "items": {
                                "$ref": "#/definitions/VirtualNetworkInterface"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Virutal Network Interfaces that are attached to the Logical Ports",
                            "title": "Virutal Network Interfaces that are attached to the Logical Ports"
                        },
                        "router_ports": {
                            "items": {
                                "$ref": "#/definitions/LogicalPort"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Logical Ports that are attached to a router",
                            "title": "Logical Ports that are attached to a router"
                        }
                    }
                }
            ],
            "description": "Port Connection Logical Switch Entity",
            "title": "Port Connection Logical Switch Entity"
        },
        "TraceflowObservationForwardedLogical": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/TraceflowObservation"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "lport_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The name of the logical port through which the traceflow packet was forwarded.",
                            "title": "The name of the logical port through which the traceflow packet was forwarded."
                        },
                        "component_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the component that forwarded the traceflow packet.",
                            "title": "The id of the component that forwarded the traceflow packet."
                        },
                        "dst_component_type": {
                            "description": "The type of the destination component to which the traceflow packet was forwarded.",
                            "enum": [
                                "PHYSICAL",
                                "LR",
                                "LS",
                                "DFW",
                                "BRIDGE",
                                "EDGE_TUNNEL",
                                "EDGE_HOSTSWITCH",
                                "UNKNOWN"
                            ],
                            "readOnly": true,
                            "type": "string"
                        },
                        "lport_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the logical port through which the traceflow packet was forwarded.",
                            "title": "The id of the logical port through which the traceflow packet was forwarded."
                        },
                        "dst_component_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the destination component to which the traceflow packet was forwarded.",
                            "title": "The id of the destination component to which the traceflow packet was forwarded."
                        },
                        "acl_rule_id": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "The id of the acl rule that was applied to forward the traceflow packet",
                            "title": "The id of the acl rule that was applied to forward the traceflow packet"
                        },
                        "vni": {
                            "readOnly": true,
                            "format": "int32",
                            "type": "integer",
                            "description": "VNI for the logical network on which the traceflow packet was forwarded.",
                            "title": "VNI for the logical network on which the traceflow packet was forwarded."
                        },
                        "dst_component_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The name of the destination component to which the traceflow packet was forwarded.",
                            "title": "The name of the destination component to which the traceflow packet was forwarded."
                        }
                    }
                }
            ]
        },
        "NodeProcessProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "mem_used": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Virtual memory used by process in bytes",
                            "title": "Virtual memory used by process in bytes"
                        },
                        "cpu_time": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "CPU time (user and system) consumed by process in milliseconds",
                            "title": "CPU time (user and system) consumed by process in milliseconds"
                        },
                        "ppid": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Parent process id",
                            "title": "Parent process id"
                        },
                        "start_time": {
                            "description": "Process start time expressed in milliseconds since epoch",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "process_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Process name",
                            "title": "Process name"
                        },
                        "pid": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Process id",
                            "title": "Process id"
                        },
                        "uptime": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Milliseconds since process started",
                            "title": "Milliseconds since process started"
                        },
                        "mem_resident": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Resident set size of process in bytes",
                            "title": "Resident set size of process in bytes"
                        }
                    }
                }
            ],
            "description": "Node process properties",
            "title": "Node process properties"
        },
        "IngressBroadcastRateShaper": {
            "x-vmw-nsx-module": "QosSwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/QosBaseRateShaper"
                },
                {
                    "x-vmw-nsx-module": "QosSwitchingProfile",
                    "type": "object",
                    "properties": {
                        "average_bandwidth_kbps": {
                            "description": "Average bandwidth in kb/s",
                            "format": "int32",
                            "default": 0,
                            "title": "Average bandwidth in kb/s",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "peak_bandwidth_kbps": {
                            "description": "Peak bandwidth in kb/s",
                            "format": "int32",
                            "default": 0,
                            "title": "Peak bandwidth in kb/s",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "burst_size_bytes": {
                            "description": "Burst size in bytes",
                            "format": "int32",
                            "default": 0,
                            "title": "Burst size in bytes",
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "A shaper that specifies ingress rate properties in kb/s",
            "title": "A shaper that specifies ingress rate properties in kb/s"
        },
        "RemainingSupportBundleNode": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "PENDING",
                        "PROCESSING"
                    ],
                    "type": "string",
                    "description": "Status of node",
                    "title": "Status of node"
                },
                "node_display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Display name of node",
                    "title": "Display name of node"
                },
                "node_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "UUID of node",
                    "title": "UUID of node"
                }
            }
        },
        "AdvertisementRuleFilter": {
            "x-vmw-nsx-module": "Routing",
            "required": [
                "prefix_operator",
                "match_route_types"
            ],
            "type": "object",
            "description": "To filter the routes advertised by the TIER1 LR to TIER0 LR. Filtering will be based on the type of route and the prefix operator configured.",
            "properties": {
                "prefix_operator": {
                    "default": "GE",
                    "enum": [
                        "GE",
                        "EQ"
                    ],
                    "type": "string",
                    "description": "GE prefix operator filters all the routes having network subset of any of the networks configured in Advertise rule. EQ prefix operator filter all the routes having network equal to any of the network configured in Advertise rule.",
                    "title": "Prefix operator to apply on networks"
                },
                "match_route_types": {
                    "minItems": 1,
                    "items": {
                        "enum": [
                            "ANY",
                            "STATIC",
                            "NSX_CONNECTED",
                            "T1_NAT",
                            "T1_LB_VIP",
                            "T1_LB_SNAT"
                        ],
                        "type": "string",
                        "description": "Route types to filter the routes advertised by TIER1 LR. The ANY type filters all routes advertised by TIER1. The STATIC type filters STATIC routes advertised by TIER1. The NSX_CONNECTED type filters routes conrresponding to downlink networks advertised by TIER1. The T1_NAT type filters routes for NAT rules advertised by TIER1. The T1_LB_VIP type filters LB VIP networks advertised by TIER1. The T1_LB_SNAT type filters routes correspoding to LB SNAT rules advertised by TIER1."
                    },
                    "type": "array",
                    "description": "Array of route types to filter routes",
                    "title": "Array of route types to filter routes"
                }
            }
        },
        "FireWallServiceAssociationListResult": {
            "x-vmw-nsx-module": "GroupingObjectsProviders",
            "allOf": [
                {
                    "$ref": "#/definitions/ServiceAssociationListResult"
                },
                {
                    "x-vmw-nsx-module": "GroupingObjectsProviders",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/FirewallRule"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Firewall rule list result with pagination support.",
                            "title": "Firewall rule list result"
                        }
                    }
                }
            ]
        },
        "DhcpStaticBindingListResult": {
            "x-vmw-nsx-module": "Dhcp",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Dhcp",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DhcpStaticBinding"
                            },
                            "type": "array",
                            "description": "paginated list of dhcp static bindings",
                            "title": "paginated list of dhcp static bindings"
                        }
                    }
                }
            ]
        },
        "AppliedTos": {
            "x-vmw-nsx-module": "UpmCommon",
            "type": "object",
            "description": "Entity lists where the profile will be enabled on.\n",
            "properties": {
                "logical_ports": {
                    "items": {
                        "$ref": "#/definitions/ResourceReference"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "Logical Port List",
                    "title": "Logical Port List"
                },
                "logical_switches": {
                    "items": {
                        "$ref": "#/definitions/ResourceReference"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "Logical Switch List",
                    "title": "Logical Switch List"
                },
                "nsgroups": {
                    "items": {
                        "$ref": "#/definitions/ResourceReference"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "NSGroup List",
                    "title": "NSGroup List"
                }
            },
            "title": "Entities Applied to Profile"
        },
        "NodeInstallUpgradeServiceProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/NodeServiceProperties"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "service_properties": {
                            "title": "install-upgrade Service properties",
                            "description": "install-upgrade Service properties",
                            "$ref": "#/definitions/InstallUpgradeServiceProperties"
                        }
                    }
                }
            ],
            "description": "Node install-upgrade service properties",
            "title": "Node install-upgrade service properties"
        },
        "PnicBondStatus": {
            "x-vmw-nsx-module": "Heatmap",
            "type": "object",
            "description": "pNIC/bond statuses",
            "properties": {
                "status": {
                    "enum": [
                        "UNKNOWN",
                        "UP",
                        "DOWN",
                        "DEGRADED"
                    ],
                    "type": "string",
                    "description": "Status of pNIC/bond",
                    "title": "pNic/bond status"
                },
                "type": {
                    "enum": [
                        "UNKNOWN_TYPE",
                        "PNIC",
                        "BOND"
                    ],
                    "type": "string",
                    "description": "type, whether the object is a pNIC or a bond",
                    "title": "Object type"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the pNIC/bond",
                    "title": "pNIC/bond name"
                }
            },
            "title": "pNIC/bond status"
        },
        "LogicalSwitchStatusSummary": {
            "x-vmw-nsx-module": "AggSvcLogicalSwitch",
            "required": [
                "total_switches",
                "fully_realized_switches"
            ],
            "type": "object",
            "properties": {
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "total_switches": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of logical switches.",
                    "title": "The total number of logical switches."
                },
                "filters": {
                    "items": {
                        "$ref": "#/definitions/Filter"
                    },
                    "type": "array",
                    "description": "The filters used to find the logical switches- TransportZone id, LogicalSwitchProfile id or TransportType",
                    "title": "The filters used to find the logical switches- TransportZone id, LogicalSwitchProfile id or TransportType"
                },
                "fully_realized_switches": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of logical switches that are realized in all transport nodes.",
                    "title": "The number of logical switches that are realized in all transport nodes."
                }
            }
        },
        "LogicalRouterPortStatisticsSummary": {
            "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
            "allOf": [
                {
                    "$ref": "#/definitions/AggregatedLogicalRouterPortCounters"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
                    "required": [
                        "logical_router_port_id"
                    ],
                    "type": "object",
                    "properties": {
                        "logical_router_port_id": {
                            "type": "string",
                            "description": "The ID of the logical router port",
                            "title": "The ID of the logical router port"
                        }
                    }
                }
            ]
        },
        "PBRService": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/DSService"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object"
                }
            ],
            "description": "Type to define services associated with every rule",
            "title": "PBR Service element"
        },
        "ServiceDefinition": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "attachment_point",
                        "vendor_id",
                        "transports",
                        "implementations",
                        "functionalities"
                    ],
                    "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
                    "type": "object",
                    "properties": {
                        "service_deployment_spec": {
                            "readOnly": false,
                            "title": "Service Deployment Specification",
                            "description": "Service Deployment Specification defines takes in information required to deploy and configure a partner appliance/service-vm.",
                            "$ref": "#/definitions/ServiceDeploymentSpec"
                        },
                        "functionalities": {
                            "description": "The capabilities provided by the services like NG_FW, IDS_IPS Hybrid Cloud Exchange(HCX) is specified here.",
                            "title": "Functionality Type",
                            "minItems": 1,
                            "items": {
                                "enum": [
                                    "NG_FW",
                                    "IDS_IPS",
                                    "HCX"
                                ],
                                "type": "string"
                            },
                            "readOnly": false,
                            "type": "array"
                        },
                        "attachment_point": {
                            "description": "The point at which the service is deployed/attached for redirecting the traffic to the the partner appliance.",
                            "title": "Attachment Point",
                            "minItems": 1,
                            "items": {
                                "enum": [
                                    "TIER0_LR",
                                    "TIER1_LR"
                                ],
                                "type": "string"
                            },
                            "readOnly": false,
                            "maxItems": 1,
                            "type": "array"
                        },
                        "transports": {
                            "description": "Transport Type of the service, which is the mechanism of redirecting the traffic to the the partner appliance.",
                            "title": "Transport Type",
                            "minItems": 1,
                            "items": {
                                "enum": [
                                    "L2_BRIDGE",
                                    "L3_ROUTED"
                                ],
                                "type": "string"
                            },
                            "readOnly": false,
                            "type": "array"
                        },
                        "vendor_id": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Id which is unique to a vendor or partner for which the service is created.",
                            "title": "Vendor ID"
                        },
                        "on_failure_policy": {
                            "description": "Failure policy for the service tells datapath, the action to take i.e to Allow or Block traffic during failure scenarios.",
                            "title": "On Failure Policy",
                            "default": "ALLOW",
                            "enum": [
                                "ALLOW",
                                "BLOCK"
                            ],
                            "readOnly": false,
                            "type": "string"
                        },
                        "implementations": {
                            "description": "This indicates the insertion point of the service.",
                            "title": "Implementation Type",
                            "minItems": 1,
                            "items": {
                                "enum": [
                                    "NORTH_SOUTH",
                                    "EAST_WEST"
                                ],
                                "type": "string"
                            },
                            "readOnly": false,
                            "maxItems": 1,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "Registering a Service is the first step in the ServiceInsertion mechanism. A ServiceDefinition is used to create a service.",
            "title": "Definition of a Service."
        },
        "LogicalRouterDownLinkPort": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "allOf": [
                {
                    "$ref": "#/definitions/LogicalRouterPort"
                },
                {
                    "x-vmw-nsx-module": "LogicalRouterPorts",
                    "required": [
                        "subnets"
                    ],
                    "type": "object",
                    "properties": {
                        "subnets": {
                            "description": "Logical router port subnets",
                            "title": "Logical router port subnets",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IPSubnet"
                            },
                            "maxItems": 1,
                            "type": "array"
                        },
                        "urpf_mode": {
                            "description": "Unicast Reverse Path Forwarding mode",
                            "default": "STRICT",
                            "enum": [
                                "NONE",
                                "STRICT"
                            ],
                            "type": "string"
                        },
                        "mac_address": {
                            "readOnly": true,
                            "type": "string",
                            "description": "MAC address",
                            "title": "MAC address"
                        },
                        "linked_logical_switch_port_id": {
                            "title": "Reference to the logical switch port to connect to",
                            "description": "Reference to the logical switch port to connect to",
                            "$ref": "#/definitions/ResourceReference"
                        }
                    }
                }
            ]
        },
        "DSRuleState": {
            "x-vmw-nsx-module": "DistributedServices",
            "allOf": [
                {
                    "$ref": "#/definitions/ConfigurationState"
                },
                {
                    "x-vmw-nsx-module": "DistributedServices",
                    "type": "object",
                    "properties": {
                        "revision_desired": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "revision number of the desired state",
                            "title": "revision number of the desired state"
                        }
                    }
                }
            ]
        },
        "ServiceAttachment": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "deployed_to",
                        "local_ips"
                    ],
                    "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
                    "type": "object",
                    "properties": {
                        "attachment_status": {
                            "description": "UP - A Service Attachment will have its Service Port - UP and with a configured IP address. DOWN - An Inactive ServiceAttachment has its Service Port - DOWN. It can be used to connect set of appliances that do not need to exchange traffic to/from/through the Edge node.",
                            "title": "Attachment Status",
                            "default": "UP",
                            "enum": [
                                "UP",
                                "DOWN"
                            ],
                            "readOnly": false,
                            "type": "string"
                        },
                        "service_port": {
                            "readOnly": true,
                            "title": "Service Port (Logical Router Centralized Service Port)",
                            "description": "Service Port gets created as a part of Service Attachment creation. It is a Logical Router Port of type CentralizedServicePort. It does not participate in distributed routing. Stateless Policy Based Routing service can be applied on this port.",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "deployed_to": {
                            "readOnly": false,
                            "title": "Deployed-to object",
                            "description": "NSX Resource where we want to create Service Attachment Point. Ex. T0 LR Edge in case of HCX-ServiceInsertion.",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "logical_switch": {
                            "readOnly": true,
                            "title": "Logical Switch",
                            "description": "Logical Switch gets created as a part of Service Attachment creation. If a Logical Switch is provided, then that needs to be used  - instead of creating new one.",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "local_ips": {
                            "description": "Local IPs associated with this Service Attachment.",
                            "title": "Local IPs",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IPInfo"
                            },
                            "maxItems": 1,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "A ServiceAttachment represents a point on NSX entity (Example - Edge Router) to which ServiceInstance can be connected through an InstanceEndpoint. Example - In VMWare Hybric Cloud Extention (HCX) use case, HCX appliances connect to this Service Attachment Point. We do not handle the lifecycle of these appliance/s.",
            "title": "Logical Attachment Point for a 3rd Party Service"
        },
        "LogicalSwitch": {
            "x-vmw-nsx-module": "LogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "LogicalSwitch",
                    "required": [
                        "transport_zone_id",
                        "admin_state"
                    ],
                    "type": "object",
                    "properties": {
                        "replication_mode": {
                            "enum": [
                                "MTEP",
                                "SOURCE"
                            ],
                            "type": "string",
                            "description": "Replication mode of the Logical Switch",
                            "title": "Replication mode of the Logical Switch"
                        },
                        "extra_configs": {
                            "items": {
                                "$ref": "#/definitions/ExtraConfig"
                            },
                            "type": "array",
                            "description": "This property could be used for vendor specific configuration in key value\nstring pairs, the setting in extra_configs will be automatically inheritted\nby logical ports in the logical switch.\n",
                            "title": "Extra configs on logical switch"
                        },
                        "uplink_teaming_policy_name": {
                            "type": "string",
                            "description": "This name has to be one of the switching uplink teaming policy names listed inside the logical switch's TransportZone. If this field is not specified, the logical switch will not have a teaming policy associated with it and the host switch's default teaming policy will be used.",
                            "title": "The name of the switching uplink teaming policy for the logical switch"
                        },
                        "transport_zone_id": {
                            "type": "string",
                            "description": "Id of the TransportZone to which this LogicalSwitch is associated",
                            "title": "Id of the TransportZone to which this LogicalSwitch is associated"
                        },
                        "ip_pool_id": {
                            "type": "string",
                            "description": "IP pool id that associated with a LogicalSwitch.",
                            "title": "Allocation ip pool associated with the Logical switch"
                        },
                        "vlan": {
                            "type": "integer",
                            "description": "This property is dedicated to VLAN based network, to set VLAN of logical\nnetwork. It is mutually exclusive with 'vlan_trunk_spec'.\n",
                            "format": "int64"
                        },
                        "mac_pool_id": {
                            "type": "string",
                            "description": "Mac pool id that associated with a LogicalSwitch.",
                            "title": "Allocation mac pool associated with the Logical switch"
                        },
                        "vni": {
                            "format": "int32",
                            "type": "integer",
                            "description": "Only for OVERLAY network. A VNI will be auto-allocated from the\ndefault VNI pool if not given; otherwise the given VNI has to be\ninside the default pool and not used by any other LogicalSwitch.\n",
                            "title": "VNI for this LogicalSwitch."
                        },
                        "vlan_trunk_spec": {
                            "title": "VLAN trunk spec of logical switch",
                            "description": "This property is used for VLAN trunk specification of logical switch.\nIt's mutually exclusive with 'vlan'. Also it could be set to do guest VLAN\ntagging in overlay network.\n",
                            "$ref": "#/definitions/VlanTrunkSpec"
                        },
                        "admin_state": {
                            "enum": [
                                "UP",
                                "DOWN"
                            ],
                            "type": "string",
                            "description": "Represents Desired state of the Logical Switch",
                            "title": "Represents Desired state of the Logical Switch"
                        },
                        "address_bindings": {
                            "description": "Address bindings for the Logical switch",
                            "title": "Address bindings for the Logical switch",
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/PacketAddressClassifier"
                            },
                            "maxItems": 100,
                            "type": "array"
                        },
                        "switching_profile_ids": {
                            "items": {
                                "$ref": "#/definitions/SwitchingProfileTypeIdEntry"
                            },
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "LbSslProtocolInfo": {
            "description": "SSL protocol",
            "title": "SSL protocol",
            "required": [
                "is_default",
                "is_secure",
                "protocol"
            ],
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "properties": {
                "is_default": {
                    "type": "boolean",
                    "description": "Default SSL protocol flag",
                    "title": "Default SSL protocol flag"
                },
                "is_secure": {
                    "type": "boolean",
                    "description": "Secure/insecure SSL protocol flag",
                    "title": "Secure/insecure SSL protocol flag"
                },
                "protocol": {
                    "description": "SSL protocol",
                    "enum": [
                        "SSL_V2",
                        "SSL_V3",
                        "TLS_V1",
                        "TLS_V1_1",
                        "TLS_V1_2"
                    ],
                    "type": "string"
                }
            }
        },
        "UpgradeUnitTypeStatsList": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "properties": {
                "results": {
                    "items": {
                        "$ref": "#/definitions/UpgradeUnitTypeStats"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "List of upgrade unit type stats",
                    "title": "List of upgrade unit type stats"
                }
            }
        },
        "PacketCaptureOptionList": {
            "x-vmw-nsx-module": "PacketCapture",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "PacketCapture",
                    "type": "object",
                    "properties": {
                        "values": {
                            "items": {
                                "$ref": "#/definitions/PacketCaptureOption"
                            },
                            "type": "array",
                            "description": "Packet capture option collection",
                            "title": "Packet capture option collection"
                        }
                    }
                }
            ],
            "description": "List of packet capture options to filter data in capture process.",
            "title": "List of packet capture options"
        },
        "ComponentTargetVersion": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "target_version": {
                    "readOnly": true,
                    "type": "string"
                },
                "component_type": {
                    "readOnly": true,
                    "type": "string"
                }
            }
        },
        "AggregateDataResponse": {
            "x-vmw-nsx-module": "Search",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "Search",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/AggregateResponse"
                            },
                            "type": "array",
                            "description": "Array containing the primary and the related object details",
                            "title": "Results"
                        }
                    }
                }
            ],
            "description": "Final data aggregation response.\nThe results array holds the primary and the related objects\n",
            "title": "Data aggregation response"
        },
        "PoolMemberSetting": {
            "description": "The setting is used to add, update or remove pool members from pool.\nFor static pool members, admin_state, display_name and weight can be\nupdated.\nFor dynamic pool members, only admin_state can be updated.\n",
            "title": "Pool member setting",
            "required": [
                "ip_address"
            ],
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "properties": {
                "admin_state": {
                    "description": "Member admin state",
                    "default": "ENABLED",
                    "enum": [
                        "ENABLED",
                        "DISABLED",
                        "GRACEFUL_DISABLED"
                    ],
                    "type": "string"
                },
                "ip_address": {
                    "description": "Pool member IP address",
                    "format": "ip",
                    "type": "string"
                },
                "port": {
                    "description": "Pool member port number",
                    "format": "port-or-range",
                    "type": "string"
                },
                "weight": {
                    "description": "Only applicable to static pool members. If supplied for a pool defined\nby a grouping object, update API would fail.\n",
                    "format": "int64",
                    "title": "Pool member weight",
                    "maximum": 255,
                    "minimum": 1,
                    "type": "integer"
                },
                "display_name": {
                    "type": "string",
                    "description": "Only applicable to static pool members. If supplied for a pool defined\nby a grouping object, update API would fail.\n",
                    "title": "Pool member display name"
                }
            }
        },
        "L2VPNSessionStatistics": {
            "x-vmw-nsx-module": "L2VPNStatistics",
            "type": "object",
            "description": "Session statistics gives VPN session status and traffic statistics per logical switch.",
            "properties": {
                "traffic_statistics_per_logical_switch": {
                    "items": {
                        "$ref": "#/definitions/L2VPNPerLSTrafficStatistics"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Traffic statistics per logical switch.",
                    "title": "Traffic statistics per logical switch"
                },
                "display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "L2VPN display name.",
                    "title": "Display name"
                },
                "partial_stats": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Partial statistics is set to true if onle active node responds while standby does not. In case of both nodes responded statistics will be summed and partial stats will be false. If cluster has only active node, partial statistics will always be false.",
                    "title": "Partial Statistics"
                },
                "session_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Session identifier for L2VPN.",
                    "title": "L2VPN session id"
                },
                "tap_traffic_counters": {
                    "items": {
                        "$ref": "#/definitions/L2VPNTapTrafficStatistics"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Tunnel port traffic counters.",
                    "title": "Tunnel port traffic counters"
                }
            },
            "title": "L2VPN session statistics"
        },
        "SIAggregatedDataCounterEx": {
            "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
            "allOf": [
                {
                    "$ref": "#/definitions/SIAggregatedDataCounter"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
                    "type": "object",
                    "properties": {
                        "mac_learning": {
                            "readOnly": true,
                            "$ref": "#/definitions/SIMacLearningCounters"
                        },
                        "dropped_by_security_packets": {
                            "readOnly": true,
                            "$ref": "#/definitions/SIPacketsDroppedBySecurity"
                        }
                    }
                }
            ]
        },
        "HostSwitch": {
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "description": "Host Switch specification",
            "properties": {
                "pnics": {
                    "items": {
                        "$ref": "#/definitions/Pnic"
                    },
                    "type": "array",
                    "description": "Physical NICs connected to the host switch",
                    "title": "Physical NICs connected to the host switch"
                },
                "host_switch_name": {
                    "default": "nsxDefaultHostSwitch",
                    "type": "string",
                    "description": "If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given Transport Node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.",
                    "title": "HostSwitch name. This name will be used to reference this HostSwitch."
                },
                "static_ip_pool_id": {
                    "type": "string",
                    "description": "ID of configured Static IP Pool. If specified allocate IP for Endpoints from Pool. Else assume IP will be assigned for Endpoints from DHCP. This field is deprecated, use ip_assignment_spec field instead.",
                    "x-deprecated": true,
                    "title": "ID of already configured Static IP Pool."
                },
                "host_switch_profile_ids": {
                    "items": {
                        "$ref": "#/definitions/HostSwitchProfileTypeIdEntry"
                    },
                    "type": "array",
                    "description": "HostSwitch profiles bound to this HostSwitch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the Transport Node, the corresponding default profile will be bound to the HostSwitch.",
                    "title": "Id's of HostSwitch profiles to be associated with this HostSwitch."
                }
            },
            "title": "Host Switch specification"
        },
        "ComponentUpgradeStatus": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "IN_PROGRESS",
                        "NOT_STARTED",
                        "PAUSED"
                    ],
                    "type": "string",
                    "description": "Upgrade status of component",
                    "title": "Upgrade status of component"
                },
                "percent_complete": {
                    "readOnly": true,
                    "type": "number",
                    "description": "Indicator of upgrade progress in percentage",
                    "title": "Indicator of upgrade progress in percentage"
                },
                "can_skip": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Can the upgrade of the remaining units in this component be skipped",
                    "title": "Can the upgrade of the remaining units in this component be skipped"
                },
                "details": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Details about the upgrade status",
                    "title": "Details about the upgrade status"
                },
                "component_type": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Component type for the upgrade status",
                    "title": "Component type for the upgrade status"
                }
            }
        },
        "ControllerClusterRoleConfig": {
            "x-vmw-nsx-module": "ClusterManagement",
            "allOf": [
                {
                    "$ref": "#/definitions/ClusterRoleConfig"
                },
                {
                    "x-vmw-nsx-module": "ClusterManagement",
                    "type": "object",
                    "properties": {
                        "mpa_msg_client_info": {
                            "$ref": "#/definitions/MsgClientInfo"
                        },
                        "host_msg_client_info": {
                            "$ref": "#/definitions/MsgClientInfo"
                        },
                        "control_plane_listen_addr": {
                            "readOnly": true,
                            "title": "The IP and port for the control plane service on this node",
                            "description": "The IP and port for the control plane service on this node",
                            "$ref": "#/definitions/ServiceEndpoint"
                        },
                        "control_cluster_listen_addr": {
                            "readOnly": true,
                            "title": "The IP and port for the control cluster service on this node",
                            "description": "The IP and port for the control cluster service on this node",
                            "$ref": "#/definitions/ServiceEndpoint"
                        }
                    }
                }
            ]
        },
        "LbServiceStatisticsCounter": {
            "x-vmw-nsx-module": "AggSvcLb",
            "type": "object",
            "properties": {
                "l4_total_sessions": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of l4 total sessions",
                    "title": "Number of l4 total sessions"
                },
                "l7_current_sessions": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of l7 current sessions",
                    "title": "Number of l7 current sessions"
                },
                "l4_max_sessions": {
                    "format": "int64",
                    "type": "integer",
                    "description": "L4 max sessions is used to show the peak L4 max session data since\nload balancer starts to provide service.\n",
                    "title": "Number of l4 maximum sessions"
                },
                "l4_current_sessions": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of l4 current sessions",
                    "title": "Number of l4 current sessions"
                },
                "l7_total_sessions": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of l7 total sessions",
                    "title": "Number of l7 total sessions"
                },
                "l4_current_session_rate": {
                    "type": "number",
                    "description": "The average number of l4 current sessions per second, the number is\naveraged over the last 5 one-second intervals.\n",
                    "title": "The average number of l4 current sessions per second, the number is\naveraged over the last 5 one-second intervals.\n"
                },
                "l7_current_session_rate": {
                    "type": "number",
                    "description": "The average number of l7 current requests per second, the number is\naveraged over the last 5 one-second intervals.\n",
                    "title": "The average number of l7 current requests per second, the number is\naveraged over the last 5 one-second intervals.\n"
                },
                "l7_max_sessions": {
                    "format": "int64",
                    "type": "integer",
                    "description": "L7 max sessions is used to show the peak L7 max session data since\nload balancer starts to provide service.\n",
                    "title": "Number of l7 maximum sessions"
                }
            }
        },
        "NSGroupSimpleExpression": {
            "x-vmw-nsx-module": "NSGroup",
            "allOf": [
                {
                    "$ref": "#/definitions/NSGroupExpression"
                },
                {
                    "required": [
                        "target_property",
                        "target_type",
                        "value",
                        "op"
                    ],
                    "x-vmw-nsx-module": "NSGroup",
                    "type": "object",
                    "properties": {
                        "target_resource": {
                            "readOnly": true,
                            "title": "Reference of the target",
                            "description": "Reference of the target. Will be populated when\nthe property is a resource id, the op (operator) is EQUALS and\npopulate_references is set to be true.\n",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "target_property": {
                            "type": "string",
                            "description": "Field of the resource on which this expression is evaluated",
                            "title": "Field of the resource on which this expression is evaluated"
                        },
                        "target_type": {
                            "description": "Type of the resource on which this expression is evaluated",
                            "enum": [
                                "NSGroup",
                                "IPSet",
                                "MACSet",
                                "LogicalSwitch",
                                "LogicalPort",
                                "VirtualMachine",
                                "DirectoryGroup"
                            ],
                            "type": "string"
                        },
                        "value": {
                            "type": "string",
                            "description": "Value that satisfies this expression",
                            "title": "Value that satisfies this expression"
                        },
                        "op": {
                            "enum": [
                                "EQUALS",
                                "CONTAINS",
                                "STARTSWITH"
                            ],
                            "type": "string",
                            "description": "Operator of the expression",
                            "title": "Operator of the expression"
                        }
                    }
                }
            ],
            "description": "Simple expressions to represent NSGroup membership",
            "title": "Simple expressions to represent NSGroup membership"
        },
        "NetworkMigrationSpec": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "resource_type"
                    ],
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "resource_type": {
                            "description": "Supported network migration specification types.",
                            "enum": [
                                "HostProfileNetworkMigrationSpec"
                            ],
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "The NetworkMigrationSpec is the base class for any types of network migration\nspecifications to be handled by transport node.\n",
            "title": "Abstract base type for network migration specification"
        },
        "Csr": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "CertificateManager",
                    "required": [
                        "key_size",
                        "algorithm",
                        "subject"
                    ],
                    "type": "object",
                    "properties": {
                        "key_size": {
                            "readOnly": false,
                            "type": "integer",
                            "description": "size measured in bits of the public key used in a cryptographic algorithm",
                            "format": "int64"
                        },
                        "pem_encoded": {
                            "readOnly": true,
                            "type": "string",
                            "description": "pem encoded certificate data"
                        },
                        "algorithm": {
                            "readOnly": false,
                            "enum": [
                                "RSA",
                                "DSA"
                            ],
                            "type": "string",
                            "description": "Cryptographic algorithm(asymmetric ) used by the public key for data encryption"
                        },
                        "subject": {
                            "readOnly": false,
                            "description": "the certificate owner's information (CN, O, OU, C, ST, L)",
                            "$ref": "#/definitions/Principal"
                        }
                    }
                }
            ]
        },
        "AggregatedDataCounter": {
            "x-vmw-nsx-module": "AggSvcL2Types",
            "type": "object",
            "properties": {
                "tx_bytes": {
                    "readOnly": true,
                    "$ref": "#/definitions/DataCounter"
                },
                "rx_packets": {
                    "readOnly": true,
                    "$ref": "#/definitions/DataCounter"
                },
                "tx_packets": {
                    "readOnly": true,
                    "$ref": "#/definitions/DataCounter"
                },
                "rx_bytes": {
                    "readOnly": true,
                    "$ref": "#/definitions/DataCounter"
                }
            }
        },
        "UnassociatedVMListResult": {
            "x-vmw-nsx-module": "GroupingObjectsProviders",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "GroupingObjectsProviders",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "type": "integer",
                            "description": "Timestamp in milliseconds since epoch",
                            "format": "int64"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/VirtualMachine"
                            },
                            "type": "array",
                            "description": "List of VMs which are not associated with any NSGroup\n",
                            "title": "Unassociated Vitual Machine list results\n"
                        }
                    }
                }
            ]
        },
        "ErrorResolverMetadata": {
            "x-vmw-nsx-module": "ErrorResolver",
            "required": [
                "error_id",
                "entity_id"
            ],
            "type": "object",
            "description": "Error along with its metadata",
            "properties": {
                "error_id": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The error id as reported by the entity where the error occurred.",
                    "title": "The error id as reported by the entity where the error occurred."
                },
                "system_metadata": {
                    "title": "This can come from some external system like syslog collector",
                    "description": "This can come from some external system like syslog collector",
                    "$ref": "#/definitions/ErrorResolverSystemMetadata"
                },
                "entity_id": {
                    "type": "string",
                    "description": "The entity/node UUID where the error has occurred.",
                    "title": "The entity/node UUID where the error has occurred."
                },
                "user_metadata": {
                    "title": "User supplied metadata that might be required by the resolver",
                    "description": "User supplied metadata that might be required by the resolver",
                    "$ref": "#/definitions/ErrorResolverUserMetadata"
                }
            }
        },
        "VniPoolListResult": {
            "x-vmw-nsx-module": "Vnim",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Vnim",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/VniPool"
                            },
                            "type": "array",
                            "description": "VNI pool list results",
                            "title": "VNI pool list results"
                        }
                    }
                }
            ]
        },
        "LbService": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "access_log_enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "whether access log is enabled",
                            "x-deprecated": true,
                            "title": "whether access log is enabled"
                        },
                        "attachment": {
                            "title": "The target which is used to instantiate Lb service.",
                            "description": "LBS could be instantiated (or created) on the Logical router, etc.\nTypically, it could be applied to Tier1 LogicalRouter. It can be\nattached to Tier0 LogicalRouter either in non-multi-tenant environments\nor to provide load balancing for infrastructure services offered by\nthe provider.\n",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "error_log_level": {
                            "description": "Load balancer engine writes information about encountered issues of\ndifferent severity levels to the error log. This setting is used to\ndefine the severity level of the error log.\n",
                            "default": "INFO",
                            "enum": [
                                "DEBUG",
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "CRITICAL",
                                "ALERT",
                                "EMERGENCY"
                            ],
                            "type": "string"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "whether the load balancer service is enabled",
                            "title": "whether the load balancer service is enabled"
                        },
                        "virtual_server_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "virtual servers can be associated to LbService(which is\nsimilar to physical/virtual load balancer), Lb virtual servers,\npools and other entities could be defined independently, the virtual\nserver identifier list here would be used to maintain the relationship of\nLbService and other Lb entities.\n",
                            "title": "virtual server identifier list"
                        },
                        "size": {
                            "description": "the size of load balancer service",
                            "default": "SMALL",
                            "enum": [
                                "SMALL",
                                "MEDIUM",
                                "LARGE"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "NodeMode": {
            "description": "Possible values of a mode in a \"/config/nsx_appliance_mode\" file",
            "title": "Stub for Nsx node modes",
            "required": [
                "mode_id"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "mode_id": {
                    "enum": [
                        "ON_PREM",
                        "SERVICE",
                        "VMC",
                        "VMC_LOCAL"
                    ],
                    "type": "string",
                    "description": "Possible enum values in a \"/config/nsx_appliance_mode\" file",
                    "title": "Nsx node mode"
                }
            }
        },
        "WidgetConfigurationList": {
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "description": "Represents a list of widget configurations.",
            "properties": {
                "widgetconfigurations": {
                    "items": {
                        "$ref": "#/definitions/WidgetConfiguration"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Array of widget configurations",
                    "title": "Array of widget configurations"
                }
            },
            "title": "List of Widget Configurations"
        },
        "SavedSearchListResult": {
            "x-vmw-nsx-module": "Search",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "Search",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/SavedSearch"
                            },
                            "type": "array",
                            "description": "The list of all saved searches by the user.",
                            "title": "Saved search list results"
                        }
                    }
                }
            ],
            "description": "The results array will contain all the saved or recent search objects.",
            "title": "List of all Saved or recent searches"
        },
        "LbVirtualServerStatusListResult": {
            "x-vmw-nsx-module": "AggSvcLb",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLb",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbVirtualServerStatus"
                            },
                            "type": "array",
                            "description": "paginated status list of virtual servers",
                            "title": "paginated status list of virtual servers"
                        }
                    }
                }
            ]
        },
        "DnsAnswer": {
            "description": "Answer of dns nslookup",
            "title": "Answer of dns nslookup",
            "required": [
                "edge_node_id",
                "dns_server"
            ],
            "x-vmw-nsx-module": "DnsForwarder",
            "type": "object",
            "properties": {
                "authoritative_answers": {
                    "description": "Authoritative answers",
                    "title": "Authoritative answers",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/DnsQueryAnswer"
                    },
                    "maxItems": 256,
                    "type": "array"
                },
                "edge_node_id": {
                    "type": "string",
                    "description": "ID of the edge node that performed the query.\n",
                    "title": "Edge node id"
                },
                "dns_server": {
                    "type": "string",
                    "description": "Dns server ip address and port, format is \"ip address#port\".\n",
                    "title": "Dns server information"
                },
                "non_authoritative_answers": {
                    "description": "Non authoritative answers",
                    "title": "Non authoritative answers",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/DnsQueryAnswer"
                    },
                    "maxItems": 256,
                    "type": "array"
                },
                "raw_answer": {
                    "type": "string",
                    "description": "It can be NXDOMAIN or error message which is not consisted of\nauthoritative_answer or non_authoritative_answer.\n",
                    "title": "Raw message returned from the dns forwarder"
                }
            }
        },
        "DirectoryLdapServer": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "username",
                        "host",
                        "password"
                    ],
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "Directory LDAP server connection user name.",
                            "title": "Ldap server username"
                        },
                        "host": {
                            "format": "ip-or-hostname",
                            "type": "string",
                            "description": "Directory LDAP server DNS host name or ip address which is reachable by NSX manager to be connected and do object synchronization.",
                            "title": "Ldap server host name"
                        },
                        "protocol": {
                            "default": "LDAP",
                            "enum": [
                                "LDAP",
                                "LDAPS"
                            ],
                            "type": "string",
                            "description": "Directory LDAP server connection protocol which is either LDAP or LDAPS.",
                            "title": "Ldap server protocol"
                        },
                        "thumbprint": {
                            "type": "string",
                            "description": "Directory LDAP server certificate thumbprint used in secure LDAPS connection.",
                            "title": "Ldap server certificate thumbprint using SHA-256 algorithm"
                        },
                        "password": {
                            "type": "string",
                            "description": "Directory LDAP server connection password.",
                            "title": "Ldap server password"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "Whether this directory LDAP server is enabled or not.",
                            "title": "Ldap server enable flag"
                        },
                        "port": {
                            "default": 389,
                            "format": "int64",
                            "type": "integer",
                            "description": "Directory LDAP server connection TCP/UDP port.",
                            "title": "Ldap server TCP/UDP port"
                        }
                    }
                }
            ],
            "description": "Ldap Server of Directory Domain",
            "title": "Ldap Server of Directory Domain"
        },
        "DeploymentSpec": {
            "description": "Deployment spec is a specific version of fabric module",
            "title": "Deployment spec is a specific version of fabric module",
            "required": [
                "versioned_deployment_specs",
                "fabric_module_version"
            ],
            "x-vmw-nsx-module": "HostPrepServiceFabric",
            "type": "object",
            "properties": {
                "versioned_deployment_specs": {
                    "items": {
                        "$ref": "#/definitions/VersionedDeploymentSpec"
                    },
                    "type": "array",
                    "description": "List of Versioned deployment specs",
                    "title": "List of Versioned deployment specs"
                },
                "fabric_module_version": {
                    "type": "string",
                    "description": "version of fabric module",
                    "title": "version of fabric module"
                }
            }
        },
        "AddManagementNodeSpec": {
            "x-vmw-nsx-module": "ClusterManagement",
            "required": [
                "type",
                "user_name",
                "remote_address"
            ],
            "type": "object",
            "properties": {
                "mpa_msg_client_info": {
                    "$ref": "#/definitions/MsgClientInfo"
                },
                "type": {
                    "readOnly": false,
                    "enum": [
                        "AddManagementNodeSpec"
                    ],
                    "type": "string",
                    "description": "must be set to AddManagementNodeSpec",
                    "title": "must be set to AddManagementNodeSpec"
                },
                "password": {
                    "readOnly": false,
                    "type": "string",
                    "description": "The password to be used to authenticate with the remote node.",
                    "title": "The password to be used to authenticate with the remote node."
                },
                "user_name": {
                    "readOnly": false,
                    "type": "string",
                    "description": "The username to be used to authenticate with the remote node.",
                    "title": "The username to be used to authenticate with the remote node."
                },
                "remote_address": {
                    "description": "The host address of the remote node to which to send this join request.",
                    "format": "ip",
                    "readOnly": false,
                    "type": "string"
                },
                "cert_thumbprint": {
                    "readOnly": false,
                    "type": "string",
                    "description": "The certificate thumbprint of the remote node.",
                    "title": "The certificate thumbprint of the remote node."
                }
            }
        },
        "IPSecVPNSessionTrafficSummary": {
            "x-vmw-nsx-module": "VPNStatistics",
            "type": "object",
            "description": "IPSec VPN session traffic summary.",
            "properties": {
                "traffic_counters": {
                    "readOnly": true,
                    "title": "Traffic stastics",
                    "description": "Traffic stastics.",
                    "$ref": "#/definitions/IPSecVPNTrafficCounters"
                },
                "ipsec_vpn_session": {
                    "readOnly": true,
                    "title": "VPN session",
                    "description": "VPN Session.",
                    "$ref": "#/definitions/ResourceReference"
                }
            },
            "title": "IPSec VPN session traffic summary"
        },
        "QosSwitchingProfile": {
            "x-vmw-nsx-module": "QosSwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseSwitchingProfile"
                },
                {
                    "x-vmw-nsx-module": "QosSwitchingProfile",
                    "type": "object",
                    "properties": {
                        "shaper_configuration": {
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/QosBaseRateShaper"
                            },
                            "type": "array",
                            "maxItems": 3
                        },
                        "class_of_service": {
                            "description": "Class of service",
                            "title": "Class of service",
                            "default": 0,
                            "format": "int32",
                            "maximum": 7,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "dscp": {
                            "$ref": "#/definitions/Dscp"
                        }
                    }
                }
            ]
        },
        "NatStatisticsPerLogicalRouter": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "type": "object",
            "properties": {
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "per_transport_node_statistics": {
                    "items": {
                        "$ref": "#/definitions/NatStatisticsPerTransportNode"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Detailed per node statistics",
                    "title": "Detailed per node statistics"
                },
                "statistics_across_all_nodes": {
                    "readOnly": true,
                    "title": "Rolled-up statistics for all rules on the logical router across all the nodes",
                    "description": "Rolled-up statistics for all rules on the logical router across all the nodes",
                    "$ref": "#/definitions/NatCounters"
                },
                "logical_router_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Id for the logical router",
                    "title": "Id for the logical router"
                }
            }
        },
        "IPInfo": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "required": [
                "ip_addresses",
                "prefix_length"
            ],
            "type": "object",
            "properties": {
                "ip_addresses": {
                    "description": "IPv4 Addresses",
                    "title": "IPv4 Addresses",
                    "minItems": 1,
                    "items": {
                        "description": "IPv4 address",
                        "format": "ipv4",
                        "type": "string"
                    },
                    "maxItems": 1,
                    "type": "array"
                },
                "prefix_length": {
                    "description": "Subnet Prefix Length",
                    "format": "int64",
                    "title": "Subnet Prefix Length",
                    "maximum": 32,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "ServiceIP": {
            "x-vmw-nsx-module": "L3",
            "type": "object",
            "properties": {
                "is_arp_proxy_enabled": {
                    "default": false,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Flag to denote status of ARP Proxy for service IP.",
                    "title": "Flag to denote status of ARP Proxy for service IP"
                },
                "ip_address": {
                    "description": "Service IP address registerd by the service.",
                    "format": "ipv4",
                    "readOnly": true,
                    "type": "string"
                },
                "is_loopback_enabled": {
                    "default": false,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Flag to denote loopback status for service IP.",
                    "title": "Flag to denote loopback status for service IP"
                },
                "service": {
                    "readOnly": true,
                    "title": "Service which registered the ip",
                    "description": "Service which registered the ip.",
                    "$ref": "#/definitions/ResourceReference"
                },
                "is_advertised": {
                    "default": false,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Flag to denote advertisement status of service IP to TIER0 LR.",
                    "title": "Flag to denote advertisement status of service IP"
                }
            }
        },
        "CrlObjectData": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "CertificateManager",
                    "required": [
                        "pem_encoded"
                    ],
                    "type": "object",
                    "properties": {
                        "pem_encoded": {
                            "readOnly": false,
                            "type": "string",
                            "description": "pem encoded crl data"
                        }
                    }
                }
            ]
        },
        "ComputeCollectionListResult": {
            "x-vmw-nsx-module": "InventoryCmObj",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "InventoryCmObj",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ComputeCollection"
                            },
                            "type": "array",
                            "description": "Compute Collection list results",
                            "title": "Compute Collection list results"
                        }
                    }
                }
            ],
            "description": "Compute Collection list result",
            "title": "Compute Collection list result"
        },
        "NormalizedResourceListResult": {
            "x-vmw-nsx-module": "Normalization",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "Normalization",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "type": "array",
                            "description": "Normalized resource list results",
                            "title": "Normalized resource list results"
                        }
                    }
                }
            ],
            "description": "Paged Collection of normalized resources",
            "title": "Paged Collection of normalized resources"
        },
        "IpBlockSubnetListResult": {
            "x-vmw-nsx-module": "Ipam",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Ipam",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IpBlockSubnet"
                            },
                            "type": "array",
                            "description": "IP block subnet list results",
                            "title": "IP block subnet list results"
                        }
                    }
                }
            ]
        },
        "TunnelList": {
            "x-vmw-nsx-module": "Tunnel",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Tunnel",
                    "type": "object",
                    "properties": {
                        "tunnels": {
                            "items": {
                                "$ref": "#/definitions/TunnelProperties"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of transport node tunnels",
                            "title": "List of transport node tunnels"
                        }
                    }
                }
            ]
        },
        "HttpServiceProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "description": "HTTP Service properties",
            "properties": {
                "global_api_concurrency_limit": {
                    "description": "The maximum number of concurrent API requests that will be serviced. If the number of API requests being processed exceeds this limit, new API requests will be refused and a 503 Service Unavailable response will be returned to the client.  To disable API concurrency limiting, set this value to 0.",
                    "format": "int64",
                    "default": 100,
                    "title": "Global API rate limit in calls",
                    "minimum": 0,
                    "type": "integer"
                },
                "client_api_concurrency_limit": {
                    "description": "The maximum number of concurrent API requests that will be serviced for a given authenticated client.  If the number of API requests being processed exceeds this limit, new API requests will be refused and a 503 Service Unavailable response will be returned to the client. To disable API concurrency limiting, set this value to 0.",
                    "format": "int64",
                    "default": 40,
                    "title": "Client API rate limit in calls",
                    "minimum": 0,
                    "type": "integer"
                },
                "session_timeout": {
                    "description": "NSX session inactivity timeout, set to 0 to configure no timeout",
                    "format": "int64",
                    "title": "NSX session inactivity timeout, set to 0 to configure no timeout",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "client_api_rate_limit": {
                    "description": "The maximum number of API requests that will be serviced per second for a given authenticated client.  If more API requests are received than can be serviced, a 429 Too Many Requests HTTP response will be returned. To disable API rate limiting, set this value to 0.",
                    "format": "int64",
                    "default": 100,
                    "title": "Client API rate limit in calls per second",
                    "minimum": 0,
                    "type": "integer"
                },
                "certificate": {
                    "readOnly": true,
                    "$ref": "#/definitions/Certificate"
                },
                "redirect_host": {
                    "description": "Host name or IP address to use for redirect location headers, or empty string to derive from current request",
                    "default": "",
                    "pattern": "/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$|^$/",
                    "type": "string"
                },
                "protocol_versions": {
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/ProtocolVersion"
                    },
                    "type": "array",
                    "description": "TLS protocol versions",
                    "title": "TLS protocol versions"
                },
                "cipher_suites": {
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/CipherSuite"
                    },
                    "type": "array",
                    "description": "Cipher suites used to secure contents of connection",
                    "title": "Cipher suites used to secure contents of connection"
                },
                "connection_timeout": {
                    "description": "NSX connection timeout, set to 0 to configure no timeout",
                    "format": "int64",
                    "title": "NSX connection timeout, set to 0 to configure no timeout",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "title": "HTTP Service properties"
        },
        "LbCookieTime": {
            "discriminator": "type",
            "x-vmw-nsx-module": "LoadBalancer",
            "required": [
                "type"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "Both session cookie and persistence cookie are supported,\nUse LbSessionCookieTime for session cookie time setting,\nUse LbPersistenceCookieTime for persistence cookie time setting\n",
                    "enum": [
                        "LbSessionCookieTime",
                        "LbPersistenceCookieTime"
                    ],
                    "type": "string"
                }
            }
        },
        "AppDiscoverySessionResultSummary": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/AppDiscoverySession"
                },
                {
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "app_profile_summary_list": {
                            "items": {
                                "$ref": "#/definitions/AppDiscoveryAppProfileResultSummary"
                            },
                            "type": "array",
                            "description": "List of App Profiles summary discovered in this session",
                            "title": "List of App Profiles summary discovered in this session"
                        },
                        "ns_groups": {
                            "items": {
                                "$ref": "#/definitions/NSGroupMetaInfo"
                            },
                            "type": "array",
                            "description": "List of NSGroups provided for discovery for this session",
                            "title": "List of NSGroups provided for discovery for this session"
                        },
                        "app_profiles": {
                            "items": {
                                "$ref": "#/definitions/AppProfileMetaInfo"
                            },
                            "type": "array",
                            "description": "List of app profiles targeted to be classified for this session",
                            "title": "List of app profiles targeted to be classified for this session"
                        }
                    }
                }
            ],
            "description": "Contains the summary of the results of an application discovery session\n",
            "title": "Contains the summary of the results of an application discovery session"
        },
        "IPSecVPNSessionSummary": {
            "x-vmw-nsx-module": "VPNStatistics",
            "type": "object",
            "description": "Summarized view of all selected IPSec VPN sessions.",
            "properties": {
                "traffic_summary_per_session": {
                    "items": {
                        "$ref": "#/definitions/IPSecVPNSessionTrafficSummary"
                    },
                    "type": "array",
                    "description": "Traffic summary per session.",
                    "title": "Traffic summary"
                },
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "session_summary": {
                    "readOnly": true,
                    "title": "Session summary",
                    "description": "Session summary for number of total, established, failed and degraded IPSec VPN sessions.",
                    "$ref": "#/definitions/IPsecVPNIKESessionSummary"
                },
                "aggregate_traffic_counters": {
                    "title": "Traffic summary",
                    "description": "Aggregate traffic statistics across all selected sessions.",
                    "$ref": "#/definitions/IPSecVPNTrafficCounters"
                }
            },
            "title": "IPSec VPN session summary"
        },
        "FirewallSectionLock": {
            "x-vmw-nsx-module": "Firewall",
            "required": [
                "comments",
                "section_revision"
            ],
            "type": "object",
            "properties": {
                "comments": {
                    "description": "Comments for section lock/unlock.",
                    "title": "Comments",
                    "minLength": 4,
                    "readOnly": false,
                    "maxLength": 4096,
                    "type": "string"
                },
                "section_revision": {
                    "readOnly": false,
                    "format": "int64",
                    "type": "integer",
                    "description": "Revision of the section.",
                    "title": "Section revision"
                }
            }
        },
        "LbRuleCondition": {
            "description": "Match conditions are used to match application traffic passing through\nload balancers. Multiple match conditions can be specified in one load\nbalancer rule, each match condition defines a criterion for application\ntraffic.\nIf inverse field is set to true, the match result of the condition is\ninverted.\nIf more than one match condition is specified, match strategy determines\nif all conditions should match or any one condition should match for the\nload balancer rule to be considered a match.\nCurrently only HTTP messages are supported by load balancer rules.\nEach load balancer rule is used at a specific phase of load balancer\nprocessing. Currently three phases are supported, HTTP_REQUEST_REWRITE,\nHTTP_FORWARDING and HTTP_RESPONSE_REWRITE.\nEach phase supports certain types of match conditions, supported match\nconditions in HTTP_REQUEST_REWRITE phase are:\nLbHttpRequestMethodCondition\nLbHttpRequestUriCondition\nLbHttpRequestUriArgumentsCondition\nLbHttpRequestVersionCondition\nLbHttpRequestHeaderCondition\nLbHttpRequestCookieCondition\nLbHttpRequestBodyCondition\nLbTcpHeaderCondition\nLbIpHeaderCondition\nLbVariableCondition\nLbHttpSslCondition\nSupported match conditions in HTTP_FORWARDING phase are:\nLbHttpRequestMethodCondition\nLbHttpRequestUriCondition\nLbHttpRequestVersionCondition\nLbHttpRequestHeaderCondition\nLbHttpRequestCookieCondition\nLbHttpRequestBodyCondition\nLbTcpHeaderCondition\nLbIpHeaderCondition\nLbVariableCondition\nLbHttpSslCondition\nSupported match condition in HTTP_RESPONSE_REWRITE phase is:\nLbHttpResponseHeaderCondition\nLbHttpRequestMethodCondition\nLbHttpRequestUriCondition\nLbHttpRequestUriArgumentsCondition\nLbHttpRequestVersionCondition\nLbHttpRequestHeaderCondition\nLbHttpRequestCookieCondition\nLbTcpHeaderCondition\nLbIpHeaderCondition\nLbVariableCondition\nLbHttpSslCondition\n",
            "title": "Match condition of load balancer rule",
            "required": [
                "type"
            ],
            "discriminator": "type",
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "properties": {
                "inverse": {
                    "default": false,
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition",
                    "title": "A flag to indicate whether reverse the match result of this condition"
                },
                "type": {
                    "description": "Type of load balancer rule condition",
                    "enum": [
                        "LbHttpRequestMethodCondition",
                        "LbHttpRequestUriCondition",
                        "LbHttpRequestUriArgumentsCondition",
                        "LbHttpRequestVersionCondition",
                        "LbHttpRequestHeaderCondition",
                        "LbHttpRequestCookieCondition",
                        "LbHttpRequestBodyCondition",
                        "LbHttpResponseHeaderCondition",
                        "LbTcpHeaderCondition",
                        "LbIpHeaderCondition",
                        "LbVariableCondition",
                        "LbHttpSslCondition"
                    ],
                    "type": "string"
                }
            }
        },
        "HostProfileNetworkMigrationSpec": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/NetworkMigrationSpec"
                },
                {
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "network_mappings": {
                            "description": "Based on provided mappings, VMkernal adapters will be migrated to mentioned\nlogical switch. Without mappings specification doesn't make any sense, hence\nminium one mapping should be specified. Assuming some sane value of 10 maximum\nmigrations which will be supported by any single specification.\n",
                            "title": "List of VMkernal adapters to logical switch mappings.",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/VmkToLogicalSwitchMapping"
                            },
                            "maxItems": 10,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "This specification should be used to define which VMK adapters need to be\nmigrated to NSX logical switches from VC network switches. Migrations specified\nhere should match with those from associated Host Profiles from VC.\nMismatch will result in migration failures.\nThis specification only supports migration vmkernal adapters to NSX logical switches.\n",
            "title": "Specification for network migrations related with Host Profiles."
        },
        "ClusteringConfig": {
            "description": "Configuration for automatically joining a cluster node to the\ncluster after it is deployed. ClusteringConfig is required\nif any of the deployment nodes has CONTROLLER role.\n",
            "title": "Configuration for VM's clustering",
            "required": [
                "clustering_type"
            ],
            "discriminator": "clustering_type",
            "x-vmw-nsx-module": "ClusterNodeVMDeployment",
            "type": "object",
            "properties": {
                "clustering_type": {
                    "enum": [
                        "ControlClusteringConfig"
                    ],
                    "type": "string",
                    "description": "Specifies the type of clustering config to be used.\n",
                    "title": "Type for the clustering config"
                }
            }
        },
        "RouteMapSequenceSet": {
            "x-vmw-nsx-module": "Routing",
            "type": "object",
            "properties": {
                "as_path_prepend": {
                    "type": "string",
                    "description": "As Path Prepending to influence path selection",
                    "title": "As Path Prepending to influence path selection"
                },
                "community": {
                    "type": "string",
                    "description": "Either well-known community name or community value in aa:nn(2byte:2byte) format",
                    "title": "Either well-known community name or community value in aa:nn(2byte:2byte) format"
                },
                "weight": {
                    "description": "Weight used to select certain path",
                    "format": "int32",
                    "title": "Weight used to select certain path",
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                },
                "multi_exit_discriminator": {
                    "description": "Multi Exit Discriminator (MED)",
                    "format": "int64",
                    "title": "Multi Exit Discriminator (MED)",
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "DhcpRelayService": {
            "x-vmw-nsx-module": "DhcpRelay",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "DhcpRelay",
                    "required": [
                        "dhcp_relay_profile_id"
                    ],
                    "type": "object",
                    "properties": {
                        "dhcp_relay_profile_id": {
                            "type": "string",
                            "description": "dhcp relay profile referenced by the dhcp relay service",
                            "title": "dhcp relay profile referenced by the dhcp relay service"
                        }
                    }
                }
            ]
        },
        "IpfixCollectorConfigListResult": {
            "x-vmw-nsx-module": "Ipfix",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Ipfix",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IpfixCollectorConfig"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "IPFIX Collector Config",
                            "title": "IPFIX Collector Config"
                        }
                    }
                }
            ],
            "description": "List of IPFIX Collector Configs",
            "title": "List of IPFIX Collector Configs"
        },
        "SupportBundleRequest": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "required": [
                "nodes"
            ],
            "type": "object",
            "properties": {
                "remote_file_server": {
                    "title": "Remote file server to copy bundles to, bundle in response body if not specified",
                    "description": "Remote file server to copy bundles to, bundle in response body if not specified",
                    "$ref": "#/definitions/SupportBundleRemoteFileServer"
                },
                "nodes": {
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "List of cluster/fabric node UUIDs processed in specified order",
                    "title": "List of cluster/fabric node UUIDs processed in specified order"
                },
                "content_filters": {
                    "description": "Bundle should include content of specified type",
                    "title": "Bundle should include content of specified type",
                    "default": [
                        "DEFAULT"
                    ],
                    "items": {
                        "description": "Support bundle content filter allowed values",
                        "enum": [
                            "ALL",
                            "DEFAULT"
                        ],
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "log_age_limit": {
                    "format": "int64",
                    "minimum": 1,
                    "type": "integer",
                    "description": "Include log files with modified times not past the age limit in days",
                    "title": "Include log files with modified times not past the age limit in days"
                }
            }
        },
        "IngressRateShaper": {
            "x-vmw-nsx-module": "QosSwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/QosBaseRateShaper"
                },
                {
                    "x-vmw-nsx-module": "QosSwitchingProfile",
                    "type": "object",
                    "properties": {
                        "average_bandwidth_mbps": {
                            "description": "Average bandwidth in Mb/s",
                            "format": "int32",
                            "default": 0,
                            "title": "Average bandwidth in Mb/s",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "peak_bandwidth_mbps": {
                            "description": "Peak bandwidth in Mb/s",
                            "format": "int32",
                            "default": 0,
                            "title": "Peak bandwidth in Mb/s",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "burst_size_bytes": {
                            "description": "Burst size in bytes",
                            "format": "int32",
                            "default": 0,
                            "title": "Burst size in bytes",
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "A shaper that specifies ingress rate properties in Mb/s",
            "title": "A shaper that specifies ingress rate properties in Mb/s"
        },
        "IPSecVPNTunnelProfile": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "encapsulation_mode": {
                            "description": "Encapsulation Mode to be used for encryption of packet. Tunnel mode protects internal routing information by encrypting IP header of original packet.",
                            "title": "Encapsulation Mode",
                            "default": "TUNNEL_MODE",
                            "enum": [
                                "TUNNEL_MODE"
                            ],
                            "readOnly": true,
                            "type": "string"
                        },
                        "transform_protocol": {
                            "description": "IPSec transform specifies IPSec security protocol.",
                            "title": "Tunnel protocol",
                            "default": "ESP",
                            "enum": [
                                "ESP"
                            ],
                            "readOnly": true,
                            "type": "string"
                        },
                        "digest_algorithms": {
                            "items": {
                                "description": "The TunnelDigestAlgorithms are used to verify message\nintegrity during IPSec VPN tunnel establishment.\nSHA1 produces 160 bits hash and SHA2_XXX produces\nXXX bit hash.\n",
                                "enum": [
                                    "SHA1",
                                    "SHA2_256",
                                    "SHA2_384",
                                    "SHA2_512"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Algorithm to be used for message digest. Default digest algorithm is implicitly covered by default encryption algorithm \"AES_GCM_128\".",
                            "title": "Algorithm for message hash"
                        },
                        "encryption_algorithms": {
                            "items": {
                                "description": "TunnelEncryption algorithms are used to ensure confidentiality\nof the messages exchanged during Tunnel negotiations. AES\nstands for Advanced Encryption Standards. AES_128 uses 128-bit\nkeys whereas AES_256 uses 256-bit keys for encryption and\ndecryption. AES_GCM stands for Advanced Encryption Standard(AES)\nin Galois/Counter Mode (GCM) and is used to provide both\nconfidentiality and data origin authentication.\nNO_ENCRYPTION_AUTH_AES_GMAC_* enables authentication on input\ndata without encyption. Digest algorithm should be empty for this\noption.\n",
                                "enum": [
                                    "AES_128",
                                    "AES_256",
                                    "AES_GCM_128",
                                    "AES_GCM_192",
                                    "AES_GCM_256",
                                    "NO_ENCRYPTION_AUTH_AES_GMAC_128",
                                    "NO_ENCRYPTION_AUTH_AES_GMAC_192",
                                    "NO_ENCRYPTION_AUTH_AES_GMAC_256",
                                    "NO_ENCRYPTION"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Encryption algorithm to encrypt/decrypt the messages exchanged between IPSec VPN initiator and responder during tunnel negotiation. Default is AES_GCM_128.",
                            "title": "Encryption algorithm to use in tunnel establishement"
                        },
                        "enable_perfect_forward_secrecy": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, perfect forward secrecy (PFS) is enabled.",
                            "title": "Enable perfect forward secrecy"
                        },
                        "dh_groups": {
                            "items": {
                                "description": "Diffie-Hellman groups represent algorithm used to derive shared\nkeys between IPSec VPN initiator and responder over an\nunsecured network.\nGROUP2 uses 1024-bit Modular Exponentiation (MODP) group.\nGROUP5 uses 1536-bit MODP group.\nGROUP14 uses 2048-bit MODP group.\nGROUP15 uses 3072-bit MODP group.\nGROUP16 uses 4096-bit MODP group.\n",
                                "enum": [
                                    "GROUP2",
                                    "GROUP5",
                                    "GROUP14",
                                    "GROUP15",
                                    "GROUP16"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.",
                            "title": "DH group"
                        },
                        "df_policy": {
                            "default": "COPY",
                            "enum": [
                                "COPY",
                                "CLEAR"
                            ],
                            "type": "string",
                            "description": "Defragmentation policy helps to handle defragmentation bit present in the inner packet. COPY copies the defragmentation bit from the inner IP packet into the outer packet. CLEAR ignores the defragmentation bit present in the inner packet.",
                            "title": "Policy for handling defragmentation bit"
                        },
                        "sa_life_time": {
                            "description": "SA life time specifies the expiry time of security\nassociation. Default is 3600 seconds.\n",
                            "title": "Security association (SA) life time",
                            "default": 3600,
                            "format": "int64",
                            "maximum": 31536000,
                            "minimum": 900,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "IPSec VPN tunnel profile is a reusable profile that captures phase two negotiation parameters and tunnel properties. Any changes affects all IPSec VPN sessions consuming this profile.",
            "title": "IPSec VPN tunnel profile"
        },
        "RouteBasedIPSecVPNSession": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/IPSecVPNSession"
                },
                {
                    "required": [
                        "tunnel_ports"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "tunnel_ports": {
                            "description": "IP Tunnel ports.",
                            "title": "IP Tunnel ports",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/TunnelPortConfig"
                            },
                            "maxItems": 1,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "A Route Based VPN is more flexible, more powerful and recommended over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be configured statically or can be learned through BGP. A route based VPN is must for establishing redundant VPN session to remote site.",
            "title": "Route based VPN session"
        },
        "PacketTypeAndCounter": {
            "x-vmw-nsx-module": "AggSvcL2Types",
            "required": [
                "counter",
                "packet_type"
            ],
            "type": "object",
            "properties": {
                "counter": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of packets.",
                    "title": "The number of packets."
                },
                "packet_type": {
                    "type": "string",
                    "description": "The type of the packets",
                    "title": "The type of the packets"
                }
            }
        },
        "WidgetItem": {
            "description": "Represents a reference to a widget that is held by a container or a multi-widget or a View.",
            "title": "Widget held by MultiWidgetConfiguration or Container or a View",
            "required": [
                "widget_id"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "widget_id": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "Id of the widget configuration that is held by a multi-widget or a container or a view.",
                    "title": "Id of the widget configuration"
                },
                "weight": {
                    "default": 10000,
                    "format": "int32",
                    "type": "integer",
                    "description": "Determines placement of widget or container relative to other widgets and containers. The lower the weight, the higher it is in the placement order.",
                    "title": "Weightage or placement of the widget or container"
                },
                "label": {
                    "title": "Label of the the report",
                    "description": "Applicable for 'DonutConfiguration' and 'StatsConfiguration' reports only. If label is not specified, then it defaults to the label of the donut or stats report.",
                    "$ref": "#/definitions/Label"
                }
            }
        },
        "RemoteServerFingerprintRequest": {
            "description": "Remote server",
            "title": "Remote server",
            "required": [
                "server"
            ],
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "properties": {
                "port": {
                    "description": "Server port",
                    "title": "Server port",
                    "default": 22,
                    "format": "int64",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                },
                "server": {
                    "format": "hostname-or-ip",
                    "type": "string",
                    "description": "Remote server hostname or IP address",
                    "title": "Remote server hostname or IP address"
                }
            }
        },
        "LogicalDhcpServerListResult": {
            "x-vmw-nsx-module": "Dhcp",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Dhcp",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalDhcpServer"
                            },
                            "type": "array",
                            "description": "paginated list of dhcp servers",
                            "title": "paginated list of dhcp servers"
                        }
                    }
                }
            ]
        },
        "IPv4DhcpServer": {
            "x-vmw-nsx-module": "Dhcp",
            "required": [
                "dhcp_server_ip"
            ],
            "type": "object",
            "properties": {
                "dhcp_server_ip": {
                    "description": "dhcp server ip in cidr format",
                    "format": "ipv4-cidr-block",
                    "type": "string"
                },
                "options": {
                    "title": "dhcp options",
                    "description": "Defines the default options for all ip-pools and static-bindings of this server.\nThese options will be ignored if options are defined for ip-pools or static-bindings.\n",
                    "$ref": "#/definitions/DhcpOptions"
                },
                "dns_nameservers": {
                    "description": "dns ips",
                    "title": "dns ips",
                    "minItems": 0,
                    "items": {
                        "description": "IPv4 address",
                        "format": "ipv4",
                        "type": "string"
                    },
                    "maxItems": 2,
                    "type": "array"
                },
                "domain_name": {
                    "format": "hostname",
                    "type": "string",
                    "description": "domain name",
                    "title": "domain name"
                },
                "gateway_ip": {
                    "description": "gateway ip",
                    "format": "ipv4",
                    "type": "string"
                }
            }
        },
        "PrincipalIdentityList": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "CertificateManager",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/PrincipalIdentity"
                            },
                            "readOnly": false,
                            "type": "array",
                            "description": "PrincipalIdentity list"
                        }
                    }
                }
            ],
            "description": "PrincipalIdentity query result",
            "title": "PrincipalIdentity query result"
        },
        "AdvanceClusterRestoreInput": {
            "x-vmw-nsx-module": "ClusterRestore",
            "required": [
                "resources"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Unique id of an instruction (as returned by the GET /restore/status\ncall) for which input is to be provided\n",
                    "title": "Unique id of an instruction (as returned by the GET /restore/status\ncall) for which input is to be provided\n"
                },
                "resources": {
                    "items": {
                        "$ref": "#/definitions/SelectableResourceReference"
                    },
                    "type": "array",
                    "description": "List of resources for which the instruction is applicable.",
                    "title": "List of resources for which the instruction is applicable."
                }
            }
        },
        "MigrationBundleInfo": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "description": "Information about the migration bundle",
            "properties": {
                "url": {
                    "readOnly": true,
                    "type": "string",
                    "description": "URL for uploading migration bundle",
                    "title": "URL of the migration bundle"
                },
                "bundle_size": {
                    "readOnly": true,
                    "type": "string",
                    "description": "size of migration bundle",
                    "title": "size of migration bundle"
                }
            },
            "title": "Information about migration bundle"
        },
        "CertificateList": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "CertificateManager",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/Certificate"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Certificate list"
                        }
                    }
                }
            ],
            "description": "Certificate queries result",
            "title": "Certificate queries result"
        },
        "RevisionedResource": {
            "x-vmw-nsx-module": "Common",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Common",
                    "type": "object",
                    "properties": {
                        "_revision": {
                            "format": "int32",
                            "type": "integer",
                            "description": "The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.",
                            "title": "Generation of this resource config"
                        }
                    }
                }
            ],
            "description": "A base class for types that track revisions",
            "title": "A base class for types that track revisions"
        },
        "CpuCoreConfigForEnhancedNetworkingStackSwitch": {
            "description": "Non Uniform Memory Access (NUMA) nodes and Logical cpu cores (Lcores) per NUMA node configuration for Enhanced Networking Stack enabled HostSwitch.",
            "title": "Enhanced Networking Stack CPU configuration",
            "required": [
                "num_lcores",
                "numa_node_index"
            ],
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "properties": {
                "num_lcores": {
                    "description": "Number of Logical cpu cores (Lcores) to be placed on a specified NUMA node",
                    "format": "int32",
                    "title": "Number of Logical cpu cores (Lcores) to be placed on a specified NUMA node",
                    "readOnly": false,
                    "minimum": 1,
                    "type": "integer"
                },
                "numa_node_index": {
                    "description": "Unique index of the Non Uniform Memory Access (NUMA) node",
                    "format": "int32",
                    "title": "Unique index of the Non Uniform Memory Access (NUMA) node",
                    "readOnly": false,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "LbHttpRequestHeaderRewriteAction": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleAction"
                },
                {
                    "required": [
                        "header_value",
                        "header_name"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "header_value": {
                            "type": "string",
                            "description": "Value of HTTP request header",
                            "title": "Value of HTTP request header"
                        },
                        "header_name": {
                            "type": "string",
                            "description": "Name of HTTP request header",
                            "title": "Name of HTTP request header"
                        }
                    }
                }
            ],
            "description": "This action is used to rewrite header fields of matched HTTP request\nmessages to specified new values. One action can be used to rewrite one\nheader field. To rewrite multiple header fields, multiple actions must be\ndefined.\nCaptured variables and built-in variables can be used in the header_value\nfield, header_name field does not support variables.\n",
            "title": "Action to rewrite header fields of HTTP request messages."
        },
        "MsgClientInfo": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "Information about a messaging client",
            "properties": {
                "software_version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Software version of the node."
                },
                "account_name": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Account name for the messaging client. Identifies the client on the management plane message bus."
                },
                "certificate": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Messaging client's certificate. Used to authenticate to the control plane messaging endpoint."
                },
                "shared_secret": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Messaging client's secret. Used to authenticate to the management plane messaging broker."
                }
            },
            "title": "Information about a messaging client"
        },
        "StandardHostSwitchSpec": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/HostSwitchSpec"
                },
                {
                    "required": [
                        "host_switches"
                    ],
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "host_switches": {
                            "description": "Transport Node host switches",
                            "title": "Transport Node host switches",
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/StandardHostSwitch"
                            },
                            "maxItems": 5,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "Standard host switch specification is used for NSX configured transport node.",
            "title": "Specification of transport node standard host switch"
        },
        "ErrorResolverUserMetadata": {
            "x-vmw-nsx-module": "ErrorResolver",
            "type": "object",
            "description": "User supplied metadata needed for resolving errors",
            "properties": {
                "user_input_list": {
                    "items": {
                        "$ref": "#/definitions/ErrorResolverUserInputData"
                    },
                    "type": "array",
                    "description": "List of user supplied input data.",
                    "title": "List of user supplied input data."
                }
            }
        },
        "ListResult": {
            "x-vmw-nsx-module": "Common",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Common",
                    "type": "object",
                    "properties": {
                        "cursor": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Opaque cursor to be used for getting next page of records (supplied by current result page)",
                            "title": "Opaque cursor to be used for getting next page of records (supplied by current result page)"
                        },
                        "sort_ascending": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "If true, results are sorted in ascending order",
                            "title": "If true, results are sorted in ascending order"
                        },
                        "sort_by": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Field by which records are sorted",
                            "title": "Field by which records are sorted"
                        },
                        "result_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Count of results found (across all pages), set only on first page",
                            "title": "Count of results found (across all pages), set only on first page"
                        }
                    }
                }
            ],
            "description": "Base class for list results from collections",
            "title": "Base class for list results from collections"
        },
        "ReorderRequest": {
            "x-vmw-nsx-module": "Upgrade",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "is_before": {
                    "default": true,
                    "readOnly": false,
                    "type": "boolean",
                    "description": "flag indicating whether the upgrade unit group/upgrade unit is to be placed before or after the specified upgrade unit group/upgrade unit",
                    "title": "flag indicating whether the upgrade unit group/upgrade unit is to be placed before or after the specified upgrade unit group/upgrade unit"
                },
                "id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "id of the upgrade unit group/upgrade unit before/after which the upgrade unit group/upgrade unit is to be placed",
                    "title": "id of the upgrade unit group/upgrade unit before/after which the upgrade unit group/upgrade unit is to be placed"
                }
            }
        },
        "FirewallStatusListResult": {
            "x-vmw-nsx-module": "FirewallStatus",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "FirewallStatus",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/FirewallStatus"
                            },
                            "readOnly": true,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "List of firewall statuses for a context or all context",
            "title": "Firewall Statuses"
        },
        "DhcpIpPoolUsage": {
            "x-vmw-nsx-module": "AggSvcDhcp",
            "required": [
                "allocated_percentage",
                "pool_size",
                "allocated_number",
                "dhcp_ip_pool_id"
            ],
            "type": "object",
            "properties": {
                "allocated_percentage": {
                    "format": "int64",
                    "type": "integer",
                    "description": "allocated percentage. COULD BE INACCURATE, REFERENCE ONLY.",
                    "title": "allocated percentage. COULD BE INACCURATE, REFERENCE ONLY."
                },
                "pool_size": {
                    "format": "int64",
                    "type": "integer",
                    "description": "pool size",
                    "title": "pool size"
                },
                "allocated_number": {
                    "format": "int64",
                    "type": "integer",
                    "description": "allocated number. COULD BE INACCURATE, REFERENCE ONLY.",
                    "title": "allocated number. COULD BE INACCURATE, REFERENCE ONLY."
                },
                "dhcp_ip_pool_id": {
                    "type": "string",
                    "description": "uuid of dhcp ip pool",
                    "title": "uuid of dhcp ip pool"
                }
            }
        },
        "L2VPNSessionRemoteMacsForLS": {
            "x-vmw-nsx-module": "L2VPNStatistics",
            "type": "object",
            "description": "Remote MAC addresses for logical switch.",
            "properties": {
                "remote_mac_addresses": {
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Mac addresses.",
                    "title": "Mac addresses"
                },
                "logical_switch": {
                    "readOnly": true,
                    "title": "Logical switch",
                    "description": "Logical switch.",
                    "$ref": "#/definitions/ResourceReference"
                }
            },
            "title": "Remote MAC addresses for logical switch"
        },
        "IPSecVPNIKESessionStatus": {
            "x-vmw-nsx-module": "VPNStatistics",
            "type": "object",
            "description": "Status for IPSec VPN IKE session UP, DOWN, NEGOTIATING and fail reason if IKE session is down.",
            "properties": {
                "fail_reason": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Reason for failure.",
                    "title": "Fail reason"
                },
                "ike_session_state": {
                    "readOnly": true,
                    "enum": [
                        "UP",
                        "DOWN",
                        "NEGOTIATING"
                    ],
                    "type": "string",
                    "description": "IKE session service status UP, DOWN and NEGOTIATING.",
                    "title": "IKE session state"
                }
            },
            "title": "IKE session status"
        },
        "NSGroupListResult": {
            "x-vmw-nsx-module": "NSGroup",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "NSGroup",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NSGroup"
                            },
                            "type": "array",
                            "description": "NSGroup list results",
                            "title": "NSGroup list results"
                        }
                    }
                }
            ],
            "description": "Paged Collection of NSGroups",
            "title": "Paged Collection of NSGroups"
        },
        "HostUpgradeStatus": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ComponentUpgradeStatus"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "type": "object"
                }
            ],
            "description": "Status of host upgrade",
            "title": "Status of host upgrade"
        },
        "AttachmentContext": {
            "discriminator": "resource_type",
            "x-vmw-nsx-module": "LogicalPort",
            "required": [
                "resource_type"
            ],
            "type": "object",
            "properties": {
                "allocate_addresses": {
                    "enum": [
                        "IpPool",
                        "MacPool",
                        "Both",
                        "None"
                    ],
                    "type": "string",
                    "description": "A flag to indicate whether to allocate addresses from allocation\n    pools bound to the parent logical switch.\n",
                    "title": "A flag to indicate whether to allocate addresses from allocation\n    pools bound to the parent logical switch.\n"
                },
                "resource_type": {
                    "type": "string",
                    "description": "Used to identify which concrete class it is",
                    "title": "Used to identify which concrete class it is"
                }
            }
        },
        "InstanceRuntimeListResult": {
            "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/InstanceRuntime"
                            },
                            "type": "array",
                            "description": "Array of existing InstanceRuntimes in database\n",
                            "title": "Results"
                        }
                    }
                }
            ],
            "description": "Result of List of InstanceRuntimes",
            "title": "InstanceRuntime list result"
        },
        "ComputeCollectionTransportNodeTemplateState": {
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "description": "Transport node state per compute collection",
            "properties": {
                "compute_collection_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Associated compute collection id",
                    "title": "Associated compute collection id"
                },
                "template_states": {
                    "items": {
                        "$ref": "#/definitions/TransportNodeTemplateState"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Transport node template states in compute collection",
                    "title": "Transport node template states in compute collection"
                }
            },
            "title": "Transport node state per compute collection"
        },
        "VIPSubnet": {
            "x-vmw-nsx-module": "LogicalRouter",
            "required": [
                "prefix_length",
                "active_vip_addresses"
            ],
            "type": "object",
            "properties": {
                "prefix_length": {
                    "description": "Subnet Prefix Length",
                    "format": "int64",
                    "title": "Subnet Prefix Length",
                    "maximum": 31,
                    "minimum": 1,
                    "type": "integer"
                },
                "active_vip_addresses": {
                    "description": "Array of IP address subnets which will be used as floating IP addresses. | These IPs will move and will be owned by Active node.",
                    "title": "IPv4 Addresses which will be owned by uplink on active node.",
                    "minItems": 1,
                    "items": {
                        "description": "IPv4 address",
                        "format": "ipv4",
                        "type": "string"
                    },
                    "maxItems": 1,
                    "type": "array"
                }
            }
        },
        "TransportZoneStatusListResult": {
            "x-vmw-nsx-module": "TransportZone",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "TransportZone",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/TransportZoneStatus"
                            },
                            "type": "array",
                            "description": "Transport Zone Runtime Status Info Results",
                            "title": "Transport Zone Runtime Status Info Results"
                        }
                    }
                }
            ],
            "description": "Transport zone runtime status queries result",
            "title": "Transport zone runtime status queries result"
        },
        "AppInfoListResult": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/AppInfo"
                            },
                            "type": "array",
                            "description": "Application details corresponding to the App Profile",
                            "title": "Application details corresponding to the App Profile"
                        }
                    }
                }
            ],
            "description": "AppInfo Sessions list results",
            "title": "AppInfo Sessions list results"
        },
        "AllocationIpAddress": {
            "x-vmw-nsx-module": "Ipam",
            "description": "Allocation parameters for the IP address (e.g. specific IP address) can be specified. Tags, display_name and description attributes are not supported in this release.",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Ipam",
                    "type": "object",
                    "properties": {
                        "allocation_id": {
                            "description": "Address that is allocated from pool",
                            "format": "ip",
                            "readOnly": true,
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "CurrentBackupOperationStatus": {
            "description": "Current backup operation status",
            "title": "Current backup operation status",
            "required": [
                "operation_type"
            ],
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "properties": {
                "current_step": {
                    "enum": [
                        "BACKUP_CREATING_CLUSTER_BACKUP",
                        "BACKUP_CREATING_NODE_BACKUP"
                    ],
                    "type": "string",
                    "description": "Current step of operation",
                    "title": "Current step of operation"
                },
                "backup_id": {
                    "type": "string",
                    "description": "Unique identifier of current backup",
                    "title": "Unique identifier of current backup"
                },
                "current_step_message": {
                    "type": "string",
                    "description": "Additional human-readable status information about current step",
                    "title": "Additional human-readable status information about current step"
                },
                "end_time": {
                    "type": "integer",
                    "description": "Time when operation is expected to end",
                    "format": "int64"
                },
                "operation_type": {
                    "enum": [
                        "NONE",
                        "BACKUP"
                    ],
                    "type": "string",
                    "description": "Type of operation that is in progress. Returns none if no operation is in progress, in which case\nnone of the other fields will be set.\n",
                    "title": "Type of operation that is in progress. Returns none if no operation is in progress, in which case\nnone of the other fields will be set.\n"
                },
                "start_time": {
                    "type": "integer",
                    "description": "Time when operation was started",
                    "format": "int64"
                }
            }
        },
        "TelemetryAgreement": {
            "x-vmw-nsx-module": "TelemetryConfig",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "TelemetryConfig",
                    "required": [
                        "telemetry_agreement_displayed"
                    ],
                    "type": "object",
                    "properties": {
                        "telemetry_agreement_displayed": {
                            "type": "boolean",
                            "description": "Determine if telemetry agreement has been displayed. If false,\nthe agreement text will be displayed at login time.\n",
                            "title": "Flag to indicate if telemetry agreement has been displayed"
                        }
                    }
                }
            ]
        },
        "StaticHopBfdPeerListResult": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/StaticHopBfdPeer"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "static hop BFD peer list results",
                            "title": "static hop BFD peer list results"
                        }
                    }
                }
            ]
        },
        "SshKeyPropertiesListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/SshKeyProperties"
                            },
                            "type": "array",
                            "description": "SSH key properties query results",
                            "title": "SSH key properties query results"
                        }
                    }
                }
            ],
            "description": "SSH key properties query results",
            "title": "SSH key properties query results"
        },
        "UpgradeUnitAggregateInfo": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "type": "object",
                    "properties": {
                        "status": {
                            "readOnly": true,
                            "enum": [
                                "SUCCESS",
                                "FAILED",
                                "IN_PROGRESS",
                                "NOT_STARTED",
                                "PAUSED"
                            ],
                            "type": "string",
                            "description": "Status of upgrade unit",
                            "title": "Status of upgrade unit"
                        },
                        "errors": {
                            "items": {
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of errors occurred during upgrade of this upgrade unit",
                            "title": "List of errors occurred during upgrade of this upgrade unit"
                        },
                        "group": {
                            "readOnly": true,
                            "title": "Info of the group to which this upgrade unit belongs",
                            "description": "Info of the group to which this upgrade unit belongs",
                            "$ref": "#/definitions/UpgradeUnitGroupInfo"
                        },
                        "display_name": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Name of the upgrade unit",
                            "title": "Name of the upgrade unit"
                        },
                        "warnings": {
                            "items": {
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of warnings indicating issues with the upgrade unit that may result in upgrade failure",
                            "title": "List of warnings indicating issues with the upgrade unit that may result in upgrade failure"
                        },
                        "current_version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "This is component version e.g. if upgrade unit is of type edge, then this is edge version.",
                            "title": "Current version of upgrade unit"
                        },
                        "percent_complete": {
                            "readOnly": true,
                            "type": "number",
                            "description": "Indicator of upgrade progress in percentage",
                            "title": "Indicator of upgrade progress in percentage"
                        },
                        "type": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Upgrade unit type",
                            "title": "Upgrade unit type"
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Identifier of the upgrade unit",
                            "title": "Identifier of the upgrade unit"
                        },
                        "metadata": {
                            "items": {
                                "$ref": "#/definitions/KeyValuePair"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Metadata about upgrade unit",
                            "title": "Metadata about upgrade unit"
                        }
                    }
                }
            ]
        },
        "VirtualNetworkInterfaceListResult": {
            "x-vmw-nsx-module": "Inventory",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Inventory",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/VirtualNetworkInterface"
                            },
                            "type": "array",
                            "description": "VirtualNetworkInterface list results",
                            "title": "VirtualNetworkInterface list results"
                        }
                    }
                }
            ]
        },
        "DSRule": {
            "x-vmw-nsx-module": "DistributedServices",
            "allOf": [
                {
                    "$ref": "#/definitions/EmbeddedResource"
                },
                {
                    "x-vmw-nsx-module": "DistributedServices",
                    "required": [
                        "action"
                    ],
                    "type": "object",
                    "properties": {
                        "is_default": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "Flag to indicate whether rule is default.",
                            "title": "Default rule"
                        },
                        "direction": {
                            "description": "Rule direction in case of stateless distributed service rules. This will only considered if section level parameter is set to stateless. Default to IN_OUT if not specified.",
                            "title": "Rule direction",
                            "default": "IN_OUT",
                            "enum": [
                                "IN",
                                "OUT",
                                "IN_OUT"
                            ],
                            "readOnly": false,
                            "type": "string"
                        },
                        "rule_tag": {
                            "readOnly": false,
                            "maxLength": 32,
                            "type": "string",
                            "description": "User level field which will be printed in CLI and packet logs.",
                            "title": "Tag"
                        },
                        "ip_protocol": {
                            "description": "Type of IP packet that should be matched while enforcing the rule.",
                            "title": "IPv4 vs IPv6 packet type",
                            "default": "IPV4_IPV6",
                            "enum": [
                                "IPV4",
                                "IPV6",
                                "IPV4_IPV6"
                            ],
                            "readOnly": false,
                            "type": "string"
                        },
                        "notes": {
                            "readOnly": false,
                            "maxLength": 2048,
                            "type": "string",
                            "description": "User notes specific to the rule.",
                            "title": "Notes"
                        },
                        "applied_tos": {
                            "description": "List of object where rule will be enforced. The section level field overrides this one. Null will be treated as any.",
                            "title": "AppliedTo List",
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        },
                        "logged": {
                            "default": false,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Flag to enable packet logging. Default is disabled.",
                            "title": "Enable logging flag"
                        },
                        "disabled": {
                            "default": false,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Flag to disable rule. Disabled will only be persisted but never provisioned/realized.",
                            "title": "Rule enable/disable flag"
                        },
                        "sources": {
                            "description": "List of sources. Null will be treated as any.",
                            "title": "Source List",
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        },
                        "services": {
                            "description": "List of the services. Null will be treated as any.",
                            "title": "Service List",
                            "items": {
                                "$ref": "#/definitions/DSService"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        },
                        "action": {
                            "readOnly": false,
                            "enum": [
                                "ALLOW",
                                "DROP",
                                "REJECT",
                                "REDIRECT",
                                "DO_NOT_REDIRECT"
                            ],
                            "type": "string",
                            "description": "Action enforced on the packets which matches the distributed service rule. Currently DS Layer supports below actions. ALLOW           - Forward any packet when a rule with this action gets a match (Used by Firewall). DROP            - Drop any packet when a rule with this action gets a match. Packets won't go further(Used by Firewall). REJECT          - Terminate TCP connection by sending TCP reset for a packet when a rule with this action gets a match (Used by Firewall). REDIRECT        - Redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service Insertion). DO_NOT_REDIRECT - Do not redirect any packet to a partner appliance when a rule with this action gets a match (Used by Service Insertion).",
                            "title": "Action"
                        },
                        "sources_excluded": {
                            "default": false,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Negation of the source.",
                            "title": "Negation of source"
                        },
                        "destinations_excluded": {
                            "default": false,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Negation of the destination.",
                            "title": "Negation of destination"
                        },
                        "destinations": {
                            "description": "List of the destinations. Null will be treated as any.",
                            "title": "Destination List",
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "TraceflowObservationDropped": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/TraceflowObservation"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "reason": {
                            "readOnly": true,
                            "enum": [
                                "ARP_FAIL",
                                "BFD",
                                "DHCP",
                                "FW_RULE",
                                "GENEVE",
                                "GRE",
                                "IFACE",
                                "IP",
                                "IP_REASS",
                                "IPSEC",
                                "IPSEC_VTI",
                                "L2VPN",
                                "L4PORT",
                                "LB",
                                "LROUTER",
                                "LSERVICE",
                                "LSWITCH",
                                "MD_PROXY",
                                "NAT",
                                "NEIGH",
                                "NO_ROUTE",
                                "SERVICE_INSERT",
                                "TTL_ZERO",
                                "TUNNEL",
                                "VXLAN",
                                "VXSTT",
                                "UNKNOWN"
                            ],
                            "type": "string",
                            "description": "The reason traceflow packet was dropped",
                            "title": "The reason traceflow packet was dropped"
                        },
                        "lport_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The name of the logical port at which the traceflow packet was dropped",
                            "title": "The name of the logical port at which the traceflow packet was dropped"
                        },
                        "acl_rule_id": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "The id of the acl rule that was applied to drop the traceflow packet",
                            "title": "The id of the acl rule that was applied to drop the traceflow packet"
                        },
                        "lport_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the logical port at which the traceflow packet was dropped",
                            "title": "The id of the logical port at which the traceflow packet was dropped"
                        }
                    }
                }
            ]
        },
        "LogicalPortOperationalStatus": {
            "x-vmw-nsx-module": "AggSvcLogicalPort",
            "required": [
                "status"
            ],
            "type": "object",
            "properties": {
                "logical_port_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The id of the logical port",
                    "title": "The id of the logical port"
                },
                "status": {
                    "enum": [
                        "UP",
                        "DOWN",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "The Operational status of the logical port",
                    "title": "The Operational status of the logical port"
                },
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                }
            }
        },
        "MacTableCsvRecord": {
            "x-vmw-nsx-module": "AggSvcLogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvRecord"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                    "required": [
                        "mac_address"
                    ],
                    "type": "object",
                    "properties": {
                        "vtep_mac_address": {
                            "type": "string",
                            "description": "The virtual tunnel endpoint MAC address",
                            "title": "The virtual tunnel endpoint MAC address"
                        },
                        "vtep_ip": {
                            "description": "The virtual tunnel endpoint IP address",
                            "format": "ip",
                            "type": "string"
                        },
                        "mac_address": {
                            "type": "string",
                            "description": "The MAC address",
                            "title": "The MAC address"
                        }
                    }
                }
            ]
        },
        "MigrationUnitTypeStats": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "node_with_issues_count": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of nodes with issues that may cause migration failure",
                    "title": "Number of nodes with issues that may cause migration failure"
                },
                "node_count": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of nodes",
                    "title": "Number of nodes"
                },
                "version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Version of the migration unit",
                    "title": "Version of the migration unit"
                },
                "type": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Type of migration unit",
                    "title": "Type of migration unit"
                }
            }
        },
        "RuntimeInterfaceOperationalStatus": {
            "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
            "required": [
                "status"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "enum": [
                        "UP",
                        "DOWN",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "The Operational status of the interface",
                    "title": "The Operational status of the interface"
                },
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "interface_index": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Index of the interface",
                    "title": "Index of the interface"
                }
            }
        },
        "TraceflowObservationDroppedLogical": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/TraceflowObservationDropped"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "component_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the component that dropped the traceflow packet.",
                            "title": "The id of the component that dropped the traceflow packet."
                        }
                    }
                }
            ]
        },
        "RedistributionConfig": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "type": "object",
                    "properties": {
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "bgp_enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to enable redistribution for BGP as destinationProtocol",
                            "title": "Flag to enable redistribution for BGP as destinationProtocol"
                        }
                    }
                }
            ]
        },
        "UpgradeUnitGroupListResult": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/UpgradeUnitGroup"
                            },
                            "type": "array",
                            "description": "Paged Collection of Upgrade unit groups",
                            "title": "Paged Collection of Upgrade unit groups"
                        }
                    }
                }
            ]
        },
        "IntervalBackupSchedule": {
            "x-vmw-nsx-module": "BackupConfiguration",
            "allOf": [
                {
                    "$ref": "#/definitions/BackupSchedule"
                },
                {
                    "x-vmw-nsx-module": "BackupConfiguration",
                    "type": "object",
                    "properties": {
                        "seconds_between_backups": {
                            "description": "Time interval in seconds between two consecutive automated backups",
                            "title": "Time interval in seconds between two consecutive automated backups",
                            "default": 3600,
                            "format": "int64",
                            "maximum": 86400,
                            "minimum": 300,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "Schedule to specify the interval time at which automated backups need to be taken",
            "title": "Schedule to specify the interval time at which automated backups need to be taken"
        },
        "LbHttpRejectAction": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleAction"
                },
                {
                    "required": [
                        "reply_status"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "reply_status": {
                            "type": "string",
                            "description": "HTTP response status code",
                            "title": "HTTP response status code"
                        },
                        "reply_message": {
                            "type": "string",
                            "description": "Response message",
                            "title": "Response message"
                        }
                    }
                }
            ],
            "description": "This action is used to reject HTTP request messages. The specified\nreply_status value is used as the status code for the corresponding HTTP\nresponse message which is sent back to client (Normally a browser)\nindicating the reason it was rejected. Reference official HTTP status code\nlist for your specific HTTP version to set the reply_status properly.\nLbHttpRejectAction does not support variables.\n",
            "title": "Action to reject HTTP request messages"
        },
        "DSSectionQueryParameters": {
            "x-vmw-nsx-module": "DistributedServices",
            "type": "object",
            "description": "Section query parameters",
            "properties": {
                "cascade": {
                    "default": false,
                    "type": "boolean",
                    "description": "Flag to cascade delete of this object to all it's child objects.",
                    "title": "Flag to cascade delete of this object to all it's child objects."
                }
            },
            "title": "Section query parameters"
        },
        "PreconfiguredEndpoint": {
            "description": "Tunnel endpoint configuration of preconfigured host switch",
            "title": "Tunnel endpoint configuration of preconfigured host switch",
            "required": [
                "device_name"
            ],
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "properties": {
                "device_name": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Name of the virtual tunnel endpoint",
                    "title": "Name of the virtual tunnel endpoint"
                }
            }
        },
        "DhcpLeasePerIP": {
            "x-vmw-nsx-module": "AggSvcDhcp",
            "required": [
                "start_time",
                "ip_address",
                "mac_address"
            ],
            "type": "object",
            "properties": {
                "subnet": {
                    "type": "string",
                    "description": "subnet of client network",
                    "title": "subnet of client network"
                },
                "lease_time": {
                    "type": "string",
                    "description": "lease time of the ip address, in seconds",
                    "title": "lease time of the ip address, in seconds"
                },
                "mac_address": {
                    "type": "string",
                    "description": "mac address of client",
                    "title": "mac address of client"
                },
                "expire_time": {
                    "type": "string",
                    "description": "expire time of the lease",
                    "title": "expire time of the lease"
                },
                "start_time": {
                    "type": "string",
                    "description": "start time of lease",
                    "title": "start time of lease"
                },
                "ip_address": {
                    "type": "string",
                    "description": "ip address of client",
                    "title": "ip address of client"
                }
            }
        },
        "LbVirtualServerListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbVirtualServer"
                            },
                            "type": "array",
                            "description": "paginated list of virtual servers",
                            "title": "paginated list of virtual servers"
                        }
                    }
                }
            ]
        },
        "BinaryPacketData": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/PacketData"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "payload": {
                            "maxLength": 1336,
                            "type": "string",
                            "description": "Up to 1000 bytes of payload may be supplied (with a base64-encoded length of 1336 bytes.) Additional bytes of traceflow metadata will be appended to the payload. The payload must contain all headers (Ethernet, IP, etc). Note that VLAN is not supported in the logical space. Hence, payload must not contain 802.1Q headers.",
                            "title": "RFC3548 compatible base64 encoded full payload"
                        }
                    }
                }
            ]
        },
        "ClusterProfileListResult": {
            "x-vmw-nsx-module": "ClusterProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ClusterProfile",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ClusterProfile"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Cluster Profile Results",
                            "title": "Cluster Profile Results"
                        }
                    }
                }
            ],
            "description": "Cluster Profile queries result",
            "title": "Cluster Profile queries result"
        },
        "UsernamePasswordLoginCredential": {
            "x-vmw-nsx-module": "Types",
            "allOf": [
                {
                    "$ref": "#/definitions/LoginCredential"
                },
                {
                    "x-vmw-nsx-module": "Types",
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "The username for login",
                            "title": "The username for login"
                        },
                        "password": {
                            "type": "string",
                            "description": "The authentication password for login",
                            "title": "The authentication password for login"
                        },
                        "thumbprint": {
                            "type": "string",
                            "description": "Thumbprint of the login server",
                            "title": "Thumbprint of the login server"
                        }
                    }
                }
            ],
            "description": "A login credential specifying a username and password",
            "title": "A login credential specifying a username and password"
        },
        "NetworkMigrationSpecTypeIdEntry": {
            "x-vmw-nsx-module": "TransportNode",
            "required": [
                "value"
            ],
            "type": "object",
            "properties": {
                "value": {
                    "readOnly": false,
                    "type": "string",
                    "description": "the id of the NetworkMigrationSpec"
                },
                "key": {
                    "description": "the type of the NetworkMigrationSpec",
                    "enum": [
                        "HostProfileNetworkMigrationSpec"
                    ],
                    "readOnly": true,
                    "type": "string"
                }
            }
        },
        "RateLimits": {
            "x-vmw-nsx-module": "SwitchSecuritySwitchingProfile",
            "type": "object",
            "description": "Enables traffic limit for incoming/outgoing broadcast and multicast packets. Use 0 to disable rate limiting for a specific traffic type",
            "properties": {
                "rx_multicast": {
                    "description": "Incoming multicast traffic limit in packets per second",
                    "title": "Incoming multicast traffic limit in packets per second",
                    "default": 0,
                    "format": "int32",
                    "readOnly": false,
                    "minimum": 0,
                    "type": "integer"
                },
                "tx_multicast": {
                    "description": "Outgoing multicast traffic limit in packets per second",
                    "title": "Outgoing multicast traffic limit in packets per second",
                    "default": 0,
                    "format": "int32",
                    "readOnly": false,
                    "minimum": 0,
                    "type": "integer"
                },
                "enabled": {
                    "default": false,
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Whether rate limiting is enabled",
                    "title": "Whether rate limiting is enabled"
                },
                "tx_broadcast": {
                    "description": "Outgoing broadcast traffic limit in packets per second",
                    "title": "Outgoing broadcast traffic limit in packets per second",
                    "default": 0,
                    "format": "int32",
                    "readOnly": false,
                    "minimum": 0,
                    "type": "integer"
                },
                "rx_broadcast": {
                    "description": "Incoming broadcast traffic limit in packets per second",
                    "title": "Incoming broadcast traffic limit in packets per second",
                    "default": 0,
                    "format": "int32",
                    "readOnly": false,
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "title": "Rate limiting configuration"
        },
        "ControllerNodeAggregateInfo": {
            "x-vmw-nsx-module": "ClusterManagement",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseNodeAggregateInfo"
                },
                {
                    "x-vmw-nsx-module": "ClusterManagement",
                    "type": "object",
                    "properties": {
                        "role_config": {
                            "readOnly": true,
                            "$ref": "#/definitions/ControllerClusterRoleConfig"
                        }
                    }
                }
            ]
        },
        "Oauth2Credentials": {
            "description": "Oauth2 Account Credentials",
            "title": "Oauth2 Account Credentials",
            "required": [
                "client_id"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "client_secret": {
                    "type": "string",
                    "description": "Client secret, that will be used for authentication in AWS environment. Can be some passphrase.",
                    "title": "Client Secret"
                },
                "client_id": {
                    "type": "string",
                    "description": "Client ID, that will be used for authentication in AWS environment,",
                    "title": "Client ID"
                }
            }
        },
        "DirectoryLdapServerListResults": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DirectoryLdapServer"
                            },
                            "type": "array",
                            "description": "List of Directory Domain Ldap Servers",
                            "maxItems": 50,
                            "title": "List of Directory Domain Ldap Servers"
                        }
                    }
                }
            ],
            "description": "List of Directory Domain LDAP servers",
            "title": "List of Directory Domain LDAP servers"
        },
        "NodeSummary": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "type": "object",
                    "properties": {
                        "node_count": {
                            "readOnly": true,
                            "format": "int32",
                            "type": "integer",
                            "description": "Number of nodes of the type and at the component version",
                            "title": "Count of nodes"
                        },
                        "type": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Node type",
                            "title": "Node type"
                        },
                        "component_version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Component version",
                            "title": "Component version"
                        }
                    }
                }
            ]
        },
        "StatusCount": {
            "x-vmw-nsx-module": "Heatmap",
            "type": "object",
            "properties": {
                "status": {
                    "enum": [
                        "UP",
                        "DOWN",
                        "DEGRADED",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "Roll-up status",
                    "title": "Roll-up status"
                },
                "degraded_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Degraded count",
                    "title": "Degraded count"
                },
                "down_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Down count",
                    "title": "Down count"
                },
                "up_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Up count",
                    "title": "Up count"
                }
            }
        },
        "SwitchSecuritySwitchingProfile": {
            "x-vmw-nsx-module": "SwitchSecuritySwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseSwitchingProfile"
                },
                {
                    "x-vmw-nsx-module": "SwitchSecuritySwitchingProfile",
                    "type": "object",
                    "properties": {
                        "rate_limits": {
                            "readOnly": false,
                            "title": "Allows configuration of rate limits for broadcast and multicast traffic",
                            "description": "Rate limiting is disabled by default",
                            "$ref": "#/definitions/RateLimits"
                        },
                        "bpdu_filter": {
                            "readOnly": false,
                            "title": "Enables or disables BPDU filtering",
                            "description": "BPDU filtering is enabled by default. A pre-defined list of MAC addresses\nare automatically excluded from BPDU filtering.\n",
                            "$ref": "#/definitions/BpduFilter"
                        },
                        "dhcp_filter": {
                            "readOnly": false,
                            "title": "Filters DHCP server and/or client traffic.",
                            "description": "DHCP server blocking is enabled and client blocking is disabled by default",
                            "$ref": "#/definitions/DhcpFilter"
                        },
                        "block_non_ip_traffic": {
                            "default": false,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "A flag to block all traffic except IP/(G)ARP/BPDU",
                            "title": "A flag to block all traffic except IP/(G)ARP/BPDU"
                        }
                    }
                }
            ]
        },
        "LbServerSslProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbSslProfile"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "session_cache_enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "SSL session caching allows SSL client and server to reuse previously\nnegotiated security parameters avoiding the expensive public key\noperation during handshake.\n",
                            "title": "session cache enable/disable falg"
                        },
                        "is_fips": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "This flag is set to true when all the ciphers and protocols are FIPS\ncompliant.\nIt is set to false when one of the ciphers or protocols are not\nFIPS compliant.\n",
                            "title": "FIPS compliance of ciphers and protocols"
                        },
                        "cipher_group_label": {
                            "description": "It is a label of cipher group which is mostly consumed by GUI.\n",
                            "enum": [
                                "BALANCED",
                                "HIGH_SECURITY",
                                "HIGH_COMPATIBILITY",
                                "CUSTOM"
                            ],
                            "type": "string"
                        },
                        "is_secure": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "This flag is set to true when all the ciphers and protocols are secure.\nIt is set to false when one of the ciphers or protocols is insecure.\n",
                            "title": "Secure/Insecure SSL profile flag"
                        },
                        "ciphers": {
                            "items": {
                                "description": "SSL cipher",
                                "enum": [
                                    "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
                                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_RSA_WITH_AES_256_CBC_SHA256",
                                    "TLS_RSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "supported SSL cipher list to client side",
                            "title": "supported SSL cipher list to client side"
                        },
                        "protocols": {
                            "items": {
                                "description": "SSL protocol",
                                "enum": [
                                    "SSL_V2",
                                    "SSL_V3",
                                    "TLS_V1",
                                    "TLS_V1_1",
                                    "TLS_V1_2"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "SSL versions TLS1.1 and TLS1.2 are supported and enabled by default.\nSSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.\n",
                            "title": "supported SSL protocol list to client side"
                        }
                    }
                }
            ]
        },
        "DhcpStatistics": {
            "x-vmw-nsx-module": "AggSvcDhcp",
            "required": [
                "errors",
                "releases",
                "informs",
                "timestamp",
                "dhcp_server_id",
                "nacks",
                "offers",
                "discovers",
                "acks",
                "declines",
                "requests"
            ],
            "type": "object",
            "properties": {
                "errors": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of DHCP errors",
                    "title": "The total number of DHCP errors"
                },
                "releases": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of DHCP RELEASE packets",
                    "title": "The total number of DHCP RELEASE packets"
                },
                "informs": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of DHCP INFORM packets",
                    "title": "The total number of DHCP INFORM packets"
                },
                "declines": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of DHCP DECLINE packets",
                    "title": "The total number of DHCP DECLINE packets"
                },
                "dhcp_server_id": {
                    "type": "string",
                    "description": "dhcp server uuid",
                    "title": "dhcp server uuid"
                },
                "nacks": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of DHCP NACK packets",
                    "title": "The total number of DHCP NACK packets"
                },
                "offers": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of DHCP OFFER packets",
                    "title": "The total number of DHCP OFFER packets"
                },
                "discovers": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of DHCP DISCOVER packets",
                    "title": "The total number of DHCP DISCOVER packets"
                },
                "acks": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of DHCP ACK packets",
                    "title": "The total number of DHCP ACK packets"
                },
                "timestamp": {
                    "type": "integer",
                    "description": "timestamp of the statistics",
                    "format": "int64"
                },
                "requests": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of DHCP REQUEST packets",
                    "title": "The total number of DHCP REQUEST packets"
                },
                "ip_pool_stats": {
                    "items": {
                        "$ref": "#/definitions/DhcpIpPoolUsage"
                    },
                    "type": "array",
                    "description": "The DHCP ip pool usage statistics",
                    "title": "The DHCP ip pool usage statistics"
                }
            }
        },
        "MigrationPlanSettings": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "pause_after_each_group": {
                    "default": false,
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Flag to indicate whether to pause the migration after migration of each group is completed",
                    "title": "Flag to indicate whether to pause the migration after migration of each group is completed"
                },
                "pause_on_error": {
                    "default": false,
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Flag to indicate whether to pause the migration plan execution when an error occurs",
                    "title": "Flag to indicate whether to pause the migration plan execution when an error occurs"
                },
                "parallel": {
                    "default": true,
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Migration Method to specify whether the migration is to be performed serially or in parallel",
                    "title": "Migration Method to specify whether the migration is to be performed serially or in parallel"
                }
            }
        },
        "AggregatedDataCounterEx": {
            "x-vmw-nsx-module": "AggSvcL2Types",
            "allOf": [
                {
                    "$ref": "#/definitions/AggregatedDataCounter"
                },
                {
                    "x-vmw-nsx-module": "AggSvcL2Types",
                    "type": "object",
                    "properties": {
                        "mac_learning": {
                            "readOnly": true,
                            "$ref": "#/definitions/MacLearningCounters"
                        },
                        "dropped_by_security_packets": {
                            "readOnly": true,
                            "$ref": "#/definitions/PacketsDroppedBySecurity"
                        }
                    }
                }
            ]
        },
        "LbSnatTranslation": {
            "discriminator": "type",
            "x-vmw-nsx-module": "LoadBalancer",
            "required": [
                "type"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "Load balancers may need to perform SNAT to ensure reverse traffic from\nthe server can be received and processed by them.\nThere are two modes:\nLbSnatAutoMap uses the load balancer interface IP and an\nephemeral port as the source IP and port of the server side connection.\nLbSnatIpPool allows user to specify one or more IP addresses\nalong with their subnet masks that should be used for SNAT while\nconnecting to any of the servers in the pool.\n",
                    "enum": [
                        "LbSnatAutoMap",
                        "LbSnatIpPool"
                    ],
                    "type": "string"
                },
                "port_overload": {
                    "description": "Both SNAT automap and SNAT IP list modes support port overloading\nwhich allows the same SNAT IP and port to be used for multiple\nbackend connections as long as the tuple (source IP, source port,\ndestination IP, destination port, IP protocol) after SNAT is\nperformed is unique.\nThe valid number is 1, 2, 4, 8, 16, 32.\n",
                    "title": "port overloading with same SNAT IP and port",
                    "default": 32,
                    "format": "int64",
                    "maximum": 32,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "TelemetryProxy": {
            "x-vmw-nsx-module": "TelemetryConfig",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "TelemetryConfig",
                    "required": [
                        "scheme",
                        "hostname",
                        "port"
                    ],
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "Specify the user name used to authenticate with the proxy server, if required.\n",
                            "title": "User name"
                        },
                        "password": {
                            "type": "string",
                            "description": "Specify the password used to authenticate with the proxy server, if required.\nA GET call on /telemetry/config returns a non-meaningful password to maintain\nsecurity. To change the password to a new value, issue a PUT call after updating\nthis field. To remove the password, issue a PUT call after emptying this field.\nTo retain a previously set password, issue a PUT call keeping the non-meaningful\nvalue obtained from the GET call.\n",
                            "title": "Password"
                        },
                        "scheme": {
                            "enum": [
                                "HTTP",
                                "HTTPS"
                            ],
                            "type": "string",
                            "description": "The scheme accepted by the proxy server. Specify one of HTTP and HTTPS.\n",
                            "title": "The scheme accepted by the proxy server"
                        },
                        "hostname": {
                            "format": "hostname-or-ip",
                            "type": "string",
                            "description": "Specify the fully qualified domain name, or ip address, of the proxy server.\n",
                            "title": "FQDN or IP address of the proxy server"
                        },
                        "port": {
                            "format": "int32",
                            "type": "integer",
                            "description": "Specify the port of the proxy server.",
                            "title": "Configured port for proxy"
                        }
                    }
                }
            ]
        },
        "RestoreConfiguration": {
            "description": "Configuration where backup files are stored for restore",
            "title": "Configuration where backup files are stored for restore",
            "required": [
                "remote_file_server"
            ],
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "properties": {
                "remote_file_server": {
                    "title": "The server from which backup files will be retrieved for restore.",
                    "description": "The server from which backup files will be retrieved for restore.",
                    "$ref": "#/definitions/RemoteFileServer"
                },
                "passphrase": {
                    "type": "string",
                    "description": "Passphrase used to encrypt backup files.",
                    "title": "Passphrase used to encrypt backup files."
                }
            }
        },
        "LogicalRouterPortListResult": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LogicalRouterPorts",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalRouterPort"
                            },
                            "type": "array",
                            "description": "Logical router port list results",
                            "title": "Logical router port list results"
                        }
                    }
                }
            ]
        },
        "SwitchingProfilesListResult": {
            "x-vmw-nsx-module": "BaseSwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "BaseSwitchingProfile",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/BaseSwitchingProfile"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Switching Profile Results",
                            "title": "Switching Profile Results"
                        }
                    }
                }
            ],
            "description": "Switching Profile queries result",
            "title": "Switching Profile queries result"
        },
        "LbVirtualServerStatisticsListResult": {
            "x-vmw-nsx-module": "AggSvcLb",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLb",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbVirtualServerStatistics"
                            },
                            "type": "array",
                            "description": "paginated statistics list of virtual servers",
                            "title": "paginated statistics list of virtual servers"
                        }
                    }
                }
            ]
        },
        "IPSecVPNTunnelTrafficStatistics": {
            "x-vmw-nsx-module": "VPNStatistics",
            "type": "object",
            "description": "IPSec VPN tunnel traffic statistics.",
            "properties": {
                "packets_sent_other_error": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of packets dropped while sending for any reason.",
                    "title": "Packets sent other error"
                },
                "packets_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of outgoing packets on outbound Security association (SA).",
                    "title": "Packets out"
                },
                "dropped_packets_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of outgoing packets dropped on outbound security association.",
                    "title": "Dropped outgoing packets"
                },
                "integrity_failures": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of packets dropped due to integrity failures.",
                    "title": "Integrity failures"
                },
                "nomatching_policy_errors": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of packets dropped because of no matching policy is available.",
                    "title": "Nomatching Policy errors"
                },
                "sa_mismatch_errors_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Totoal number of security association (SA) mismatch errors on incoming packets.",
                    "title": "Security association (SA) mismatch errors on incoming packets"
                },
                "peer_subnet": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Peer subnet to which a tunnel belongs.",
                    "title": "Peer subnet"
                },
                "replay_errors": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of packets dropped due to replay check on that Security association (SA).",
                    "title": "Replay errors"
                },
                "bytes_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of outgoing bytes on outbound Security association (SA).",
                    "title": "Bytes out"
                },
                "local_subnet": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Local subnet to which a tunnel belongs.",
                    "title": "Local subnet"
                },
                "dropped_packets_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming packets dropped on inbound security association.",
                    "title": "Dropped incoming packets"
                },
                "encryption_failures": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of packets dropped because of failure in encryption.",
                    "title": "Encryption failures"
                },
                "sa_mismatch_errors_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Totoal number of security association (SA) mismatch errors on outgoing packets.",
                    "title": "Security association (SA) mismatch errors on outgoing packets"
                },
                "tunnel_down_reason": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Gives the detailed reason about the tunnel when it is down. If tunnel is UP tunnel down reason will be empty.",
                    "title": "Tunnel down reason"
                },
                "packets_receive_other_error": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming packets dropped on inbound Security association (SA)(misc).",
                    "title": "Packets receive other error"
                },
                "bytes_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming bytes on inbound Security association (SA).",
                    "title": "Bytes in"
                },
                "decryption_failures": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of packets dropped due to decryption failures.",
                    "title": "Decryption failures"
                },
                "seq_number_overflow_error": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of packets dropped while sending due to overflow in sequence number.",
                    "title": "Sequence number overflow error"
                },
                "packets_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming packets on inbound Security association (SA).",
                    "title": "Packets in"
                },
                "tunnel_status": {
                    "readOnly": true,
                    "enum": [
                        "UP",
                        "DOWN",
                        "NEGOTIATING"
                    ],
                    "type": "string",
                    "description": "Specifies the status of tunnel. If all the SA (Security association) are negotiated then tunnels status will be UP. If negotiation fails for the SAs status will be DOWN, if SAs are in negotiating phase tunnels status will be NEGOTIATING.",
                    "title": "Tunnel Status"
                }
            },
            "title": "IPSec VPN tunnel traffic statistics"
        },
        "PortConnectionError": {
            "x-vmw-nsx-module": "PortConnection",
            "type": "object",
            "description": "Errors encountered while fetching entities in the forwarding path",
            "properties": {
                "error_summary": {
                    "type": "string"
                },
                "error_details": {
                    "type": "object"
                },
                "entity_type": {
                    "type": "string"
                }
            },
            "title": "Errors encountered while fetching entities in the forwarding path"
        },
        "LogicalRouterStatus": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "required": [
                "logical_router_id"
            ],
            "type": "object",
            "properties": {
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "logical_router_id": {
                    "type": "string",
                    "description": "The id of the logical router",
                    "title": "The id of the logical router"
                },
                "per_node_status": {
                    "description": "Per Node Status",
                    "title": "Per Node Status",
                    "items": {
                        "$ref": "#/definitions/LogicalRouterStatusPerNode"
                    },
                    "readOnly": true,
                    "additionalProperties": false,
                    "type": "array"
                }
            }
        },
        "AuthenticationScheme": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "required": [
                "scheme_name"
            ],
            "type": "object",
            "properties": {
                "scheme_name": {
                    "type": "string",
                    "description": "Authentication scheme name",
                    "title": "Authentication scheme name"
                }
            }
        },
        "DhcpProfileListResult": {
            "x-vmw-nsx-module": "Dhcp",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Dhcp",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DhcpProfile"
                            },
                            "type": "array",
                            "description": "paginated list of dhcp profiles",
                            "title": "paginated list of dhcp profiles"
                        }
                    }
                }
            ]
        },
        "HostNodeLoginCredential": {
            "x-vmw-nsx-module": "FabricNode",
            "type": "object",
            "description": "The credentials to login into the host node",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "The username of the account on the host node",
                    "title": "The username of the account on the host node"
                },
                "password": {
                    "type": "string",
                    "description": "The authentication password of the host node",
                    "title": "The authentication password of the host node"
                },
                "thumbprint": {
                    "type": "string",
                    "description": "For ESXi hosts, the thumbprint of the ESXi management service.\nFor KVM hosts, the SSH key fingerprint.\n",
                    "title": "ESXi thumbprint or SSH key fingerprint of the host node"
                }
            },
            "title": "The credentials to login into the host node"
        },
        "LogicalSwitchListResult": {
            "x-vmw-nsx-module": "LogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LogicalSwitch",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalSwitch"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Logical Switch Results",
                            "title": "Logical Switch Results"
                        }
                    }
                }
            ],
            "description": "Logical Switch queries result",
            "title": "Logical Switch queries result"
        },
        "NodeSummaryList": {
            "x-vmw-nsx-module": "Migration",
            "required": [
                "results"
            ],
            "type": "object",
            "properties": {
                "results": {
                    "items": {
                        "$ref": "#/definitions/NodeSummary"
                    },
                    "type": "array",
                    "description": "List of Node Summary",
                    "title": "List of Node Summary"
                }
            }
        },
        "UpgradeUnit": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "type": "object",
                    "properties": {
                        "group": {
                            "readOnly": true,
                            "title": "Info of the group to which this upgrade unit belongs",
                            "description": "Info of the group to which this upgrade unit belongs",
                            "$ref": "#/definitions/UpgradeUnitGroupInfo"
                        },
                        "warnings": {
                            "items": {
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of warnings indicating issues with the upgrade unit that may result in upgrade failure",
                            "title": "List of warnings indicating issues with the upgrade unit that may result in upgrade failure"
                        },
                        "current_version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "This is component version e.g. if upgrade unit is of type edge, then this is edge version.",
                            "title": "Current version of upgrade unit"
                        },
                        "metadata": {
                            "items": {
                                "$ref": "#/definitions/KeyValuePair"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Metadata about upgrade unit",
                            "title": "Metadata about upgrade unit"
                        },
                        "type": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Upgrade unit type",
                            "title": "Upgrade unit type"
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Identifier of the upgrade unit",
                            "title": "UUID of the upgrade unit"
                        },
                        "display_name": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Name of the upgrade unit",
                            "title": "Name of the upgrade unit"
                        }
                    }
                }
            ]
        },
        "TraceflowObservationForwarded": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/TraceflowObservation"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "uplink_name": {
                            "type": "string",
                            "description": "The name of the uplink the traceflow packet is forwarded on",
                            "title": "The name of the uplink the traceflow packet is forwarded on"
                        },
                        "vtep_label": {
                            "format": "int64",
                            "type": "integer",
                            "description": "The virtual tunnel endpoint label",
                            "title": "The virtual tunnel endpoint label"
                        },
                        "remote_ip_address": {
                            "description": "IP address of the destination end of the tunnel",
                            "format": "ip",
                            "type": "string"
                        },
                        "context": {
                            "format": "int64",
                            "type": "integer",
                            "description": "The 64bit tunnel context carried on the wire.",
                            "title": "The 64bit tunnel context carried on the wire."
                        },
                        "local_ip_address": {
                            "description": "IP address of the source end of the tunnel",
                            "format": "ip",
                            "type": "string"
                        },
                        "dst_transport_node_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "This field will not be always available. Use remote_ip_address when this field is not set.",
                            "title": "The id of the transport node to which the traceflow packet is forwarded"
                        },
                        "dst_transport_node_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The name of the transport node to which the traceflow packet is forwarded",
                            "title": "The name of the transport node to which the traceflow packet is forwarded"
                        }
                    }
                }
            ]
        },
        "VirtualMachineListResult": {
            "x-vmw-nsx-module": "Inventory",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Inventory",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/VirtualMachine"
                            },
                            "type": "array",
                            "description": "VirtualMachine list results",
                            "title": "VirtualMachine list results"
                        }
                    }
                }
            ]
        },
        "LogicalSwitchStatistics": {
            "x-vmw-nsx-module": "AggSvcLogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/AggregatedDataCounterEx"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "logical_switch_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the logical Switch",
                            "title": "The id of the logical Switch"
                        }
                    }
                }
            ]
        },
        "IpPoolListResult": {
            "x-vmw-nsx-module": "Ipam",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Ipam",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IpPool"
                            },
                            "type": "array",
                            "description": "IP pool list results",
                            "title": "IP pool list results"
                        }
                    }
                }
            ]
        },
        "IPSecVPNIKETrafficStatistics": {
            "x-vmw-nsx-module": "VPNStatistics",
            "type": "object",
            "description": "Traffic statistics for IPSec VPN IKE session.",
            "properties": {
                "packets_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of packets out.",
                    "title": "Packets out"
                },
                "fail_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Fail count.",
                    "title": "Fail count"
                },
                "packets_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of packets in.",
                    "title": "Packets in"
                },
                "bytes_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of bytes out.",
                    "title": "Bytes out"
                },
                "bytes_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of bytes in.",
                    "title": "Bytes in"
                }
            },
            "title": "IPSec VPN IKE session statistics"
        },
        "LbHttpResponseHeaderDeleteAction": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleAction"
                },
                {
                    "required": [
                        "header_name"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "header_name": {
                            "type": "string",
                            "description": "Name of a header field of HTTP response message",
                            "title": "Name of a header field of HTTP response message"
                        }
                    }
                }
            ],
            "description": "This action is used to delete header fields of HTTP response messages at\nHTTP_RESPONSE_REWRITE phase. One action can be used to delete allgi headers\nwith same header name. To delete headers with different header names,\nmultiple actions must be defined\n",
            "title": "Action to delete HTTP response header fields"
        },
        "NodeAggregateInfo": {
            "x-vmw-nsx-module": "NsxQuery",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "NsxQuery",
                    "type": "object",
                    "properties": {
                        "node": {
                            "readOnly": true,
                            "description": "Node attributes",
                            "$ref": "#/definitions/Node"
                        },
                        "status": {
                            "readOnly": true,
                            "description": "Node status",
                            "$ref": "#/definitions/NodeStatus"
                        }
                    }
                }
            ],
            "description": "Aggregation of desired and runtime status of fabric node",
            "title": "Aggregation of desired and runtime status of fabric node"
        },
        "SwitchingProfileTypeIdEntry": {
            "x-vmw-nsx-module": "BaseSwitchingProfile",
            "required": [
                "value"
            ],
            "type": "object",
            "properties": {
                "value": {
                    "readOnly": false,
                    "type": "string",
                    "description": "key value"
                },
                "key": {
                    "description": "Supported switching profiles.",
                    "enum": [
                        "QosSwitchingProfile",
                        "PortMirroringSwitchingProfile",
                        "IpDiscoverySwitchingProfile",
                        "SpoofGuardSwitchingProfile",
                        "SwitchSecuritySwitchingProfile",
                        "MacManagementSwitchingProfile"
                    ],
                    "type": "string"
                }
            }
        },
        "DnsForwarder": {
            "x-vmw-nsx-module": "DnsForwarder",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "DnsForwarder",
                    "required": [
                        "default_forwarder",
                        "logical_router_id",
                        "listener_ip"
                    ],
                    "type": "object",
                    "properties": {
                        "conditional_forwarders": {
                            "items": {
                                "$ref": "#/definitions/ConditionalForwarderZone"
                            },
                            "type": "array",
                            "description": "The conditional zone forwarders. During matching a zone forwarder,\nthe dns forwarder will use the conditional fowarder with the longest\ndomain name that matches the query.\n",
                            "maxItems": 5,
                            "title": "Conditional zone forwarders"
                        },
                        "log_level": {
                            "default": "INFO",
                            "enum": [
                                "DEBUG",
                                "INFO",
                                "WARNING",
                                "ERROR",
                                "FATAL"
                            ],
                            "type": "string",
                            "description": "Log level of the dns forwarder",
                            "title": "Log level of the dns forwarder"
                        },
                        "logical_router_id": {
                            "type": "string",
                            "description": "Specify the LogicalRouter where the DnsForwarder runs. The HA mode\nof the hosting LogicalRouter must be Active/Standby.\n",
                            "title": "Logical router id"
                        },
                        "cache_size": {
                            "description": "One dns answer cache entry will consume ~120 bytes. Hence 1 KB cache\nsize can cache ~8 dns answer entries, and the default 1024 KB cache\nsize can hold ~8k dns answer entries.\n",
                            "title": "Cache size in KB",
                            "default": 1024,
                            "format": "int32",
                            "maximum": 16777216,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "default_forwarder": {
                            "title": "Default zone forwarder",
                            "description": "The default zone forwarder that catches all other domain names except\nthose matched by conditional forwarder zone.\n",
                            "$ref": "#/definitions/ForwarderZone"
                        },
                        "listener_ip": {
                            "description": "The ip address the dns forwarder listens on. It can be an ip address\nalready owned by the logical-router uplink port or router-link, or a\nloopback port ip address. But it can not be a downlink port address.\nUser needs to ensure the address is reachable via router or NAT from\nboth client VMs and upstream servers. User will need to create Firewall\nrules if needed to allow such traffic on a Tier-1 or Tier-0.\n",
                            "format": "ipv4",
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "NodeSearchDomainsProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "required": [
                        "search_domains"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "search_domains": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Search domains",
                            "title": "Search domains"
                        }
                    }
                }
            ],
            "description": "Node network search domains properties",
            "title": "Node network search domains properties"
        },
        "IPSecVPNService": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "logical_router_id"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "ike_log_level": {
                            "default": "INFO",
                            "enum": [
                                "DEBUG",
                                "INFO",
                                "WARN",
                                "ERROR",
                                "EMERGENCY"
                            ],
                            "type": "string",
                            "description": "Log level for internet key exchange (IKE).",
                            "title": "Internet key exchange (IKE) log level"
                        },
                        "logical_router_id": {
                            "type": "string",
                            "description": "Logical router id.",
                            "title": "Logical router id"
                        },
                        "bypass_rules": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNPolicyRule"
                            },
                            "type": "array",
                            "description": "Bypass policy rules are configured using VPN service.\nBypass rules always have higher priority over protect\nrules and they affect all policy based vpn sessions associated\nwith the IPSec VPN service. Protect rules are defined per\npolicy based vpn session.\n",
                            "title": "Bypass Policy rules"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, enable VPN services for given logical router.",
                            "title": "Enable virtual private network (VPN) service"
                        }
                    }
                }
            ],
            "description": "Create and manage IPSec VPN service for given logical router.",
            "title": "IPSec VPN service"
        },
        "Alarm": {
            "description": "Alarm in NSX that needs users' attention",
            "title": "Alarm in NSX that needs users' attention",
            "required": [
                "state"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "sources": {
                    "items": {
                        "$ref": "#/definitions/AlarmSource"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Sources emitting this alarm",
                    "title": "Sources emitting this alarm"
                },
                "state": {
                    "readOnly": false,
                    "enum": [
                        "UNKNOWN",
                        "ACTIVE",
                        "ACKNOWLEDGED",
                        "RESOLVED"
                    ],
                    "description": "Alarm state",
                    "title": "Alarm state"
                },
                "source_comp": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Alarm source component like nsx-manager, nsx-edge etc",
                    "title": "Alarm source component like nsx-manager, nsx-edge etc"
                },
                "severity": {
                    "readOnly": true,
                    "enum": [
                        "UNKNOWN",
                        "MINOR",
                        "MAJOR",
                        "CRITICAL"
                    ],
                    "type": "string",
                    "description": "Severity of an Alarm",
                    "title": "Severity of an Alarm"
                },
                "source_comp_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Unique identifier(like UUID) for the node sending the Alarm",
                    "title": "Unique identifier(like UUID) for the node sending the Alarm"
                },
                "timestamp": {
                    "description": "Date and time in UTC of the Alarm",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Unique identifier for an NSX Alarm",
                    "title": "Unique identifier for an NSX Alarm"
                },
                "source_subcomp": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Alarm source sub component like nsx-mpa etc",
                    "title": "Alarm source sub component like nsx-mpa etc"
                }
            }
        },
        "NSGroupTagExpression": {
            "x-vmw-nsx-module": "NSGroup",
            "allOf": [
                {
                    "$ref": "#/definitions/NSGroupExpression"
                },
                {
                    "required": [
                        "target_type"
                    ],
                    "x-vmw-nsx-module": "NSGroup",
                    "type": "object",
                    "properties": {
                        "tag_op": {
                            "default": "EQUALS",
                            "enum": [
                                "EQUALS"
                            ],
                            "type": "string",
                            "description": "Operator of the tag expression eg- tag.tag = \"Production\"",
                            "title": "Operator of the tag expression eg- tag.tag = \"Production\""
                        },
                        "scope": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The tag.scope attribute of the object",
                            "title": "The tag.scope attribute of the object"
                        },
                        "scope_op": {
                            "default": "EQUALS",
                            "enum": [
                                "EQUALS"
                            ],
                            "type": "string",
                            "description": "Operator of the scope expression eg- tag.scope = \"S1\".",
                            "title": "Operator of the scope expression eg- tag.scope = \"S1\"."
                        },
                        "tag": {
                            "maxLength": 256,
                            "type": "string",
                            "description": "The tag.tag attribute of the object",
                            "title": "The tag.tag attribute of the object"
                        },
                        "target_type": {
                            "enum": [
                                "LogicalSwitch",
                                "LogicalPort",
                                "VirtualMachine"
                            ],
                            "type": "string",
                            "description": "Type of the resource on which this expression is evaluated",
                            "title": "Type of the resource on which this expression is evaluated"
                        }
                    }
                }
            ],
            "description": "Includes both scope and tag attribute of Tag. The scope and tag expressions\nare logically 'AND' with each other.\neg- tag.scope = \"S1\" AND tag.tag = 'T1'\n",
            "title": "TAG expressions to represent NSGroup membership"
        },
        "HaVipConfig": {
            "x-vmw-nsx-module": "LogicalRouter",
            "required": [
                "ha_vip_subnets",
                "redundant_uplink_port_ids"
            ],
            "type": "object",
            "properties": {
                "ha_vip_subnets": {
                    "description": "Array of IP address subnets which will be used as floating IP addresses. | Note - this configuration is applicable only for Active-Standby LogicalRouter. | For Active-Active LogicalRouter this configuration will be rejected.",
                    "title": "Floating IP address subnets",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/VIPSubnet"
                    },
                    "maxItems": 1,
                    "type": "array"
                },
                "redundant_uplink_port_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Identifiers of logical router uplink ports which are to be paired to provide | redundancy. Floating IP will be owned by one of these uplink ports (depending upon | which node is Active).",
                    "title": "Identifiers of uplink ports for providing redundancy"
                },
                "enabled": {
                    "default": true,
                    "type": "boolean",
                    "description": "Flag to enable this ha vip config.",
                    "title": "Flag to enable this ha vip config."
                }
            }
        },
        "SessionReclassificationParameter": {
            "x-vmw-nsx-module": "AppDiscovery",
            "type": "object",
            "properties": {
                "app_profile_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "App Profile Ids",
                    "title": "App Profile Ids"
                }
            }
        },
        "TransportZoneStatus": {
            "x-vmw-nsx-module": "TransportZone",
            "type": "object",
            "description": "Transport zone runtime status information",
            "properties": {
                "num_logical_ports": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Count of logical ports in the transport zone",
                    "title": "Count of logical ports in the transport zone"
                },
                "transport_zone_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Unique ID identifying the transport zone",
                    "title": "Unique ID identifying the transport zone"
                },
                "num_logical_switches": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Count of logical switches in the transport zone",
                    "title": "Count of logical switches in the transport zone"
                },
                "num_transport_nodes": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Count of transport nodes in the transport zone",
                    "title": "Count of transport nodes in the transport zone"
                }
            },
            "title": "Transport zone runtime status information"
        },
        "AppInfoHostVmCsvRecord": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvRecord"
                },
                {
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "host_vms": {
                            "readOnly": true,
                            "type": "string",
                            "description": "vm ids that this application belongs to",
                            "title": "vm ids that this application belongs to"
                        },
                        "version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Version of the app",
                            "title": "Version of the app"
                        },
                        "display_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Name of the app",
                            "title": "Name of the app"
                        },
                        "os_type": {
                            "enum": [
                                "INVALID",
                                "WINDOWS",
                                "LINUX"
                            ],
                            "type": "string",
                            "description": "OS type of the VM",
                            "title": "OS type of the VM"
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Id of the app",
                            "title": "Id of the app"
                        },
                        "manufacturer": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Manufacturer of the app",
                            "title": "Manufacturer of the app"
                        }
                    }
                }
            ]
        },
        "LbCookiePersistenceProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbPersistenceProfile"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "cookie_name"
                    ],
                    "type": "object",
                    "properties": {
                        "cookie_garble": {
                            "default": true,
                            "type": "boolean",
                            "description": "If garble is set to true, cookie value (server IP and port) would be\nencrypted.\nIf garble is set to false, cookie value would be plain text.\n",
                            "title": "cookie persistence garble"
                        },
                        "cookie_fallback": {
                            "default": true,
                            "type": "boolean",
                            "description": "If fallback is true, once the cookie points to a server that is down\n(i.e. admin state DISABLED or healthcheck state is DOWN), then a new\nserver is selected by default to handle that request.\nIf fallback is false, it will cause the request to be rejected if\ncookie points to a server\n",
                            "title": "cookie persistence fallback"
                        },
                        "cookie_mode": {
                            "description": "cookie persistence mode",
                            "default": "INSERT",
                            "enum": [
                                "INSERT",
                                "PREFIX",
                                "REWRITE"
                            ],
                            "type": "string"
                        },
                        "cookie_domain": {
                            "type": "string",
                            "description": "HTTP cookie domain could be configured, only available for insert mode.\n",
                            "title": "cookie domain"
                        },
                        "cookie_name": {
                            "type": "string",
                            "description": "cookie name",
                            "title": "cookie name"
                        },
                        "cookie_time": {
                            "title": "cookie time setting",
                            "description": "Both session cookie and persistence cookie are supported, if not\nspecified, it's a session cookie. It expires when the browser is\nclosed.\n",
                            "$ref": "#/definitions/LbCookieTime"
                        },
                        "cookie_path": {
                            "type": "string",
                            "description": "HTTP cookie path could be set, only available for insert mode.\n",
                            "title": "cookie path"
                        }
                    }
                }
            ]
        },
        "LogicalRouterPortArpEntry": {
            "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
            "required": [
                "ip",
                "mac_address"
            ],
            "type": "object",
            "properties": {
                "ip": {
                    "description": "The IP address",
                    "format": "ip",
                    "type": "string"
                },
                "mac_address": {
                    "type": "string",
                    "description": "The MAC address",
                    "title": "The MAC address"
                }
            }
        },
        "MetadataProxyStatus": {
            "x-vmw-nsx-module": "AggSvcMetadataProxy",
            "required": [
                "proxy_status",
                "transport_nodes"
            ],
            "type": "object",
            "properties": {
                "proxy_status": {
                    "enum": [
                        "UP",
                        "DOWN",
                        "ERROR",
                        "NO_BACKUP"
                    ],
                    "type": "string",
                    "description": "UP means the metadata proxy is working fine on both transport-nodes(if have);\nDOWN means the metadata proxy is is down on both transport-nodes(if have),\nhence the metadata proxy will not repsonse any metadata request;\nError means error happens on transport-node(s) or no status is reported from\ntransport-node(s). The metadata proxy may be working (or not working);\nNO_BACK means metadata proxy is working in one of the transport node while\nnot in the other transport-node (if have). Hence if the metadata proxy in\nthe working transport-node goes down, the metadata proxy will go down.\n"
                },
                "error_message": {
                    "type": "string",
                    "description": "Error message, if available",
                    "title": "Error message, if available"
                },
                "transport_nodes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Order of the transport nodes is insensitive because Metadata Proxy\nis running in Active-Active mode among target transport nodes.\n",
                    "title": "ids of transport nodes where this metadata proxy is running"
                }
            }
        },
        "AddControllerNodeSpec": {
            "x-vmw-nsx-module": "ClusterManagement",
            "required": [
                "mpa_msg_client_info",
                "host_msg_client_info",
                "type"
            ],
            "type": "object",
            "properties": {
                "mpa_msg_client_info": {
                    "$ref": "#/definitions/MsgClientInfo"
                },
                "host_msg_client_info": {
                    "$ref": "#/definitions/MsgClientInfo"
                },
                "clustering_params": {
                    "title": "Clustering parameters for the node",
                    "description": "The details of the controller node required for cluster initialization or joining to an existing cluster.  If this property is set, the node will be added to an existing cluster or used to create a new cluster.  Otherwise no clustering operation/s will be performed.",
                    "$ref": "#/definitions/ClusteringInfo"
                },
                "node_id": {
                    "type": "string",
                    "description": "Only use this if an id for the node already exists with MP. If not specified, then the node_id will be set to a random id.",
                    "title": "Internal identifier of the node"
                },
                "control_plane_server_certificate": {
                    "type": "string",
                    "description": "Deprecated. Do not supply a value for this property.",
                    "x-deprecated": true
                },
                "type": {
                    "readOnly": false,
                    "enum": [
                        "AddControllerNodeSpec"
                    ],
                    "type": "string",
                    "description": "must be set to AddControllerNodeSpec",
                    "title": "must be set to AddControllerNodeSpec"
                }
            }
        },
        "MigrationBundleUploadStatus": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "description": "Upload status of migration bundle uploaded from url",
            "properties": {
                "url": {
                    "readOnly": true,
                    "type": "string",
                    "description": "URL for uploading migration bundle",
                    "title": "URL from which the bundle was uploaded"
                },
                "status": {
                    "readOnly": true,
                    "enum": [
                        "UPLOADING",
                        "VERIFYING",
                        "SUCCESS",
                        "FAILED"
                    ],
                    "type": "string",
                    "description": "Current status of migration bundle upload",
                    "title": "Status of migration bundle upload"
                },
                "detailed_status": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Detailed status of migration bundle upload",
                    "title": "Detailed status of bundle upload"
                },
                "percent": {
                    "readOnly": true,
                    "type": "number",
                    "description": "Percent of bundle uploaded from URL",
                    "title": "Percent of upload completed"
                }
            },
            "title": "Upload status of migration bundle"
        },
        "L2VpnAttachmentContext": {
            "x-vmw-nsx-module": "LogicalPort",
            "allOf": [
                {
                    "$ref": "#/definitions/AttachmentContext"
                },
                {
                    "x-vmw-nsx-module": "LogicalPort",
                    "required": [
                        "tunnel_id"
                    ],
                    "type": "object",
                    "properties": {
                        "tunnel_id": {
                            "format": "int32",
                            "type": "integer",
                            "description": "Tunnel Id to uniquely identify the extension.",
                            "title": "Tunnel Id to uniquely identify the extension."
                        }
                    }
                }
            ]
        },
        "AcceptableComponentVersion": {
            "x-vmw-nsx-module": "VersionWhitelist",
            "allOf": [
                {
                    "$ref": "#/definitions/VersionList"
                },
                {
                    "x-vmw-nsx-module": "VersionWhitelist",
                    "required": [
                        "component_type"
                    ],
                    "type": "object",
                    "properties": {
                        "component_type": {
                            "enum": [
                                "HOST",
                                "EDGE",
                                "CCP",
                                "MP"
                            ],
                            "type": "string",
                            "description": "Node type",
                            "title": "Node type"
                        }
                    }
                }
            ]
        },
        "InterfaceNeighborPropertyListResult": {
            "x-vmw-nsx-module": "Lldp",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Lldp",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/InterfaceNeighborProperties"
                            },
                            "type": "array",
                            "description": "Interface neighbor property results",
                            "title": "Interface neighbor property results"
                        }
                    }
                }
            ],
            "description": "Interface neighbor property query results",
            "title": "Interface neighbor property query results"
        },
        "SupportBundleFileTransferAuthenticationScheme": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "required": [
                "username",
                "scheme_name"
            ],
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "User name to authenticate with",
                    "title": "User name to authenticate with"
                },
                "scheme_name": {
                    "enum": [
                        "PASSWORD"
                    ],
                    "type": "string",
                    "description": "Authentication scheme name",
                    "title": "Authentication scheme name"
                },
                "password": {
                    "type": "string",
                    "description": "Password to authenticate with",
                    "title": "Password to authenticate with"
                }
            }
        },
        "MonthlyTelemetrySchedule": {
            "x-vmw-nsx-module": "TelemetryConfig",
            "allOf": [
                {
                    "$ref": "#/definitions/TelemetrySchedule"
                },
                {
                    "x-vmw-nsx-module": "TelemetryConfig",
                    "required": [
                        "day_of_month",
                        "hour_of_day"
                    ],
                    "type": "object",
                    "properties": {
                        "minutes": {
                            "description": "Minute at which data will be collected. Specify a value between 0 through 59.\n",
                            "title": "Minute at which data will be collected",
                            "default": 0,
                            "format": "int64",
                            "maximum": 59,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "day_of_month": {
                            "description": "Day of month on which data will be collected. Specify a value between 1 through 31.\n",
                            "format": "int64",
                            "title": "Day of month on which data will be collected",
                            "maximum": 31,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "hour_of_day": {
                            "description": "Hour at which data will be collected. Specify a value between 0 through 23.\n",
                            "format": "int64",
                            "title": "Hour at which data will be collected",
                            "maximum": 23,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "NatStatisticsPerTransportNode": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "allOf": [
                {
                    "$ref": "#/definitions/NatCounters"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouter",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "transport_node_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Id for the transport node",
                            "title": "Id for the transport node"
                        }
                    }
                }
            ]
        },
        "ClustersAggregateInfo": {
            "x-vmw-nsx-module": "ClusterManagement",
            "required": [
                "management_cluster",
                "controller_cluster",
                "cluster_status"
            ],
            "type": "object",
            "properties": {
                "management_cluster": {
                    "items": {
                        "$ref": "#/definitions/ManagementNodeAggregateInfo"
                    },
                    "type": "array",
                    "description": "Array of Management Nodes",
                    "title": "Array of Management Nodes"
                },
                "controller_cluster": {
                    "items": {
                        "$ref": "#/definitions/ControllerNodeAggregateInfo"
                    },
                    "type": "array",
                    "description": "Array of Controller Nodes",
                    "title": "Array of Controller Nodes"
                },
                "cluster_status": {
                    "title": "Status of all the cluster groups",
                    "description": "Status of all the cluster groups",
                    "$ref": "#/definitions/AllClusterGroupStatus"
                }
            }
        },
        "LbServiceListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbService"
                            },
                            "type": "array",
                            "description": "paginated list of load balancer services",
                            "title": "paginated list of load balancer services"
                        }
                    }
                }
            ]
        },
        "NodeUserSettings": {
            "x-vmw-nsx-module": "FabricNode",
            "type": "object",
            "properties": {
                "cli_username": {
                    "default": "admin",
                    "type": "string",
                    "description": "To configure username, you must provide this property together with\n<b>cli_password</b>.\n",
                    "title": "CLI \"admin\" username"
                },
                "audit_username": {
                    "type": "string",
                    "description": "The default username is \"audit\". To configure username, you must provide\nthis property together with <b>audit_password</b>.\n",
                    "title": "CLI \"audit\" username"
                },
                "root_password": {
                    "type": "string",
                    "description": "Password for the node root user. For deployment,\nthis property is required. After deployment, this property is ignored, and\nthe node cli must be used to change the password.\nThe password specified must be at least 8 characters in length and must\ncontain at least one lowercase, one uppercase, one numeric character and one\nspecial character (except quotes).\n",
                    "title": "Node root user password"
                },
                "cli_password": {
                    "type": "string",
                    "description": "Password for the node cli user. For deployment,\nthis property is required. After deployment, this property is ignored, and\nthe node cli must be used to change the password.\nThe password specified must be at least 8 characters in length and must\ncontain at least one lowercase, one uppercase, one numeric character and one\nspecial character (except quotes).\n",
                    "title": "Node cli password"
                },
                "audit_password": {
                    "type": "string",
                    "description": "Password for the node audit user. For deployment,\nthis property is required. After deployment, this property is ignored, and\nthe node cli must be used to change the password.\nThe password specified must be at least 8 characters in length and must\ncontain at least one lowercase, one uppercase, one numeric character and one\nspecial character (except quotes).\n",
                    "title": "Node audit user password"
                }
            }
        },
        "IpfixCollectorConfig": {
            "x-vmw-nsx-module": "Ipfix",
            "description": "This managed entity contains a set of IPFIX collectors.\n",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Ipfix",
                    "required": [
                        "collectors"
                    ],
                    "type": "object",
                    "properties": {
                        "collectors": {
                            "description": "IPFIX Collectors",
                            "title": "IPFIX Collectors",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IpfixCollector"
                            },
                            "maxItems": 4,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "TraceflowObservationReceivedLogical": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/TraceflowObservation"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "src_component_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the source component from which the traceflow packet was received.",
                            "title": "The id of the source component from which the traceflow packet was received."
                        },
                        "component_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the component that received the traceflow packet.",
                            "title": "The id of the component that received the traceflow packet."
                        },
                        "lport_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the logical port at which the traceflow packet was received",
                            "title": "The id of the logical port at which the traceflow packet was received"
                        },
                        "src_component_type": {
                            "description": "The type of the source component from which the traceflow packet was received.",
                            "enum": [
                                "PHYSICAL",
                                "LR",
                                "LS",
                                "DFW",
                                "BRIDGE",
                                "EDGE_TUNNEL",
                                "EDGE_HOSTSWITCH",
                                "UNKNOWN"
                            ],
                            "readOnly": true,
                            "type": "string"
                        },
                        "lport_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The name of the logical port at which the traceflow packet was received",
                            "title": "The name of the logical port at which the traceflow packet was received"
                        },
                        "src_component_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The name of source component from which the traceflow packet was received.",
                            "title": "The name of source component from which the traceflow packet was received."
                        },
                        "vni": {
                            "readOnly": true,
                            "format": "int32",
                            "type": "integer",
                            "description": "VNI for the logical network on which the traceflow packet was received.",
                            "title": "VNI for the logical network on which the traceflow packet was received."
                        }
                    }
                }
            ]
        },
        "NSServiceGroupListResult": {
            "x-vmw-nsx-module": "NSServiceGroup",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "NSServiceGroup",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NSServiceGroup"
                            },
                            "type": "array",
                            "description": "Paged collection of NSServiceGroups",
                            "title": "Paged collection of NSServiceGroups"
                        }
                    }
                }
            ],
            "description": "List result of NSServiceGroups",
            "title": "List result of NSServiceGroups"
        },
        "Principal": {
            "x-vmw-nsx-module": "CertificateManager",
            "required": [
                "attributes"
            ],
            "type": "object",
            "properties": {
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/KeyValue"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "Certificate list"
                }
            }
        },
        "IpBlockListResult": {
            "x-vmw-nsx-module": "Ipam",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Ipam",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IpBlock"
                            },
                            "type": "array",
                            "description": "IP block list results",
                            "title": "IP block list results"
                        }
                    }
                }
            ]
        },
        "LbVariableCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "variable_value",
                        "variable_name"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "variable_value": {
                            "type": "string",
                            "description": "Value of variable to be matched",
                            "title": "Value of variable to be matched"
                        },
                        "case_sensitive": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, case is significant when comparing variable value.\n",
                            "title": "A case sensitive flag for variable value comparing"
                        },
                        "match_type": {
                            "description": "Match type of variable value",
                            "default": "REGEX",
                            "enum": [
                                "STARTS_WITH",
                                "ENDS_WITH",
                                "EQUALS",
                                "CONTAINS",
                                "REGEX"
                            ],
                            "type": "string"
                        },
                        "variable_name": {
                            "type": "string",
                            "description": "Name of the variable to be matched",
                            "title": "Name of the variable to be matched"
                        }
                    }
                }
            ],
            "description": "This condition is used to match variable's name and value at all\nphases. The variables could be captured from REGEX or assigned by\nLbVariableAssignmentAction or system embedded variable. Varialbe_name\nand variable_value should be matched at the same time.\n",
            "title": "Condition to match IP header fields"
        },
        "LbRuleAction": {
            "description": "Load balancer rule actions are used to manipulate application traffic.\nCurrently load balancer rules can be used at three load balancer processing\nphases. Each phase has its own supported type of actions.\nSupported actions in HTTP_REQUST_REWRITE phase are:\n  LbHttpRequestUriRewriteAction\n  LbHttpRequestHeaderRewriteAction\n  LbHttpRequestHeaderDeleteAction\n  LbVariableAssignmentAction\nSupported actions in HTTP_FORWARDING phase are:\n  LbHttpRejectAction\n  LbHttpRedirectAction\n  LbSelectPoolAction\nSupported action in HTTP_RESPONSE_REWRITE phase is:\n  LbHttpResponseHeaderRewriteAction\n  LbHttpResponseHeaderDeleteAction\n\nIf the match type of an LbRuleCondition field is specified as REGEX and\nnamed capturing groups are used in the specified regular expression. The\ngroups can be used as variables in LbRuleAction fields.\nFor example, define a rule with LbHttpRequestUriCondition as match\ncondition and LbHttpRequestUriRewriteAction as action. Set match_type field\nof LbHttpRequestUriCondition to REGEX, and set uri field to\n  \"/news/(?&lt;year&gt;\\d+)/(?&lt;month&gt;\\d+)/(?&lt;article&gt;.*)\".\nSet uri field of LbHttpRequestUriRewriteAction to:\n  \"/news/$year-$month/$article\"\nIn uri field of LbHttpRequestUriCondition, the (?&lt;year&gt;\\d+),\n(?&lt;month&gt;\\d+) and (?&lt;article&gt;.*) are named capturing groups,\nthey define variables named $year, $month and $article respectively. The\ndefined variables are used in LbHttpRequestUriRewriteAction.\nFor a matched HTTP request with URI \"/news/2017/06/xyz.html\", the substring\n\"2017\" is captured in variable $year, \"06\" is captured in variable $month,\nand \"xyz.html\" is captured in variable $article. The\nLbHttpRequestUriRewriteAction will rewrite the URI to:\n  \"/news/2017-06/xyz.html\"\nA set of built-in variables can be used in LbRuleAction as well. The name\nof built-in variables start with underscore, the name of user defined\nvariables is not allowed to start with underscore.\nFollowing are some of the built-in variables:\n  $_scheme: Reference the scheme part of matched HTTP messages, could be\n\"http\" or \"https\".\n  $_host: Host of matched HTTP messages, for example \"www.example.com\".\n  $_server_port: Port part of URI, it is also the port of the server which\naccepted a request. Default port is 80 for http and 443 for https.\n  $_uri: The URI path, for example \"/products/sample.html\".\n  $_request_uri: Full original request URI with arguments, for example,\n    \"/products/sample.html?a=b&c=d\".\n  $_args: URI arguments, for instance \"a=b&c=d\"\n  $_is_args: \"?\" if a request has URI arguments, or an empty string\notherwise.\nFor the full list of built-in variables, please reference the NSX-T\nAdministrator's Guide.\n",
            "title": "Load balancer rule action",
            "required": [
                "type"
            ],
            "discriminator": "type",
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of load balancer rule action",
                    "enum": [
                        "LbHttpRequestUriRewriteAction",
                        "LbHttpRequestHeaderRewriteAction",
                        "LbHttpRejectAction",
                        "LbHttpRedirectAction",
                        "LbSelectPoolAction",
                        "LbSelectServerAction",
                        "LbHttpResponseHeaderRewriteAction",
                        "LbHttpRequestHeaderDeleteAction",
                        "LbHttpResponseHeaderDeleteAction",
                        "LbVariableAssignmentAction"
                    ],
                    "type": "string"
                }
            }
        },
        "PreconfiguredHostSwitch": {
            "description": "Preconfigured host switch is used for manually configured transport node.",
            "title": "Preconfigured host switch",
            "required": [
                "host_switch_id"
            ],
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "properties": {
                "host_switch_id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "External Id of the preconfigured host switch.",
                    "title": "External Id of the preconfigured host switch."
                },
                "endpoints": {
                    "items": {
                        "$ref": "#/definitions/PreconfiguredEndpoint"
                    },
                    "type": "array",
                    "description": "List of virtual tunnel endpoints which are preconfigured on this host switch",
                    "maxItems": 1,
                    "title": "List of virtual tunnel endpoints which are preconfigured on this host switch"
                }
            }
        },
        "TraceflowObservation": {
            "x-vmw-nsx-module": "Traceflow",
            "required": [
                "resource_type"
            ],
            "type": "object",
            "properties": {
                "timestamp_micro": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Timestamp when the observation was created by the transport node (microseconds epoch)",
                    "title": "Timestamp when the observation was created by the transport node"
                },
                "component_sub_type": {
                    "description": "The sub type of the component that issued the observation.",
                    "enum": [
                        "LR_TIER0",
                        "LR_TIER1",
                        "LR_VRF_TIER0",
                        "LS_TRANSIT",
                        "UNKNOWN"
                    ],
                    "readOnly": true,
                    "type": "string"
                },
                "resource_type": {
                    "default": "TraceflowObservationReceived",
                    "enum": [
                        "TraceflowObservationForwarded",
                        "TraceflowObservationDropped",
                        "TraceflowObservationDelivered",
                        "TraceflowObservationReceived",
                        "TraceflowObservationForwardedLogical",
                        "TraceflowObservationDroppedLogical",
                        "TraceflowObservationReceivedLogical"
                    ],
                    "type": "string"
                },
                "component_type": {
                    "description": "The type of the component that issued the observation.",
                    "enum": [
                        "PHYSICAL",
                        "LR",
                        "LS",
                        "DFW",
                        "BRIDGE",
                        "EDGE_TUNNEL",
                        "EDGE_HOSTSWITCH",
                        "UNKNOWN"
                    ],
                    "readOnly": true,
                    "type": "string"
                },
                "transport_node_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "name of the transport node that observed a traceflow packet",
                    "title": "name of the transport node that observed a traceflow packet"
                },
                "timestamp": {
                    "description": "Timestamp when the observation was created by the transport node (milliseconds epoch)",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "transport_node_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "id of the transport node that observed a traceflow packet",
                    "title": "id of the transport node that observed a traceflow packet"
                },
                "sequence_no": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.",
                    "title": "the sequence number is the traceflow observation hop count"
                },
                "transport_node_type": {
                    "description": "type of the transport node that observed a traceflow packet",
                    "enum": [
                        "ESX",
                        "RHELKVM",
                        "UBUNTUKVM",
                        "EDGE",
                        "PUBLIC_CLOUD_GATEWAY_NODE",
                        "OTHERS",
                        "HYPERV"
                    ],
                    "readOnly": true,
                    "type": "string"
                },
                "component_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The name of the component that issued the observation.",
                    "title": "The name of the component that issued the observation."
                }
            }
        },
        "ClientTypeCollectionConfiguration": {
            "description": "HPM client data collection configuration",
            "title": "HPM client data collection configuration",
            "required": [
                "client_type",
                "data_type_configurations"
            ],
            "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
            "type": "object",
            "properties": {
                "client_type": {
                    "enum": [
                        "HYPERVISOR",
                        "EDGE",
                        "CONTROL_PLANE",
                        "CONTROL_PLANE_PLATFORM",
                        "MANAGEMENT_PLANE",
                        "MANAGEMENT_PLANE_PLATFORM"
                    ],
                    "type": "string",
                    "description": "The client type for which this data collection frequency setting applies",
                    "title": "Client Type"
                },
                "data_type_configurations": {
                    "items": {
                        "$ref": "#/definitions/DataTypeCollectionConfiguration"
                    },
                    "type": "array",
                    "description": "The set of data collection type configurations, one for each data collection type",
                    "title": "Data type configurations"
                }
            }
        },
        "ClasslessStaticRoute": {
            "x-vmw-nsx-module": "Dhcp",
            "required": [
                "next_hop",
                "network"
            ],
            "type": "object",
            "properties": {
                "next_hop": {
                    "description": "router",
                    "format": "ip",
                    "type": "string"
                },
                "network": {
                    "description": "destination in cidr",
                    "format": "address-or-block-or-range",
                    "type": "string"
                }
            }
        },
        "Role": {
            "description": "Role",
            "title": "Role",
            "required": [
                "role"
            ],
            "x-vmw-nsx-module": "AAA",
            "type": "object",
            "properties": {
                "role": {
                    "type": "string",
                    "description": "Role name",
                    "title": "Role name"
                }
            }
        },
        "UplinkHostSwitchProfile": {
            "x-vmw-nsx-module": "UplinkHostSwitchProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseHostSwitchProfile"
                },
                {
                    "required": [
                        "teaming"
                    ],
                    "x-vmw-nsx-module": "UplinkHostSwitchProfile",
                    "type": "object",
                    "properties": {
                        "lags": {
                            "items": {
                                "$ref": "#/definitions/Lag"
                            },
                            "type": "array",
                            "description": "list of LACP group",
                            "maxItems": 64,
                            "title": "list of LACP group"
                        },
                        "transport_vlan": {
                            "description": "VLAN used for tagging Overlay traffic of associated HostSwitch",
                            "format": "int64",
                            "default": 0,
                            "type": "integer"
                        },
                        "teaming": {
                            "title": "Default TeamingPolicy associated with this UplinkProfile",
                            "description": "Default TeamingPolicy associated with this UplinkProfile",
                            "$ref": "#/definitions/TeamingPolicy"
                        },
                        "overlay_encap": {
                            "default": "GENEVE",
                            "enum": [
                                "VXLAN",
                                "GENEVE"
                            ],
                            "type": "string",
                            "description": "The protocol used to encapsulate overlay traffic",
                            "title": "The protocol used to encapsulate overlay traffic"
                        },
                        "named_teamings": {
                            "items": {
                                "$ref": "#/definitions/NamedTeamingPolicy"
                            },
                            "type": "array",
                            "description": "List of named uplink teaming policies that can be used by logical switches",
                            "maxItems": 32,
                            "title": "List of named uplink teaming policies that can be used by logical switches"
                        },
                        "mtu": {
                            "description": "Maximum Transmission Unit used for uplinks",
                            "title": "Maximum Transmission Unit used for uplinks",
                            "default": 1600,
                            "format": "int32",
                            "maximum": 9000,
                            "minimum": 1280,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "Profile for uplink policies",
            "title": "Profile for uplink policies"
        },
        "LogicalRouterPortStatistics": {
            "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
            "required": [
                "logical_router_port_id"
            ],
            "type": "object",
            "properties": {
                "per_node_statistics": {
                    "description": "Per Node Statistics",
                    "title": "Per Node Statistics",
                    "items": {
                        "$ref": "#/definitions/LogicalRouterPortStatisticsPerNode"
                    },
                    "readOnly": true,
                    "additionalProperties": false,
                    "type": "array"
                },
                "logical_router_port_id": {
                    "type": "string",
                    "description": "The ID of the logical router port",
                    "title": "The ID of the logical router port"
                }
            }
        },
        "View": {
            "x-vmw-nsx-module": "NsxDashboard",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "widgets",
                        "display_name"
                    ],
                    "x-vmw-nsx-module": "NsxDashboard",
                    "type": "object",
                    "properties": {
                        "include_roles": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "Comma separated list of roles to which the shared view is visible. Allows user to specify the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles.",
                            "title": "Roles to which the shared view is visible"
                        },
                        "display_name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "Title of the widget.",
                            "title": "Widget Title"
                        },
                        "exclude_roles": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "Comma separated list of roles to which the shared view is not visible. Allows user to prevent the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles. If include_roles is specified then exclude_roles cannot be specified.",
                            "title": "Roles to which the shared view is not visible"
                        },
                        "weight": {
                            "default": 10000,
                            "format": "int32",
                            "type": "integer",
                            "description": "Determines placement of view relative to other views. The lower the weight, the higher it is in the placement order.",
                            "title": "Weightage or placement of the view"
                        },
                        "widgets": {
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/WidgetItem"
                            },
                            "type": "array",
                            "description": "Array of widgets that are part of the view.",
                            "title": "Widgets"
                        },
                        "shared": {
                            "default": false,
                            "type": "boolean",
                            "description": "Defaults to false. Set to true to publish the view to other users. The widgets of a shared view are visible to other users.",
                            "title": "Share the view with other users"
                        }
                    }
                }
            ],
            "description": "Describes the configuration of a view to be displayed on the dashboard.",
            "title": "Dashboard View"
        },
        "VsphereClusterNodeVMDeploymentConfig": {
            "x-vmw-nsx-module": "ClusterNodeVMDeployment",
            "allOf": [
                {
                    "$ref": "#/definitions/ClusterNodeVMDeploymentConfig"
                },
                {
                    "required": [
                        "storage_id",
                        "management_network_id",
                        "hostname",
                        "vc_id",
                        "compute_id"
                    ],
                    "x-vmw-nsx-module": "ClusterNodeVMDeployment",
                    "type": "object",
                    "properties": {
                        "dns_servers": {
                            "items": {
                                "description": "IPv4 address",
                                "format": "ipv4",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "List of DNS servers.\nIf DHCP is used, the default DNS servers associated with\nthe DHCP server will be used instead.\n",
                            "title": "DNS servers."
                        },
                        "ntp_servers": {
                            "items": {
                                "description": "Hostname or IPv4 address",
                                "format": "hostname-or-ipv4",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "List of NTP servers.\nTo use hostnames, a DNS server must be defined. If not using DHCP,\na DNS server should be specified under dns_servers.\n",
                            "title": "NTP servers."
                        },
                        "management_network_id": {
                            "type": "string",
                            "description": "Distributed portgroup identifier to which the management vnic of\ncluster node VM will be connected.\n",
                            "title": "Portgroup identifier for management network connectivity"
                        },
                        "enable_ssh": {
                            "default": false,
                            "type": "boolean",
                            "description": "If true, the SSH service will automatically be started on the VM.\nEnabling SSH service is not recommended for security reasons.\n",
                            "title": "Enable SSH."
                        },
                        "allow_ssh_root_login": {
                            "default": false,
                            "type": "boolean",
                            "description": "If true, the root user will be allowed to log into the VM.\nAllowing root SSH logins is not recommended for security reasons.\n",
                            "title": "Allow root SSH logins."
                        },
                        "compute_id": {
                            "type": "string",
                            "description": "The cluster node VM will be deployed on the specified cluster or\nresourcepool for specified VC server.\n",
                            "title": "Cluster identifier or resourcepool identifier"
                        },
                        "vc_id": {
                            "type": "string",
                            "description": "The VC-specific identifiers will be resolved on this VC, so all other\nidentifiers specified in the config must belong to this Vcenter server.\n",
                            "title": "Vsphere compute identifier for identifying VC server"
                        },
                        "storage_id": {
                            "type": "string",
                            "description": "The cluster node VM will be deployed on the specified datastore in\nthe specified VC server. User must ensure that storage is accessible\nby the specified cluster/host.\n",
                            "title": "Storage/datastore identifier"
                        },
                        "default_gateway_addresses": {
                            "description": "The default gateway for the VM to be deployed must be specified if all\nthe other VMs it communicates with are not in the same subnet.\nDo not specify this field and management_port_subnets to use DHCP.\nNote: only single IPv4 default gateway address is supported and it\nmust belong to management network.\nIMPORTANT: Controllers deployed using DHCP are currently not supported,\nso this parameter should be specified for deploying Controllers.\n",
                            "title": "Default gateway for the VM",
                            "minItems": 1,
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "maxItems": 1,
                            "type": "array"
                        },
                        "management_port_subnets": {
                            "description": "IP Address and subnet configuration for the management port.\nDo not specify this field and default_gateway_addresses to use DHCP.\nNote: only one IPv4 address is supported for the management port.\nIMPORTANT: Controllers deployed using DHCP are currently not supported,\nso this parameter should be specified for deploying Controllers.\n",
                            "title": "Port subnets for management port",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IPSubnet"
                            },
                            "maxItems": 1,
                            "type": "array"
                        },
                        "host_id": {
                            "type": "string",
                            "description": "The cluster node VM will be deployed on the specified host in the\nspecified VC server within the cluster if host_id is specified.\nNote: User must ensure that storage and specified networks are\naccessible by this host.\n",
                            "title": "Host identifier"
                        },
                        "hostname": {
                            "type": "string",
                            "description": "Desired host name/FQDN for the VM to be deployed",
                            "title": "Host name or FQDN for the VM"
                        }
                    }
                }
            ],
            "description": "Config for deploying a cluster node VM through a Vcenter server\n",
            "title": "Deployment config on the Vsphere platform"
        },
        "RestoreStep": {
            "x-vmw-nsx-module": "ClusterRestore",
            "type": "object",
            "description": "Restore step info",
            "properties": {
                "status": {
                    "$ref": "#/definitions/PerStepRestoreStatus"
                },
                "step_number": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Restore step number",
                    "title": "Restore step number"
                },
                "description": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Restore step description",
                    "title": "Restore step description"
                },
                "value": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Restore step value",
                    "title": "Restore step value"
                }
            },
            "title": "Restore step info"
        },
        "IPSubnet": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "required": [
                "ip_addresses",
                "prefix_length"
            ],
            "type": "object",
            "properties": {
                "ip_addresses": {
                    "description": "IPv4 Addresses",
                    "title": "IPv4 Addresses",
                    "minItems": 1,
                    "items": {
                        "description": "IPv4 address",
                        "format": "ipv4",
                        "type": "string"
                    },
                    "maxItems": 1,
                    "type": "array"
                },
                "prefix_length": {
                    "description": "Subnet Prefix Length",
                    "format": "int64",
                    "title": "Subnet Prefix Length",
                    "maximum": 32,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "NodeInterfaceProperties": {
            "x-vmw-nsx-module": "ApplianceStats",
            "type": "object",
            "description": "Node network interface properties",
            "properties": {
                "source": {
                    "description": "Source of status data",
                    "enum": [
                        "realtime",
                        "cached"
                    ],
                    "type": "string"
                },
                "admin_status": {
                    "enum": [
                        "UP",
                        "DOWN"
                    ],
                    "type": "string",
                    "description": "Interface administration status",
                    "title": "Interface administration status"
                },
                "link_status": {
                    "enum": [
                        "UP",
                        "DOWN"
                    ],
                    "type": "string",
                    "description": "Interface administration status",
                    "title": "Interface administration status"
                },
                "interface_alias": {
                    "items": {
                        "$ref": "#/definitions/NodeInterfaceAlias"
                    },
                    "type": "array",
                    "description": "IP Alias",
                    "title": "IP Alias"
                },
                "ens_enabled": {
                    "type": "boolean",
                    "description": "Indicates whether interface is enabled for Enhanced Networking Stack",
                    "title": "Indicates whether interface is enabled for Enhanced Networking Stack"
                },
                "interface_type": {
                    "enum": [
                        "PHYSICAL",
                        "VIRTUAL"
                    ],
                    "type": "string",
                    "description": "Interface Type",
                    "title": "Interface Type"
                },
                "interface_id": {
                    "type": "string",
                    "description": "Interface ID",
                    "title": "Interface ID"
                },
                "connected_switch": {
                    "type": "string",
                    "description": "Connected switch",
                    "title": "Connected switch"
                },
                "ens_capable": {
                    "type": "boolean",
                    "description": "Interface capability for Enhanced Networking Stack",
                    "title": "Interface capability for Enhanced Networking Stack"
                },
                "mtu": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Interface MTU",
                    "title": "Interface MTU"
                }
            },
            "title": "Node network interface properties"
        },
        "AlarmListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/Alarm"
                            },
                            "type": "array",
                            "description": "Alarm results",
                            "title": "Alarm results"
                        }
                    }
                }
            ],
            "description": "Alarm collection results",
            "title": "Alarm collection results"
        },
        "ErrorResolverSystemMetadata": {
            "x-vmw-nsx-module": "ErrorResolver",
            "type": "object",
            "description": "Metadata fetched from an external system like Syslog or LogInsight.",
            "properties": {
                "value": {
                    "type": "string",
                    "description": "The value fetched from another system",
                    "title": "The value fetched from another system"
                }
            }
        },
        "FeaturePermissionListResult": {
            "x-vmw-nsx-module": "AAA",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AAA",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/FeaturePermission"
                            },
                            "type": "array",
                            "description": "List results",
                            "title": "List results"
                        }
                    }
                }
            ]
        },
        "ProtonServiceProperties": {
            "description": "Service properties",
            "title": "Service properties",
            "required": [
                "logging_level"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "package_logging_level": {
                    "items": {
                        "$ref": "#/definitions/ProtonPackageLoggingLevels"
                    },
                    "type": "array",
                    "description": "Package logging levels",
                    "title": "Package logging levels"
                },
                "logging_level": {
                    "enum": [
                        "ERROR",
                        "WARN",
                        "INFO",
                        "DEBUG",
                        "TRACE"
                    ],
                    "type": "string",
                    "description": "Service logging level",
                    "title": "Service logging level"
                }
            }
        },
        "NSService": {
            "x-vmw-nsx-module": "NSService",
            "description": "A Networking and Security Service allows users to specify characteristics to use\nfor matching network traffic. For example the user can specify port and protocol\npair.\n",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "NSService",
                    "required": [
                        "nsservice_element"
                    ],
                    "type": "object",
                    "properties": {
                        "default_service": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "The default NSServices are created in the system by default. These NSServices\ncan't be modified/deleted\n",
                            "title": "NSServices created in the system by default"
                        },
                        "nsservice_element": {
                            "title": "An NSService Element that describes traffic corresponding to this NSService",
                            "description": "An NSService Element that describes traffic corresponding to this NSService",
                            "$ref": "#/definitions/NSServiceElement"
                        }
                    }
                }
            ]
        },
        "VersionList": {
            "x-vmw-nsx-module": "VersionWhitelist",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "VersionWhitelist",
                    "required": [
                        "acceptable_versions"
                    ],
                    "type": "object",
                    "properties": {
                        "acceptable_versions": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "List of component versions",
                            "title": "List of component versions"
                        }
                    }
                }
            ]
        },
        "InstanceEndpoint": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "target_ips"
                    ],
                    "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
                    "type": "object",
                    "properties": {
                        "service_attachments": {
                            "description": "Id(s) of the Service Attachment where this enndpoint is connected to. Service Attachment is mandatory for LOGICAL Instance Endpoint.",
                            "title": "Service Attachment list",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 1,
                            "type": "array"
                        },
                        "target_ips": {
                            "description": "Target IPs on an interface of the Service Instance.",
                            "title": "Target IPs",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IPInfo"
                            },
                            "maxItems": 1,
                            "type": "array"
                        },
                        "endpoint_type": {
                            "description": "LOGICAL - It must be created with a ServiceAttachment and identifies a destination connected to the Service Port of the ServiceAttachment, through the ServiceAttachment's Logical Switch. VIRTUAL - It represents a L3 destination the router can route to but does not provide any further information about its location in the network. Virtual InstanceEndpoints are used for redirection targets that are not connected to Service Ports, such as the next-hop routers on the Edge uplinks.",
                            "title": "Instance Endpoint Type",
                            "default": "LOGICAL",
                            "enum": [
                                "LOGICAL",
                                "VIRTUAL"
                            ],
                            "readOnly": false,
                            "type": "string"
                        },
                        "link_ids": {
                            "description": "Link Ids are mandatory for VIRTUAL Instance Endpoint. Even though VIRTUAL, the Instance Endpoint should be connected/accessible through an NSX object. The link id is this NSX object id. Example - For North-South Service Insertion, this is the LogicalRouter Id through which the targetIp/L3 destination accessible.",
                            "title": "Link Id list",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 1,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "An InstanceEndpoint belongs to one ServiceInstance and represents a redirection target for a Rule. For Example - It can be an L3 Destination. Service Attachments is required for a InstanceEndpoint of type LOGICAL, and deployed_to if its a VIRTUAL InstanceEndpoint.",
            "title": "EndPoint of an Instance"
        },
        "InstanceEndpointListResult": {
            "x-vmw-nsx-module": "ServiceInsertion",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertion",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/InstanceEndpoint"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of instance endpoints.",
                            "title": "Instance End Point list"
                        }
                    }
                }
            ],
            "description": "List of instance endpoints.",
            "title": "Instance Endpoint List"
        },
        "PublicCloudGatewayNode": {
            "x-vmw-nsx-module": "FabricNode",
            "allOf": [
                {
                    "$ref": "#/definitions/EdgeNode"
                },
                {
                    "x-vmw-nsx-module": "FabricNode",
                    "type": "object"
                }
            ]
        },
        "ServiceInsertionSectionListResult": {
            "x-vmw-nsx-module": "ServiceInsertionRules",
            "allOf": [
                {
                    "$ref": "#/definitions/DSSectionListResult"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertionRules",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ServiceInsertionSection"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of the ServiceInsertion sections. The list has to be homogeneous.",
                            "title": "Section list"
                        }
                    }
                }
            ],
            "description": "List of ServiceInsertion Sections.",
            "title": "ServiceInsertion Section List"
        },
        "LbFastTcpProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbAppProfile"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "close_timeout": {
                            "description": "It is used to specify how long a closing TCP connection (both FINs\nreceived or a RST is received) should be kept for this application\nbefore cleaning up the connection.\n",
                            "title": "TCP connection idle timeout in seconds",
                            "default": 8,
                            "format": "int64",
                            "maximum": 60,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "idle_timeout": {
                            "description": "It is used to configure how long an idle TCP connection in ESTABLISHED\nstate should be kept for this application before cleaning up.\n",
                            "title": "TCP connection idle timeout in seconds",
                            "default": 1800,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "ha_flow_mirroring_enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "If flow mirroring is enabled, all the flows to the bounded virtual\nserver are mirrored to the standby node.\n",
                            "title": "flow mirroring enabled flag"
                        }
                    }
                }
            ]
        },
        "SourceNsxApiEndpoint": {
            "description": "Details about an existing NSX manager to be migrated",
            "title": "Source NSX manager details",
            "required": [
                "ip",
                "vc_ip",
                "vc_username"
            ],
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "vc_ip": {
                    "readOnly": false,
                    "format": "hostname-or-ip",
                    "type": "string",
                    "description": "IP address or host name of VC connected to this NSX",
                    "title": "VC IP address or host name"
                },
                "vc_username": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Valid username for connecting to VC.",
                    "title": "Username for VC"
                },
                "ip": {
                    "readOnly": false,
                    "format": "hostname-or-ip",
                    "type": "string",
                    "description": "IP address or hostname of a source NSX API endpoint.",
                    "title": "Source NSX API endpoint IP address"
                },
                "auth_token": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Auth token used to make REST calls to source NSX API endpoint.",
                    "title": "Source NSX auth token"
                },
                "vc_password": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Valid password for connecting to VC.",
                    "title": "Password for VC"
                },
                "vc_port": {
                    "description": "VC port that will be used to fetch details.",
                    "format": "int32",
                    "default": 443,
                    "title": "VC port",
                    "readOnly": false,
                    "type": "integer"
                }
            }
        },
        "StaticIpMacListSpec": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/IpAssignmentSpec"
                },
                {
                    "required": [
                        "subnet_mask",
                        "ip_mac_list",
                        "default_gateway"
                    ],
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "subnet_mask": {
                            "description": "Subnet mask",
                            "format": "ip",
                            "readOnly": false,
                            "type": "string"
                        },
                        "ip_mac_list": {
                            "description": "List of IPs and MACs for transport node host switch virtual tunnel endpoints",
                            "title": "List of IPs and MACs for transport node host switch virtual tunnel endpoints",
                            "items": {
                                "$ref": "#/definitions/IpMacPair"
                            },
                            "readOnly": false,
                            "maxItems": 32,
                            "type": "array"
                        },
                        "default_gateway": {
                            "description": "Gateway IP",
                            "format": "ip",
                            "readOnly": false,
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "IP and MAC assignment specification for Static IP List.",
            "title": "IP and MAC assignment specification for Static IP List."
        },
        "LogicalPortMacTableEntry": {
            "x-vmw-nsx-module": "AggSvcLogicalPort",
            "required": [
                "mac_type",
                "mac_address"
            ],
            "type": "object",
            "properties": {
                "mac_type": {
                    "description": "The type of the MAC address",
                    "enum": [
                        "STATIC",
                        "LEARNED"
                    ],
                    "type": "string"
                },
                "mac_address": {
                    "type": "string",
                    "description": "The MAC address",
                    "title": "The MAC address"
                }
            }
        },
        "LbSourceIpPersistenceProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbPersistenceProfile"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "purge": {
                            "description": "persistence purge setting",
                            "default": "FULL",
                            "enum": [
                                "NO_PURGE",
                                "FULL"
                            ],
                            "type": "string"
                        },
                        "ha_persistence_mirroring_enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "Persistence entries are not synchronized to the HA peer by default.\n",
                            "title": "mirroring enabled flag to synchronize persistence entries"
                        },
                        "timeout": {
                            "description": "When all connections complete (reference count reaches 0), persistence\nentry timer is started with the expiration time.\n",
                            "title": "persistence entry expiration time in seconds",
                            "default": 300,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "AppProfileMemberAppsListInCsvFormat": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvListResult"
                },
                {
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/AppProfileMemberAppsCsvRecord"
                            },
                            "type": "array",
                            "description": "List of app profiles for an application discovery session",
                            "title": "List of app profiles for an application discovery session"
                        }
                    }
                }
            ]
        },
        "LogicalPortStatistics": {
            "x-vmw-nsx-module": "AggSvcLogicalPort",
            "allOf": [
                {
                    "$ref": "#/definitions/AggregatedDataCounterEx"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalPort",
                    "type": "object",
                    "properties": {
                        "logical_port_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the logical port",
                            "title": "The id of the logical port"
                        },
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "LbRule": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "phase",
                        "actions",
                        "match_strategy"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "phase": {
                            "enum": [
                                "HTTP_REQUEST_REWRITE",
                                "HTTP_FORWARDING",
                                "HTTP_RESPONSE_REWRITE"
                            ],
                            "type": "string",
                            "description": "Each load balancer rule is used at a specific phase of load balancer\nprocessing. Currently three phases are supported, HTTP_REQUEST_REWRITE,\nHTTP_FORWARDING and HTTP_RESPONSE_REWRITE.\nWhen an HTTP request message is received by load balancer, all\nHTTP_REQUEST_REWRITE rules, if present are executed in the order they\nare applied to virtual server. And then if HTTP_FORWARDING rules\npresent, only first matching rule's action is executed, remaining rules\nare not checked. HTTP_FORWARDING rules can have only one action. If the\nrequest is forwarded to a backend server and the response goes back to\nload balancer, all HTTP_RESPONSE_REWRITE rules, if present, are executed\nin the order they are applied to the virtual server.\n",
                            "title": "Load balancer processing phase"
                        },
                        "match_conditions": {
                            "items": {
                                "$ref": "#/definitions/LbRuleCondition"
                            },
                            "type": "array",
                            "description": "A list of match conditions used to match application traffic. Multiple\nmatch conditions can be specified in one load balancer rule, each match\ncondition defines a criterion to match application traffic.\nIf no match conditions are specified, then the load balancer rule will\nalways match and it is used typically to define default rules. If more\nthan one match condition is specified, then match strategy determines\nif all conditions should match or any one condition should match for the\nload balancer rule to considered a match.\n",
                            "maxItems": 60,
                            "title": "Conditions to match application traffic"
                        },
                        "actions": {
                            "items": {
                                "$ref": "#/definitions/LbRuleAction"
                            },
                            "type": "array",
                            "description": "A list of actions to be executed at specified phase when load balancer\nrule matches. The actions are used to manipulate application traffic,\nsuch as rewrite URI of HTTP messages, redirect HTTP messages, etc.\n",
                            "maxItems": 60,
                            "title": "Actions to be executed"
                        },
                        "match_strategy": {
                            "enum": [
                                "ALL",
                                "ANY"
                            ],
                            "type": "string",
                            "description": "Strategy to define how load balancer rule is considered a match when\nmultiple match conditions are specified in one rule. If match_stragety\nis set to ALL, then load balancer rule is considered a match only if all\nthe conditions match. If match_strategy is set to ANY, then load\nbalancer rule is considered a match if any one of the conditions match.\n",
                            "title": "Strategy to match multiple conditions"
                        }
                    }
                }
            ],
            "description": "Load balancer rules allow customization of load balancing behavior using\nmatch/action rules. Currently, load balancer rules are supported for only\nlayer 7 virtual servers with application profile LbHttpProfile.\nEach application rule consists of one or more match conditions and one or\nmore actions.\nLoad balancer rules could be used by different load balancer services.\n",
            "title": "Load balancer rules"
        },
        "NodeServiceStatusProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "pids": {
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Service process ids",
                            "title": "Service process ids"
                        },
                        "runtime_state": {
                            "readOnly": true,
                            "enum": [
                                "running",
                                "stopped"
                            ],
                            "type": "string",
                            "description": "Service runtime state",
                            "title": "Service runtime state"
                        },
                        "monitor_runtime_state": {
                            "readOnly": true,
                            "enum": [
                                "running",
                                "stopped"
                            ],
                            "type": "string",
                            "description": "Service monitor runtime state",
                            "title": "Service monitor runtime state"
                        },
                        "monitor_pid": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Service monitor process id",
                            "title": "Service monitor process id"
                        }
                    }
                }
            ],
            "description": "Node service status properties",
            "title": "Node service status properties"
        },
        "InitiateClusterRestoreRequest": {
            "x-vmw-nsx-module": "ClusterRestore",
            "type": "object",
            "properties": {
                "timestamp": {
                    "description": "Timestamp of the backed-up configuration from which\nthe appliance will be restored\n",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "node_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Unique id of the backed-up configuration from which\nthe appliance will be restored\n",
                    "title": "Unique id of the backed-up configuration from which\nthe appliance will be restored\n"
                }
            }
        },
        "KnownHostParameter": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "required": [
                "host"
            ],
            "type": "object",
            "properties": {
                "host": {
                    "description": "Known host hostname or IP address",
                    "format": "hostname-or-ipv4",
                    "type": "string"
                },
                "port": {
                    "description": "Known host port",
                    "title": "Known host port",
                    "default": 22,
                    "format": "int64",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                }
            }
        },
        "UpgradeUnitGroupAggregateInfoListResult": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/UpgradeUnitGroupAggregateInfo"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Paged collection of upgrade status for upgrade unit groups",
                            "title": "Paged collection of upgrade status for upgrade unit groups"
                        }
                    }
                }
            ]
        },
        "AggregatedLogicalRouterPortCounters": {
            "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
            "type": "object",
            "properties": {
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "rx": {
                    "readOnly": true,
                    "$ref": "#/definitions/LogicalRouterPortCounters"
                },
                "tx": {
                    "readOnly": true,
                    "$ref": "#/definitions/LogicalRouterPortCounters"
                }
            }
        },
        "IpfixUpmProfileListResult": {
            "x-vmw-nsx-module": "UpmIpfix",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "UpmIpfix",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IpfixUpmProfile"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "IPFIX Profile List",
                            "title": "IPFIX Profile List"
                        }
                    }
                }
            ],
            "description": "IPFIX profile list result for query with list parameters",
            "title": "List of IPFIX Profiles"
        },
        "DeploymentConfig": {
            "discriminator": "placement_type",
            "x-vmw-nsx-module": "FabricNode",
            "required": [
                "placement_type"
            ],
            "type": "object",
            "properties": {
                "placement_type": {
                    "enum": [
                        "VsphereDeploymentConfig"
                    ],
                    "type": "string"
                }
            }
        },
        "FileThumbprint": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "required": [
                        "sha256",
                        "name",
                        "sha1"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "sha256": {
                            "type": "string",
                            "description": "File's SHA256 thumbprint",
                            "title": "File's SHA256 thumbprint"
                        },
                        "name": {
                            "type": "string",
                            "description": "File name",
                            "title": "File name"
                        },
                        "sha1": {
                            "type": "string",
                            "description": "File's SHA1 thumbprint",
                            "title": "File's SHA1 thumbprint"
                        }
                    }
                }
            ],
            "description": "File thumbprint",
            "title": "File thumbprint"
        },
        "AppProfile": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "app_profile_criteria"
                    ],
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "app_profile_category": {
                            "type": "string",
                            "description": "Category of the app profile, value could be any string that describes the profile",
                            "title": "Category of the app profile, value could be any string that describes the profile"
                        },
                        "default_app_profile": {
                            "type": "boolean",
                            "description": "True if this App Profile is a default profile (automatically created by the system)",
                            "title": "True if this App Profile is a default profile (automatically created by the system)"
                        },
                        "app_profile_criteria": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Criteria of the app profile, value could be any string or \"*\"\n(match any string)\n",
                            "title": "Criteria of the app profile, value could be any string or \"*\"\n(match any string)\n"
                        }
                    }
                }
            ],
            "description": "AppProfile details",
            "title": "AppProfile details"
        },
        "ClientSslProfileBinding": {
            "x-vmw-nsx-module": "LoadBalancer",
            "required": [
                "default_certificate_id"
            ],
            "type": "object",
            "properties": {
                "client_auth": {
                    "description": "client authentication mode",
                    "default": "IGNORE",
                    "enum": [
                        "REQUIRED",
                        "IGNORE"
                    ],
                    "type": "string"
                },
                "ssl_profile_id": {
                    "type": "string",
                    "description": "Client SSL profile defines reusable, application-independent client side\nSSL properties.\n",
                    "title": "client SSL profile identifier"
                },
                "certificate_chain_depth": {
                    "description": "authentication depth is used to set the verification depth in the client\ncertificates chain.\n",
                    "title": "the maximum traversal depth of client certificate chain",
                    "default": 3,
                    "format": "int64",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "type": "integer"
                },
                "client_auth_ca_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "If client auth type is REQUIRED, client certificate must be signed by\none of the trusted Certificate Authorities (CAs), also referred to as\nroot CAs, whose self signed certificates are specified.\n",
                    "title": "CA identifier list to verify client certificate"
                },
                "default_certificate_id": {
                    "type": "string",
                    "description": "A default certificate should be specified which will be used if the\nserver does not host multiple hostnames on the same IP address or if\nthe client does not support SNI extension.\n",
                    "title": "default service certificate identifier"
                },
                "sni_certificate_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Client-side SSL profile binding allows multiple certificates, for\ndifferent hostnames, to be bound to the same virtual server.\n",
                    "title": "SNI certificate identifier list"
                },
                "client_auth_crl_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "A Certificate Revocation List (CRL) can be specified in the client-side\nSSL profile binding to disallow compromised client certificates.\n",
                    "title": "CRL identifier list to verify client certificate"
                }
            }
        },
        "ClusterNodeConfig": {
            "x-vmw-nsx-module": "ClusterManagement",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "ClusterManagement",
                    "type": "object",
                    "properties": {
                        "manager_role": {
                            "$ref": "#/definitions/ManagementClusterRoleConfig"
                        },
                        "controller_role": {
                            "$ref": "#/definitions/ControllerClusterRoleConfig"
                        },
                        "external_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Internal identifier provided by the node",
                            "title": "Internal identifier provided by the node"
                        },
                        "appliance_mgmt_listen_addr": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The IP and port for the appliance management API service on this node",
                            "title": "The IP and port for the appliance management API service on this node"
                        }
                    }
                }
            ]
        },
        "EffectiveIPAddressMemberListResult": {
            "x-vmw-nsx-module": "NSGroup",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "NSGroup",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "description": "IPElement can be a single IP address, IP address range or a Subnet. Its\ntype can be of IPv4 or IPv6. Supported list of formats are \"192.168.1.1\",\n\"192.168.1.1-192.168.1.100\", \"192.168.0.0/24\",\n\"fe80::250:56ff:fe83:318c\",\n\"fe80::250:56ff:fe83:3181-fe80::250:56ff:fe83:318c\",\n\"fe80::250:56ff:fe83:318c/64\"\n",
                                "format": "address-or-block-or-range",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Paged Collection of effective ip addresses for the given NSGroup",
                            "title": "Paged Collection of effective ip addresses for the given NSGroup"
                        }
                    }
                }
            ]
        },
        "TransportNodeStateListResult": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/TransportNodeState"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Transport Node State Results",
                            "title": "Transport Node State Results"
                        }
                    }
                }
            ],
            "description": "Transport node state queries result",
            "title": "Transport node state queries result"
        },
        "DSService": {
            "x-vmw-nsx-module": "DistributedServices",
            "allOf": [
                {
                    "$ref": "#/definitions/ResourceReference"
                },
                {
                    "x-vmw-nsx-module": "DistributedServices",
                    "type": "object",
                    "properties": {
                        "service": {
                            "readOnly": false,
                            "title": "Distributed Service Network and Security Service element",
                            "description": "Distributed Service API accepts raw protocol and ports as part of NS service element\nin Distributed Service Rule that describes traffic corresponding to an NSService.\n",
                            "$ref": "#/definitions/NSServiceElement"
                        }
                    }
                }
            ]
        },
        "ServerSslProfileBinding": {
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "properties": {
                "server_auth_crl_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "A Certificate Revocation List (CRL) can be specified in the server-side\nSSL profile binding to disallow compromised server certificates.\n",
                    "title": "CRL identifier list to verify server certificate"
                },
                "server_auth": {
                    "description": "server authentication mode",
                    "default": "IGNORE",
                    "enum": [
                        "REQUIRED",
                        "IGNORE"
                    ],
                    "type": "string"
                },
                "certificate_chain_depth": {
                    "description": "authentication depth is used to set the verification depth in the server\ncertificates chain.\n",
                    "title": "the maximum traversal depth of server certificate chain",
                    "default": 3,
                    "format": "int64",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "type": "integer"
                },
                "client_certificate_id": {
                    "type": "string",
                    "description": "To support client authentication (load balancer acting as a client\nauthenticating to the backend server), client certificate can be\nspecified in the server-side SSL profile binding\n",
                    "title": "client certificate identifier"
                },
                "server_auth_ca_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "If server auth type is REQUIRED, server certificate must be signed by\none of the trusted Certificate Authorities (CAs), also referred to as\nroot CAs, whose self signed certificates are specified.\n",
                    "title": "CA identifier list to verify server certificate"
                },
                "ssl_profile_id": {
                    "type": "string",
                    "description": "Server SSL profile defines reusable, application-independent server side\nSSL properties.\n",
                    "title": "server SSL profile identifier"
                }
            }
        },
        "EULAContent": {
            "x-vmw-nsx-module": "EULA",
            "type": "object",
            "description": "End User License Agreement content",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "End User License Agreement content",
                    "title": "End User License Agreement content"
                }
            }
        },
        "LbHttpRequestHeader": {
            "x-vmw-nsx-module": "LoadBalancer",
            "required": [
                "header_value",
                "header_name"
            ],
            "type": "object",
            "properties": {
                "header_value": {
                    "type": "string",
                    "description": "Value of HTTP request header",
                    "title": "Value of HTTP request header"
                },
                "header_name": {
                    "type": "string",
                    "description": "Name of HTTP request header",
                    "title": "Name of HTTP request header"
                }
            }
        },
        "LogicalPortMacAddressCsvListResult": {
            "x-vmw-nsx-module": "AggSvcLogicalPort",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalPort",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalPortMacTableCsvEntry"
                            },
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "FeatureStackCollectionConfigurationList": {
            "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
            "type": "object",
            "description": "Feature stack collection configuration list result",
            "properties": {
                "results": {
                    "items": {
                        "$ref": "#/definitions/FeatureStackCollectionConfiguration"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The complete set of feature stack data collection configurations",
                    "title": "Feature stack configurations"
                }
            },
            "title": "Feature stack collection configuration list result"
        },
        "ControlConnStatus": {
            "x-vmw-nsx-module": "FabricNode",
            "type": "object",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "UP",
                        "DOWN"
                    ],
                    "type": "string",
                    "description": "Status of the control Node for e.g  UP, DOWN.",
                    "title": "Status of the control Node for e.g  UP, DOWN."
                },
                "control_node_ip": {
                    "readOnly": true,
                    "type": "string",
                    "description": "IP address of the control Node.",
                    "title": "IP address of the control Node."
                },
                "failure_status": {
                    "readOnly": true,
                    "enum": [
                        "CONNECTION_REFUSED",
                        "INCOMPLETE_HOST_CERT",
                        "INCOMPLETE_CONTROLLER_CERT",
                        "CONTROLLER_REJECTED_HOST_CERT",
                        "HOST_REJECTED_CONTROLLER_CERT",
                        "KEEP_ALIVE_TIMEOUT",
                        "OTHER_SSL_ERROR",
                        "OTHER_ERROR"
                    ],
                    "type": "string",
                    "description": "Failure status of the control Node for e.g CONNECTION_REFUSED,INCOMPLETE_HOST_CERT.",
                    "title": "Failure status of the control Node for e.g CONNECTION_REFUSED,INCOMPLETE_HOST_CERT."
                }
            }
        },
        "MigrationUnitGroup": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "required": [
                        "type"
                    ],
                    "type": "object",
                    "properties": {
                        "migration_unit_count": {
                            "readOnly": true,
                            "format": "int32",
                            "type": "integer",
                            "description": "Number of migration units in the group",
                            "title": "Count of migration units in the group"
                        },
                        "migration_units": {
                            "description": "List of migration units in the group",
                            "title": "List of migration units in the group",
                            "items": {
                                "$ref": "#/definitions/MigrationUnit"
                            },
                            "readOnly": false,
                            "maxItems": 100,
                            "type": "array"
                        },
                        "enabled": {
                            "default": true,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Flag to indicate whether migration of this group is enabled or not",
                            "title": "Flag to indicate whether migration of this group is enabled or not"
                        },
                        "type": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Component type",
                            "title": "Component type"
                        },
                        "parallel": {
                            "default": true,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Migration method to specify whether the migration is to be performed in parallel or serially",
                            "title": "Migration method to specify whether the migration is to be performed in parallel or serially"
                        },
                        "extended_configuration": {
                            "description": "Extended configuration for the group",
                            "title": "Extended configuration for the group",
                            "items": {
                                "$ref": "#/definitions/KeyValuePair"
                            },
                            "readOnly": false,
                            "maxItems": 100,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "LbActiveMonitor": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbMonitor"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "monitor_port": {
                            "description": "If the monitor port is specified, it would override pool member port\nsetting for healthcheck. A port range is not supported.\n",
                            "format": "port-or-range",
                            "type": "string"
                        },
                        "fall_count": {
                            "description": "num of consecutive checks must fail before marking it down",
                            "title": "num of consecutive checks must fail before marking it down",
                            "default": 3,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "interval": {
                            "description": "the frequency at which the system issues the monitor check (in second)",
                            "title": "the frequency at which the system issues the monitor check (in second)",
                            "default": 5,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "rise_count": {
                            "description": "num of consecutive checks must pass before marking it up",
                            "title": "num of consecutive checks must pass before marking it up",
                            "default": 3,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "timeout": {
                            "description": "the number of seconds the target has in which to respond to the monitor\nrequest\n",
                            "title": "the number of seconds the target has in which to respond to the monitor\nrequest\n",
                            "default": 15,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "ServiceInstanceListResult": {
            "x-vmw-nsx-module": "ServiceInsertion",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertion",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/BaseServiceInstance"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of the Service-Insertion ServicesInstances. The list has to be homogenous.",
                            "title": "Service-Instance list"
                        }
                    }
                }
            ],
            "description": "Service Instance List",
            "title": "Service Instance List"
        },
        "FieldsPacketData": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/PacketData"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "ip_header": {
                            "title": "The IPv4 header.",
                            "description": "The IPv4 header.",
                            "$ref": "#/definitions/Ipv4Header"
                        },
                        "eth_header": {
                            "title": "The ethernet header",
                            "description": "The ethernet header",
                            "$ref": "#/definitions/EthernetHeader"
                        },
                        "transport_header": {
                            "title": "The transport header",
                            "description": "This field contains a protocol that is above IP. It is not restricted to the 'transport' defined by the OSI model (e.g., ICMP is supported).",
                            "$ref": "#/definitions/TransportProtocolHeader"
                        },
                        "payload": {
                            "maxLength": 1336,
                            "type": "string",
                            "description": "Up to 1000 bytes of payload may be supplied (with a base64-encoded length of 1336 bytes.) Additional bytes of traceflow metadata will be appended to the payload. The payload contains any data the user wants to put after the transport header.",
                            "title": "RFC3548 compatible base64-encoded payload"
                        }
                    }
                }
            ]
        },
        "VirtualMachineTagUpdate": {
            "x-vmw-nsx-module": "Inventory",
            "required": [
                "external_id",
                "tags"
            ],
            "type": "object",
            "properties": {
                "external_id": {
                    "type": "string",
                    "description": "External id of the virtual machine to which tags are to be applied",
                    "title": "External id of the virtual machine to which tags are to be applied"
                },
                "tags": {
                    "items": {
                        "$ref": "#/definitions/Tag"
                    },
                    "type": "array",
                    "description": "List of tags to be applied to the virtual machine",
                    "title": "List of tags to be applied to the virtual machine"
                }
            }
        },
        "LbPool": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "member_group": {
                            "title": "Load balancer member setting with grouping object",
                            "description": "Load balancer pool support grouping object as dynamic pool members.\nWhen member group is defined, members setting should not be specified.\n",
                            "$ref": "#/definitions/PoolMemberGroup"
                        },
                        "snat_translation": {
                            "title": "snat translation configuration",
                            "description": "Depending on the topology, Source NAT (SNAT) may be required to ensure\ntraffic from the server destined to the client is received by the load\nbalancer. SNAT can be enabled per pool. If SNAT is not enabled for a\npool, then load balancer uses the client IP and port (spoofing) while\nestablishing connections to the servers. This is referred to as no-SNAT\nor TRANSPARENT mode.\n",
                            "$ref": "#/definitions/LbSnatTranslation"
                        },
                        "algorithm": {
                            "description": "Load balancing algorithm, configurable per pool controls how the\nincoming connections are distributed among the members.\n",
                            "default": "ROUND_ROBIN",
                            "enum": [
                                "ROUND_ROBIN",
                                "WEIGHTED_ROUND_ROBIN",
                                "LEAST_CONNECTION",
                                "WEIGHTED_LEAST_CONNECTION",
                                "IP_HASH"
                            ],
                            "type": "string"
                        },
                        "members": {
                            "items": {
                                "$ref": "#/definitions/PoolMember"
                            },
                            "type": "array",
                            "description": "Server pool consists of one or more pool members. Each pool member\nis identified, typically, by an IP address and a port.\n",
                            "title": "load balancer pool members"
                        },
                        "passive_monitor_id": {
                            "type": "string",
                            "description": "Passive healthchecks are disabled by default and can be enabled by\nattaching a passive health monitor to a server pool.\nEach time a client connection to a pool member fails, its failed count\nis incremented. For pools bound to L7 virtual servers, a connection is\nconsidered to be failed and failed count is incremented if any TCP\nconnection errors (e.g. TCP RST or failure to send data) or SSL\nhandshake failures occur. For pools bound to L4 virtual servers, if no\nresponse is received to a TCP SYN sent to the pool member or if a TCP\nRST is received in response to a TCP SYN, then the pool member is\nconsidered to have failed and the failed count is incremented.\n",
                            "title": "passive monitor identifier"
                        },
                        "tcp_multiplexing_number": {
                            "description": "The maximum number of TCP connections per pool that are idly kept alive\nfor sending future client requests.\n",
                            "title": "maximum number of TCP connections for multiplexing",
                            "default": 6,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "active_monitor_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "In case of active healthchecks, load balancer itself initiates new\nconnections (or sends ICMP ping) to the servers periodically to check\ntheir health, completely independent of any data traffic. Active\nhealthchecks are disabled by default and can be enabled for a server\npool by binding a health monitor to the pool. Currently, only one active\nhealth monitor can be configured per server pool.\n",
                            "title": "active monitor identifier list"
                        },
                        "tcp_multiplexing_enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "TCP multiplexing allows the same TCP connection between load balancer\nand the backend server to be used for sending multiple client requests\nfrom different client TCP connections.\n",
                            "title": "TCP multiplexing enable flag"
                        },
                        "min_active_members": {
                            "description": "A pool is considered active if there are at least certain\nminimum number of members.\n",
                            "title": "minimum number of active pool members to consider pool as active",
                            "default": 1,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "PasswordAuthenticationScheme": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/AuthenticationScheme"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "required": [
                        "username",
                        "scheme_name"
                    ],
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "User name to authenticate with",
                            "title": "User name to authenticate with"
                        },
                        "scheme_name": {
                            "enum": [
                                "password"
                            ],
                            "type": "string",
                            "description": "Authentication scheme name",
                            "title": "Authentication scheme name"
                        },
                        "password": {
                            "type": "string",
                            "description": "Password to authenticate with",
                            "title": "Password to authenticate with"
                        }
                    }
                }
            ]
        },
        "PBRSection": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "rule_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of rules in this section.",
                            "title": "Rule count"
                        }
                    }
                }
            ]
        },
        "PacketCaptureSession": {
            "description": "Packet capture response information",
            "title": "Packet capture response information",
            "required": [
                "sessionid",
                "request",
                "sessionstatus"
            ],
            "x-vmw-nsx-module": "PacketCapture",
            "type": "object",
            "properties": {
                "sessionid": {
                    "type": "string",
                    "description": "Packet capture session id",
                    "title": "Packet capture session id"
                },
                "filelocation": {
                    "type": "string",
                    "description": "Packet capture file location",
                    "title": "Packet capture file location"
                },
                "filesize": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Packet capture file Size in bytes",
                    "title": "Packet capture file Size in bytes"
                },
                "sessionname": {
                    "type": "string",
                    "description": "Packet capture session name",
                    "title": "Packet capture session name"
                },
                "errormsg": {
                    "type": "string",
                    "description": "Error messasge in capture",
                    "title": "Error messasge in capture"
                },
                "endtime": {
                    "type": "integer",
                    "description": "Timestamp when session was stopped in epoch millisecond",
                    "format": "int64"
                },
                "request": {
                    "title": "Packet capture request",
                    "description": "Packet capture request",
                    "$ref": "#/definitions/PacketCaptureRequest"
                },
                "starttime": {
                    "type": "integer",
                    "description": "Timestamp when session was created in epoch millisecond",
                    "format": "int64"
                },
                "sessionstatus": {
                    "enum": [
                        "CREATED",
                        "STARTED",
                        "STOPPED",
                        "FINISHED",
                        "ERROR"
                    ],
                    "type": "string",
                    "description": "Packet capture session status",
                    "title": "Packet capture session status"
                }
            }
        },
        "TransportZone": {
            "x-vmw-nsx-module": "TransportZone",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "TransportZone",
                    "required": [
                        "transport_type"
                    ],
                    "type": "object",
                    "properties": {
                        "transport_type": {
                            "description": "The transport type of this transport zone.",
                            "enum": [
                                "OVERLAY",
                                "VLAN"
                            ],
                            "type": "string"
                        },
                        "host_switch_name": {
                            "default": "nsxDefaultHostSwitch",
                            "type": "string",
                            "description": "If this name is unset or empty then the default host switch name will be used.",
                            "title": "Name of the host switch on all transport nodes in this transport zone that will be used to run NSX network traffic."
                        },
                        "host_switch_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "the host switch id generated by the system.",
                            "title": "the host switch id generated by the system."
                        },
                        "host_switch_mode": {
                            "description": "STANDARD mode applies to all the hypervisors. ENS mode stands for Enhanced Networking Stack. This feature is only available for ESX hypervisor. It is not available on KVM, EDGE and Public Cloud Gateway etc. When a Transport Zone mode is set to ENS, only Transport Nodes of type ESX can participate in such a Transport Zone.",
                            "title": "Operational mode of Transport Zone.",
                            "default": "STANDARD",
                            "enum": [
                                "STANDARD",
                                "ENS"
                            ],
                            "readOnly": false,
                            "type": "string"
                        },
                        "nested_nsx": {
                            "default": false,
                            "type": "boolean",
                            "description": "The flag only need to be set in nested NSX environment.",
                            "title": "Flag to indicate if transport nodes in this transport zone are connected through nested NSX."
                        },
                        "uplink_teaming_policy_names": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "The names of switching uplink teaming policies that all transport nodes in this transport zone must support. An exception will be thrown if a transport node within the transport zone does not support a named teaming policy. The user will need to first ensure all trasnport nodes support the desired named teaming policy before assigning it to the transport zone. If the field is not specified, the host switch's default teaming policy will be used.",
                            "title": "Names of the switching uplink teaming policies that are supported by this transport zone."
                        },
                        "transport_zone_profile_ids": {
                            "items": {
                                "$ref": "#/definitions/TransportZoneProfileTypeIdEntry"
                            },
                            "type": "array",
                            "description": "Identifiers of the transport zone profiles associated with this TransportZone.",
                            "title": "Identifiers of the transport zone profiles associated with this TransportZone."
                        }
                    }
                }
            ]
        },
        "PortMirroringSession": {
            "x-vmw-nsx-module": "PortMirroring",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "PortMirroring",
                    "required": [
                        "direction",
                        "mirror_sources",
                        "mirror_destination"
                    ],
                    "type": "object",
                    "properties": {
                        "direction": {
                            "description": "Port mirroring session direction",
                            "enum": [
                                "INGRESS",
                                "EGRESS",
                                "BIDIRECTIONAL"
                            ],
                            "type": "string"
                        },
                        "encapsulation_vlan_id": {
                            "type": "integer",
                            "description": "Only for Remote SPAN Port Mirror.",
                            "format": "int64"
                        },
                        "session_type": {
                            "description": "If this property is unset, this session will be treated as\nLocalPortMirrorSession.\n",
                            "default": "LocalPortMirrorSession",
                            "enum": [
                                "LogicalPortMirrorSession",
                                "UplinkPortMirrorSession",
                                "RspanSrcMirrorSession",
                                "RspanDstMirrorSession",
                                "LocalPortMirrorSession",
                                "LogicalLocalPortMirrorSession",
                                "L3PortMirrorSession"
                            ],
                            "type": "string"
                        },
                        "snap_length": {
                            "description": "If this property is set, the packet will be truncated to the provided\nlength. If this property is unset, entire packet will be mirrored.\n",
                            "format": "int64",
                            "title": "Maximum packet length for packet truncation",
                            "maximum": 65535,
                            "minimum": 60,
                            "type": "integer"
                        },
                        "mirror_sources": {
                            "description": "Mirror sources",
                            "title": "Mirror sources",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/MirrorSource"
                            },
                            "maxItems": 6,
                            "type": "array"
                        },
                        "preserve_original_vlan": {
                            "default": false,
                            "type": "boolean",
                            "description": "Only for Remote SPAN Port Mirror. Whether to preserve original VLAN.",
                            "title": "Only for Remote SPAN Port Mirror. Whether to preserve original VLAN."
                        },
                        "mirror_destination": {
                            "title": "Mirror destination",
                            "description": "Mirror destination",
                            "$ref": "#/definitions/MirrorDestination"
                        }
                    }
                }
            ]
        },
        "LogicalRouterCentralizedServicePort": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "allOf": [
                {
                    "$ref": "#/definitions/LogicalRouterPort"
                },
                {
                    "required": [
                        "subnets"
                    ],
                    "x-vmw-nsx-module": "LogicalRouterPorts",
                    "type": "object",
                    "properties": {
                        "enable_netx": {
                            "default": false,
                            "type": "boolean",
                            "description": "Port is exclusively used for N-S service insertion",
                            "title": "Port is exclusively used for N-S service insertion"
                        },
                        "linked_logical_switch_port_id": {
                            "title": "Reference to the logical switch port to connect to",
                            "description": "Reference to the logical switch port to connect to",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "urpf_mode": {
                            "description": "Unicast Reverse Path Forwarding mode",
                            "default": "STRICT",
                            "enum": [
                                "NONE",
                                "STRICT"
                            ],
                            "type": "string"
                        },
                        "subnets": {
                            "description": "Logical router port subnets",
                            "title": "Logical router port subnets",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IPSubnet"
                            },
                            "maxItems": 1,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "This port can be configured on both TIER0 and TIER1 logical router.\nPort can be connected to VLAN or overlay logical switch.\nUnlike downlink port it does not participate in distributed routing and\nhosted on all edge cluster members associated with logical router.\nStateful services can be applied on this port.\n",
            "title": "Port to connect VLAN based network or overlay logical switch"
        },
        "EdgeClusterMemberListResult": {
            "x-vmw-nsx-module": "EdgeClusters",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "EdgeClusters",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/EdgeClusterMember"
                            },
                            "type": "array",
                            "description": "edge cluster member list results",
                            "title": "edge cluster member list results"
                        }
                    }
                }
            ]
        },
        "LbPoolStatusListResult": {
            "x-vmw-nsx-module": "AggSvcLb",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLb",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbPoolStatus"
                            },
                            "type": "array",
                            "description": "paginated status list of pools",
                            "title": "paginated status list of pools"
                        }
                    }
                }
            ]
        },
        "NodeInterfaceStatisticsProperties": {
            "x-vmw-nsx-module": "ApplianceStats",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "ApplianceStats",
                    "type": "object",
                    "properties": {
                        "tx_dropped": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of packets dropped",
                            "title": "Number of packets dropped"
                        },
                        "rx_packets": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of packets received",
                            "title": "Number of packets received"
                        },
                        "tx_carrier": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of carrier losses detected",
                            "title": "Number of carrier losses detected"
                        },
                        "rx_bytes": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of bytes received",
                            "title": "Number of bytes received"
                        },
                        "tx_errors": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of transmit errors",
                            "title": "Number of transmit errors"
                        },
                        "interface_id": {
                            "type": "string",
                            "description": "Interface ID",
                            "title": "Interface ID"
                        },
                        "tx_colls": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of collisions detected",
                            "title": "Number of collisions detected"
                        },
                        "rx_frame": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of framing errors",
                            "title": "Number of framing errors"
                        },
                        "rx_errors": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of receive errors",
                            "title": "Number of receive errors"
                        },
                        "tx_bytes": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of bytes transmitted",
                            "title": "Number of bytes transmitted"
                        },
                        "rx_dropped": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of packets dropped",
                            "title": "Number of packets dropped"
                        },
                        "tx_packets": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of packets transmitted",
                            "title": "Number of packets transmitted"
                        },
                        "source": {
                            "description": "Source of status data.",
                            "enum": [
                                "realtime",
                                "cached"
                            ],
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "Node network interface statistic properties",
            "title": "Node network interface statistic properties"
        },
        "PortMirroringSwitchingProfile": {
            "x-vmw-nsx-module": "PortMirroringSwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseSwitchingProfile"
                },
                {
                    "x-vmw-nsx-module": "PortMirroringSwitchingProfile",
                    "type": "object",
                    "properties": {
                        "snap_length": {
                            "description": "If this property not set, original package will not be truncated.",
                            "format": "int64",
                            "title": "Snap length for package truncation",
                            "maximum": 65535,
                            "minimum": 60,
                            "type": "integer"
                        },
                        "direction": {
                            "description": "port mirroring direction",
                            "enum": [
                                "INGRESS",
                                "EGRESS",
                                "BIDIRECTIONAL"
                            ],
                            "type": "string"
                        },
                        "key": {
                            "format": "int64",
                            "type": "integer",
                            "description": "User-configurable 32-bit key",
                            "title": "User-configurable 32-bit key"
                        },
                        "destinations": {
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "List of destination addresses",
                            "maxItems": 3,
                            "title": "List of destination addresses"
                        }
                    }
                }
            ]
        },
        "HostSwitchProfilesListResult": {
            "x-vmw-nsx-module": "BaseHostSwitchProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "BaseHostSwitchProfile",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/BaseHostSwitchProfile"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "HostSwitch Profile Results",
                            "title": "HostSwitch Profile Results"
                        }
                    }
                }
            ],
            "description": "HostSwitch Profile queries result",
            "title": "HostSwitch Profile queries result"
        },
        "IpfixDfwTemplateParameters": {
            "x-vmw-nsx-module": "Ipfix",
            "type": "object",
            "description": "This entity represents the flow parameters which are exported.\n",
            "properties": {
                "source_icmp_type": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Type of the IPv4 ICMP message.\n"
                },
                "icmp_code": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Code of the IPv4 ICMP message.\n"
                },
                "destination_transport_port": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "The destination transport port of a monitored network flow.\n"
                },
                "octet_delta_count": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "The number of octets since the previous report (if any) in incoming\npackets for this flow at the observation point. The number of octets\ninclude IP header(s) and payload.\n"
                },
                "vif_uuid": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "VIF UUID - enterprise specific Information Element that uniquely identifies VIF.\n"
                },
                "protocol_identifier": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "The value of the protocol number in the IP packet header.\n"
                },
                "firewall_event": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Five valid values are allowed: 1. Flow Created. 2. Flow Deleted.\n3. Flow Denied. 4. Flow Alert (not used in DropKick implementation).\n5. Flow Update.\n"
                },
                "flow_direction": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Two valid values are allowed: 1. 0x00: igress flow to VM. 2. 0x01:\negress flow from VM.\n"
                },
                "flow_end": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "The absolute timestamp (seconds) of the last packet of this flow.\n"
                },
                "source_transport_port": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "The source transport port of a monitored network flow.\n"
                },
                "packet_delta_count": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "The number of incoming packets since the previous report (if any)\nfor this flow at the observation point.\n"
                },
                "destination_address": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "The destination IP address of a monitored network flow.\n"
                },
                "source_address": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "The source IP address of a monitored network flow.\n"
                },
                "rule_id": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Firewall rule Id - enterprise specific Information Element that uniquely identifies\nfirewall rule.\n"
                },
                "flow_start": {
                    "default": true,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "The absolute timestamp (seconds) of the first packet of this flow.\n"
                }
            },
            "title": "IPFIX DFW Template Parameters"
        },
        "IPSecVPNSessionListResult": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNSession"
                            },
                            "type": "array",
                            "description": "IPSec VPN sessions list result",
                            "title": "IPSec VPN sessions list result"
                        }
                    }
                }
            ],
            "description": "List all the IPSec VPN sessions.",
            "title": "List IPSec VPN sessions"
        },
        "MetadataProxyStatistics": {
            "x-vmw-nsx-module": "AggSvcMetadataProxy",
            "required": [
                "timestamp",
                "metadata_proxy_id"
            ],
            "type": "object",
            "properties": {
                "timestamp": {
                    "type": "integer",
                    "description": "timestamp of the statistics",
                    "format": "int64"
                },
                "statistics": {
                    "items": {
                        "$ref": "#/definitions/MetadataProxyStatisticsPerLogicalSwitch"
                    },
                    "type": "array",
                    "description": "metadata proxy statistics per logical switch",
                    "title": "metadata proxy statistics per logical switch"
                },
                "metadata_proxy_id": {
                    "type": "string",
                    "description": "metadata proxy uuid",
                    "title": "metadata proxy uuid"
                }
            }
        },
        "TraceflowObservationDelivered": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/TraceflowObservation"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "lport_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The name of the logical port into which the traceflow packet was delivered",
                            "title": "The name of the logical port into which the traceflow packet was delivered"
                        },
                        "vlan_id": {
                            "type": "integer",
                            "description": "VLAN on bridged network",
                            "format": "int64"
                        },
                        "lport_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the logical port into which the traceflow packet was delivered",
                            "title": "The id of the logical port into which the traceflow packet was delivered"
                        }
                    }
                }
            ]
        },
        "ForwarderZone": {
            "x-vmw-nsx-module": "DnsForwarder",
            "required": [
                "upstream_servers"
            ],
            "type": "object",
            "properties": {
                "upstream_servers": {
                    "description": "Ip address of the upstream dns servers the dns forwarder accesses.\n",
                    "title": "Ips of upsteam dns servers",
                    "minItems": 1,
                    "items": {
                        "description": "IPv4 address",
                        "format": "ipv4",
                        "type": "string"
                    },
                    "maxItems": 3,
                    "type": "array"
                },
                "source_ip": {
                    "description": "The source ip used by the fowarder of the zone. If no source ip\nspecified, the ip address of listener of the dns forwarder will\nbe used.\n",
                    "format": "ipv4",
                    "type": "string"
                }
            }
        },
        "BgpConfig": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "type": "object",
                    "properties": {
                        "as_number": {
                            "description": "This is a deprecated property, Please use 'as_num' instead.",
                            "title": "Autonomous System Number",
                            "format": "int64",
                            "maximum": 4294967296,
                            "x-deprecated": true,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "graceful_restart": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to enable graceful restart",
                            "title": "Flag to enable graceful restart"
                        },
                        "as_num": {
                            "type": "string",
                            "description": "4 Byte ASN in ASPLAIN/ASDOT Format",
                            "title": "4 Byte ASN in ASPLAIN/ASDOT Format"
                        },
                        "enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "Flag to enable this configuration",
                            "title": "Flag to enable this configuration"
                        },
                        "route_aggregation": {
                            "description": "List of routes to be aggregated",
                            "title": "List of routes to be aggregated",
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/BgpRouteAggregation"
                            },
                            "maxItems": 1000,
                            "type": "array"
                        },
                        "ecmp": {
                            "default": true,
                            "type": "boolean",
                            "description": "Flag to enable ECMP",
                            "title": "Flag to enable ECMP"
                        }
                    }
                }
            ]
        },
        "ComputeCollectionNetworkInterfacesListResult": {
            "x-vmw-nsx-module": "InventoryCmObj",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "InventoryCmObj",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DiscoveredNodeNetworkInterfaces"
                            },
                            "type": "array",
                            "description": "List of discovered node with network interfaces",
                            "title": "Discovered node network interfaces"
                        }
                    }
                }
            ],
            "description": "List of network interfaces for all discovered nodes in compute collection",
            "title": "ComputeCollection Interfaces List Result"
        },
        "UpgradeHistoryList": {
            "x-vmw-nsx-module": "UpgradeTypes",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "UpgradeTypes",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/UpgradeHistory"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Upgrade history list",
                            "title": "Upgrade history list"
                        }
                    }
                }
            ]
        },
        "BridgeClusterNode": {
            "description": "Bridge transport node",
            "title": "Bridge transport node",
            "required": [
                "transport_node_id"
            ],
            "x-vmw-nsx-module": "BridgeCluster",
            "type": "object",
            "properties": {
                "ha_mac": {
                    "description": "MAC address used for HA protocol",
                    "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                    "readOnly": true,
                    "type": "string"
                },
                "transport_node_id": {
                    "maxLength": 36,
                    "type": "string",
                    "description": "UUID of the transport node",
                    "title": "UUID of the transport node"
                }
            }
        },
        "L2VPNPerLSTrafficStatistics": {
            "x-vmw-nsx-module": "L2VPNStatistics",
            "type": "object",
            "description": "Traffic statistics for a logical switch.",
            "properties": {
                "packets_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of outgoing packets.",
                    "title": "Packets out"
                },
                "packets_receive_error": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming packets dropped.",
                    "title": "Packets recieved error"
                },
                "bytes_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming bytes.",
                    "title": "Bytes in"
                },
                "bum_packets_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming Broadcast, Unknown unicast and Multicast (BUM) packets.",
                    "title": "Broadcast, Unknown unicast and Multicast (BUM) packets in"
                },
                "bum_bytes_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of outgoing Broadcast, Unknown unicast and Multicast (BUM) bytes.",
                    "title": "Broadcast, Unknown unicast and Multicast (BUM) bytes out"
                },
                "logical_switch": {
                    "readOnly": true,
                    "title": "Logical switch",
                    "description": "Logical switch",
                    "$ref": "#/definitions/ResourceReference"
                },
                "bytes_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of outgoing bytes.",
                    "title": "Bytes out"
                },
                "packets_sent_error": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of packets dropped while sending for any reason.",
                    "title": "Packets sent error"
                },
                "bum_packets_out": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of outgoing Broadcast, Unknown unicast and Multicast (BUM) packets.",
                    "title": "Broadcast, Unknown unicast and Multicast (BUM) packets out"
                },
                "packets_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming packets.",
                    "title": "Packets in"
                },
                "bum_bytes_in": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of incoming Broadcast, Unknown unicast and Multicast (BUM) bytes.",
                    "title": "Broadcast, Unknown unicast and Multicast (BUM) bytes in"
                }
            },
            "title": "Traffic statistics per logical switch"
        },
        "TransportNodeTemplateListResult": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ComputeCollectionTransportNodeTemplate"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Compute collection transport node template results",
                            "title": "Compute collection transport node template results"
                        }
                    }
                }
            ],
            "description": "Compute collection transport node template list result",
            "title": "Compute collection transport node template list result"
        },
        "MigrationUnitStatusListResult": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MigrationUnitStatus"
                            },
                            "type": "array",
                            "description": "Paged Collection of migration units status",
                            "title": "Paged Collection of migration units status"
                        }
                    }
                }
            ]
        },
        "NetworkMigrationSpecListResult": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NetworkMigrationSpec"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Network migration specification template results",
                            "title": "Network migration specification template results"
                        }
                    }
                }
            ],
            "description": "Network migration specification template list result",
            "title": "Network migration specification template list result"
        },
        "DhcpStaticBinding": {
            "x-vmw-nsx-module": "Dhcp",
            "allOf": [
                {
                    "$ref": "#/definitions/IpAllocationBase"
                },
                {
                    "x-vmw-nsx-module": "Dhcp",
                    "required": [
                        "ip_address",
                        "mac_address"
                    ],
                    "type": "object",
                    "properties": {
                        "ip_address": {
                            "description": "ip addres",
                            "format": "ip",
                            "type": "string"
                        },
                        "host_name": {
                            "format": "hostname",
                            "type": "string",
                            "description": "host name",
                            "title": "host name"
                        },
                        "mac_address": {
                            "description": "mac address",
                            "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "SIMacLearningCounters": {
            "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
            "type": "object",
            "properties": {
                "macs_learned": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of MACs learned",
                    "title": "Number of MACs learned"
                },
                "mac_not_learned_packets_dropped": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of packets with unknown source MAC address that are dropped without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_DROP.",
                    "title": "Number of dropped packets with unknown source MAC address."
                },
                "mac_not_learned_packets_allowed": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of packets with unknown source MAC address that are dispatched without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_ALLOW.",
                    "title": "Number of dispatched packets with unknown source MAC address."
                }
            }
        },
        "LogicalPortMacTableCsvEntry": {
            "x-vmw-nsx-module": "AggSvcLogicalPort",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvRecord"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalPort",
                    "required": [
                        "mac_type",
                        "mac_address"
                    ],
                    "type": "object",
                    "properties": {
                        "mac_type": {
                            "description": "The type of the MAC address",
                            "enum": [
                                "STATIC",
                                "LEARNED"
                            ],
                            "type": "string"
                        },
                        "mac_address": {
                            "type": "string",
                            "description": "The MAC address",
                            "title": "The MAC address"
                        }
                    }
                }
            ]
        },
        "RoleBindingListResult": {
            "x-vmw-nsx-module": "AAA",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AAA",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/RoleBinding"
                            },
                            "type": "array",
                            "description": "List results",
                            "title": "List results"
                        }
                    }
                }
            ]
        },
        "LbHttpRedirectAction": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleAction"
                },
                {
                    "required": [
                        "redirect_status",
                        "redirect_url"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "redirect_status": {
                            "type": "string",
                            "description": "HTTP response status code",
                            "title": "HTTP response status code"
                        },
                        "redirect_url": {
                            "type": "string",
                            "description": "The URL that the HTTP request is redirected to",
                            "title": "The URL that the HTTP request is redirected to"
                        }
                    }
                }
            ],
            "description": "This action is used to redirect HTTP request messages to a new URL. The\nreply_status value specified in this action is used as the status code of\nHTTP response message which is sent back to client (Normally a browser).\nThe HTTP status code for redirection is 3xx, for example, 301, 302, 303,\n307, etc. The redirect_url is the new URL that the HTTP request message is\nredirected to. Normally browser will send another HTTP request to the new\nURL after receiving a redirection response message.\nCaptured variables and built-in variables can be used in redirect_url field.\nFor example, to redirect all HTTP requests to HTTPS requests for a virtual\nserver. We create an LbRule without any conditions, add an\nLbHttpRedirectAction to the rule. Set the\nredirect_url field of the LbHttpRedirectAction to:\n  https://$_host$_request_uri\nAnd set redirect_status to \"302\", which means found. This rule will\nredirect all HTTP requests to HTTPS server port on the same host.\n",
            "title": "Action to redirect HTTP request messages"
        },
        "PacketCaptureRequest": {
            "description": "This type is used to create packet request on give node. Need to specify related parameters according to the capture point.",
            "title": "Packet capture request information",
            "required": [
                "cappoint",
                "capsource"
            ],
            "x-vmw-nsx-module": "PacketCapture",
            "type": "object",
            "properties": {
                "node": {
                    "type": "string",
                    "description": "Define the transport node to capture data.",
                    "title": "Packet capture node id"
                },
                "cappoint": {
                    "enum": [
                        "VNIC",
                        "VMKNIC",
                        "VMNIC",
                        "VDRPORT",
                        "DVFILTER",
                        "LOGICALPORT",
                        "VIF"
                    ],
                    "type": "string",
                    "description": "Define the point to capture data.",
                    "title": "Packet capture point"
                },
                "capduration": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Define the packet capture duration time. After the capture duration time, the capture process will stop working.",
                    "title": "Packet capture duration time in seconds"
                },
                "capamount": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Define the packet capture amount size.",
                    "title": "Packet capture amount"
                },
                "capsource": {
                    "enum": [
                        "CLI",
                        "UI"
                    ],
                    "type": "string",
                    "description": "This type is used to differenite the incoming request from CLI/UI.",
                    "title": "Packet capture source type"
                },
                "filtertype": {
                    "enum": [
                        "PRE",
                        "POST"
                    ],
                    "type": "string",
                    "description": "Define the capture filter type. Support PRE/POST mode.",
                    "title": "Packet capture dvfilter stage type"
                },
                "direction": {
                    "enum": [
                        "INPUT",
                        "OUTPUT",
                        "DUAL"
                    ],
                    "type": "string",
                    "description": "Define the capture direction. Support three types INPUT/OUTPUT/DUAL.",
                    "title": "Packet capture direction type"
                },
                "capfilesize": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Define the packet capture file size limit.",
                    "title": "Packet capture file size limit"
                },
                "options": {
                    "title": "Packet capture options",
                    "description": "Define the packet capture additional options to filter the capture data.",
                    "$ref": "#/definitions/PacketCaptureOptionList"
                },
                "streamport": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Set the stream port to receive the capture packet.",
                    "title": "Packet capture Streaming port"
                },
                "caprate": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Define the rate of packet capture process.",
                    "title": "Packet capture rate"
                },
                "capvalue": {
                    "type": "string",
                    "description": "Define the capture value of given capture point.",
                    "title": "Packet capture point value"
                },
                "streamaddress": {
                    "type": "string",
                    "description": "Set the stream address to receive the capture packet.",
                    "title": "Packet capture Streaming address"
                },
                "capmode": {
                    "enum": [
                        "STANDALONE",
                        "STREAM"
                    ],
                    "type": "string",
                    "description": "Define the capture streaming mode. The STREAM mode will send the data to given stream address and port. And the STANDALONE mode will save the capture file in local folder.",
                    "title": "Packet Capture streaming mode"
                }
            }
        },
        "LogicalRouterUpLinkPort": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "allOf": [
                {
                    "$ref": "#/definitions/LogicalRouterPort"
                },
                {
                    "x-vmw-nsx-module": "LogicalRouterPorts",
                    "required": [
                        "subnets",
                        "edge_cluster_member_index"
                    ],
                    "type": "object",
                    "properties": {
                        "subnets": {
                            "description": "Logical router port subnets",
                            "title": "Logical router port subnets",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IPSubnet"
                            },
                            "maxItems": 1,
                            "type": "array"
                        },
                        "linked_logical_switch_port_id": {
                            "title": "Reference to the logical switch port to connect to",
                            "description": "Reference to the logical switch port to connect to",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "edge_cluster_member_index": {
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "type": "array",
                            "description": "Member index of the edge node on the cluster",
                            "title": "Member index of the edge node on the cluster"
                        },
                        "urpf_mode": {
                            "description": "Unicast Reverse Path Forwarding mode",
                            "default": "STRICT",
                            "enum": [
                                "NONE",
                                "STRICT"
                            ],
                            "type": "string"
                        },
                        "mac_address": {
                            "readOnly": true,
                            "type": "string",
                            "description": "MAC address",
                            "title": "MAC address"
                        },
                        "mtu": {
                            "description": "Maximum transmission unit specifies the size of the largest packet that a network protocol can transmit.",
                            "title": "Maximum transmission unit (MTU)",
                            "default": 1500,
                            "format": "int64",
                            "maximum": 9000,
                            "minimum": 64,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "IPSetListResult": {
            "x-vmw-nsx-module": "IPSet",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "IPSet",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IPSet"
                            },
                            "type": "array",
                            "description": "IPSet list results",
                            "title": "IPSet list results"
                        }
                    }
                }
            ],
            "description": "Paged collection of IPSets",
            "title": "Paged collection of IPSets"
        },
        "HostAggregateInfoListResult": {
            "x-vmw-nsx-module": "NsxQuery",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "NsxQuery",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/HostAggregateInfo"
                            },
                            "type": "array",
                            "description": "Host Aggregate Info Results",
                            "title": "Host Aggregate Info Results"
                        }
                    }
                }
            ],
            "description": "Host aggregate state list result",
            "title": "Host aggregate state list result"
        },
        "DataTypeCollectionConfiguration": {
            "description": "Data type collection configuration",
            "title": "Data type collection configuration",
            "required": [
                "collection_frequency",
                "data_type"
            ],
            "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
            "type": "object",
            "properties": {
                "collection_frequency": {
                    "description": "The frequency in seconds at which data is collected",
                    "format": "int64",
                    "title": "Data Collection Frequency In Seconds",
                    "maximum": 86400,
                    "minimum": 15,
                    "type": "integer"
                },
                "data_type": {
                    "enum": [
                        "STATUS",
                        "STATISTICS"
                    ],
                    "type": "string",
                    "description": "Defines the type of data being collected",
                    "title": "Data type"
                }
            }
        },
        "LogicalRouterLoopbackPort": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "allOf": [
                {
                    "$ref": "#/definitions/LogicalRouterPort"
                },
                {
                    "x-vmw-nsx-module": "LogicalRouterPorts",
                    "required": [
                        "subnets",
                        "edge_cluster_member_index"
                    ],
                    "type": "object",
                    "properties": {
                        "subnets": {
                            "description": "Loopback port subnets",
                            "title": "Loopback port subnets",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IPSubnet"
                            },
                            "maxItems": 1,
                            "type": "array"
                        },
                        "edge_cluster_member_index": {
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "type": "array",
                            "description": "Member index of the edge node on the cluster",
                            "title": "Member index of the edge node on the cluster"
                        }
                    }
                }
            ]
        },
        "X509Certificate": {
            "x-vmw-nsx-module": "CertificateManager",
            "type": "object",
            "properties": {
                "rsa_public_key_modulus": {
                    "readOnly": true,
                    "type": "string",
                    "description": "An RSA public key is made up of the modulus and the public exponent. Modulus is wrap around number"
                },
                "dsa_public_key_y": {
                    "readOnly": true,
                    "type": "string",
                    "description": "One of the DSA cryptogaphic algorithm's strength parameters"
                },
                "is_ca": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "True if this is a CA certificate"
                },
                "issuer": {
                    "readOnly": true,
                    "type": "string",
                    "description": "the certificate issuers complete distinguished name"
                },
                "not_after": {
                    "description": "the time in epoch milliseconds at which the certificate becomes invalid",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "signature": {
                    "readOnly": true,
                    "type": "string",
                    "description": "the signature value(the raw signature bits) used for signing and validate the cert"
                },
                "dsa_public_key_q": {
                    "readOnly": true,
                    "type": "string",
                    "description": "One of the DSA cryptogaphic algorithm's strength parameters, sub-prime"
                },
                "dsa_public_key_p": {
                    "readOnly": true,
                    "type": "string",
                    "description": "One of the DSA cryptogaphic algorithm's strength parameters, prime"
                },
                "rsa_public_key_exponent": {
                    "readOnly": true,
                    "type": "string",
                    "description": "An RSA public key is made up of the modulus and the public exponent. Exponent is a power number"
                },
                "public_key_algo": {
                    "readOnly": true,
                    "enum": [
                        "RSA",
                        "DSA"
                    ],
                    "type": "string",
                    "description": "Cryptographic algorithm used by the public key for data encryption"
                },
                "is_valid": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "True if this certificate is valid"
                },
                "issuer_cn": {
                    "readOnly": true,
                    "type": "string",
                    "description": "the certificate issuer's common name"
                },
                "version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Certificate version (default v1)"
                },
                "subject_cn": {
                    "readOnly": true,
                    "type": "string",
                    "description": "the certificate owner's common name"
                },
                "signature_algorithm": {
                    "readOnly": true,
                    "type": "string",
                    "description": "the algorithm used by the Certificate Authority to sign the certificate"
                },
                "serial_number": {
                    "readOnly": true,
                    "type": "string",
                    "description": "certificate's serial number"
                },
                "dsa_public_key_g": {
                    "readOnly": true,
                    "type": "string",
                    "description": "One of the DSA cryptogaphic algorithm's strength parameters, base"
                },
                "public_key_length": {
                    "readOnly": true,
                    "type": "integer",
                    "description": "size measured in bits of the public/private keys used in a cryptographic algorithm",
                    "format": "int64"
                },
                "not_before": {
                    "description": "the time in epoch milliseconds at which the certificate becomes valid",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "subject": {
                    "readOnly": true,
                    "type": "string",
                    "description": "the certificate owners complete distinguished name"
                }
            }
        },
        "FeatureStackCollectionConfiguration": {
            "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "feature_stack_name"
                    ],
                    "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
                    "type": "object",
                    "properties": {
                        "feature_stack_name": {
                            "type": "string",
                            "description": "The name of the feature stack",
                            "title": "Feature stack name"
                        },
                        "client_type_collection_configurations": {
                            "items": {
                                "$ref": "#/definitions/ClientTypeCollectionConfiguration"
                            },
                            "type": "array",
                            "description": "The set of client type data collection configurations",
                            "title": "Client type collection configurations"
                        }
                    }
                }
            ],
            "description": "HPM feature stack data collection frequency configuration",
            "title": "HPM feature stack data collection frequency configuration"
        },
        "L2VpnTunnelEncapsulation": {
            "x-vmw-nsx-module": "L2VPN",
            "type": "object",
            "description": "L2VPN tunnel encapsulation config",
            "properties": {
                "local_endpoint_ip": {
                    "description": "IP Address of the tunnel port. The IP are allocated from L2VpnService logical_tap_ip_pool. All sessions on same L2VpnService get the same local_endpoint_ip.",
                    "format": "ipv4",
                    "type": "string"
                },
                "protocol": {
                    "default": "GRE",
                    "enum": [
                        "GRE"
                    ],
                    "type": "string",
                    "description": "Encapsulation protocol used by the tunnel",
                    "title": "Encapsulation protocol"
                },
                "peer_endpoint_ip": {
                    "description": "IP Address of the peer tunnel port. The IP are allocated from L2VpnService logical_tap_ip_pool.",
                    "format": "ipv4",
                    "type": "string"
                }
            },
            "title": "L2VPN tunnel encapsulation config"
        },
        "PortConnectionTunnel": {
            "description": "Tunnel information between two given transport nodes",
            "title": "Tunnel information between two given transport nodes",
            "required": [
                "src_node_id",
                "tunnel_properties"
            ],
            "x-vmw-nsx-module": "PortConnection",
            "type": "object",
            "properties": {
                "src_node_id": {
                    "type": "string",
                    "description": "Id of the source transport node",
                    "title": "Id of the source transport node"
                },
                "tunnel_properties": {
                    "title": "Tunnel properties between the source and the destination transport node",
                    "description": "Tunnel properties between the source and the destination transport node",
                    "$ref": "#/definitions/TunnelProperties"
                }
            }
        },
        "LogicalRouterLinkPortOnTIER0": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "allOf": [
                {
                    "$ref": "#/definitions/LogicalRouterPort"
                },
                {
                    "x-vmw-nsx-module": "LogicalRouterPorts",
                    "type": "object",
                    "properties": {
                        "subnets": {
                            "items": {
                                "$ref": "#/definitions/IPSubnet"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Logical router port subnets",
                            "title": "Logical router port subnets"
                        },
                        "linked_logical_router_port_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Identifier of connected LogicalRouterLinkPortOnTIER1 of TIER1 logical router",
                            "title": "Identifier of connected LogicalRouterLinkPortOnTIER1"
                        },
                        "mac_address": {
                            "readOnly": true,
                            "type": "string",
                            "description": "MAC address",
                            "title": "MAC address"
                        }
                    }
                }
            ],
            "description": "This port can be configured only on a TIER0 LogicalRouter.\nCreate an empty port to generate an id.\nUse this id in the linked_logical_router_port_id on\nLogicalRouterLinkPortOnTIER1 on TIER1 logical router.\n",
            "title": "Port to connect the LogicalRouterLinkPortOnTIER1 of TIER1 logical router to"
        },
        "LogicalRouterLinkPortOnTIER1": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "allOf": [
                {
                    "$ref": "#/definitions/LogicalRouterPort"
                },
                {
                    "x-vmw-nsx-module": "LogicalRouterPorts",
                    "type": "object",
                    "properties": {
                        "subnets": {
                            "items": {
                                "$ref": "#/definitions/IPSubnet"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Logical router port subnets",
                            "title": "Logical router port subnets"
                        },
                        "mac_address": {
                            "readOnly": true,
                            "type": "string",
                            "description": "MAC address",
                            "title": "MAC address"
                        },
                        "linked_logical_router_port_id": {
                            "title": "Reference of TIER0 port to connect the TIER1 to.",
                            "description": "Reference of LogicalRouterLinkPortOnTIER0 of TIER0 logical router to connect this TIER1 logical router outwards.\n",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "edge_cluster_member_index": {
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "type": "array",
                            "description": "Please use logical router API to pass edge cluster members indexes manually.\n",
                            "x-deprecated": true,
                            "title": "Member index of the edge node on the cluster"
                        }
                    }
                }
            ],
            "description": "This port can be configured only on a TIER1 LogicalRouter.\nUse the id of the LogicalRouterLinkPortOnTIER0 from TIER0 logical router to set\nthe linked_logical_router_port_id on the port on TIER1 logical router.\n",
            "title": "Port to connect the TIER1 logical router to TIER0 logical router"
        },
        "ComputeCollectionTransportNodeTemplate": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "compute_collection_ids"
                    ],
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "host_switch_spec": {
                            "title": "Transport node host switch specification",
                            "description": "Property 'host_switch_spec' can be used to create either standard host switch or preconfigured host switch.",
                            "$ref": "#/definitions/HostSwitchSpec"
                        },
                        "transport_zone_endpoints": {
                            "items": {
                                "$ref": "#/definitions/TransportZoneEndPoint"
                            },
                            "type": "array",
                            "description": "Transport zone endpoints",
                            "title": "Transport zone endpoints"
                        },
                        "network_migration_spec_ids": {
                            "items": {
                                "$ref": "#/definitions/NetworkMigrationSpecTypeIdEntry"
                            },
                            "type": "array",
                            "description": "Property 'network_migration_spec_ids' should only be used for compute collections which are clusters in VMware vCenter. Currently only HostProfileNetworkMigrationSpec type is supported. This specification will only apply to Stateless ESX hosts which are under this vCenter cluster.",
                            "maxItems": 1,
                            "title": "Id(s) of Network migration specifications to be linked to compute collections"
                        },
                        "compute_collection_ids": {
                            "description": "Associated compute collection ids",
                            "title": "Associated compute collection ids",
                            "minItems": 1,
                            "items": {
                                "type": "string",
                                "title": "Compute collection id"
                            },
                            "maxItems": 1,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "Compute collection transport node template",
            "title": "Compute collection transport node template"
        },
        "EdgeClusterMemberAllocationProfile": {
            "x-vmw-nsx-module": "LogicalRouter",
            "type": "object",
            "properties": {
                "allocation_pool": {
                    "title": "Edge Cluster Member Allocation Pool for logical router",
                    "description": "Logical router allocation can be tracked for specific services and\nservices may have their own hard limits and allocation sizes. For\nexample load balancer pool should be specified if load balancer\nservice will be attached to logical router.\n",
                    "$ref": "#/definitions/EdgeClusterMemberAllocationPool"
                }
            }
        },
        "TransportNode": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "node_id"
                    ],
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "host_switches": {
                            "items": {
                                "$ref": "#/definitions/HostSwitch"
                            },
                            "type": "array",
                            "description": "This property is deprecated in favor of 'host_switch_spec'. Property 'host_switches' can only be used for NSX managed transport nodes. 'host_switch_spec' can be used for both NSX managed or manually preconfigured host switches.",
                            "x-deprecated": true,
                            "title": "Transport Node switch(s). Prefer host_switch_spec over this."
                        },
                        "host_switch_spec": {
                            "title": "Transport node host switch specification",
                            "description": "This property is used to either create standard host switches\nor to inform NSX about preconfigured host switches that already\nexist on the transport node.\n\nPass an array of either StandardHostSwitchSpec objects or\nPreconfiguredHostSwitchSpec objects. It is an error to pass\nan array containing different types of HostSwitchSpec objects.\n",
                            "$ref": "#/definitions/HostSwitchSpec"
                        },
                        "node_id": {
                            "type": "string",
                            "description": "Unique Id of the fabric node",
                            "title": "Unique Id of the fabric node"
                        },
                        "maintenance_mode": {
                            "readOnly": true,
                            "enum": [
                                "ENABLED",
                                "FORCE_ENABLED",
                                "DISABLED"
                            ],
                            "type": "string",
                            "description": "The property is read-only, used for querying result. User could update transport node maintenance mode by UpdateTransportNodeMaintenanceMode call.",
                            "title": "transport node maintenance mode desired state"
                        },
                        "transport_zone_endpoints": {
                            "items": {
                                "$ref": "#/definitions/TransportZoneEndPoint"
                            },
                            "type": "array",
                            "description": "Transport zone endpoints.",
                            "title": "Transport zone endpoints."
                        }
                    }
                }
            ],
            "description": "Transport Node",
            "title": "Transport Node"
        },
        "UpgradeUnitGroupStatus": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "IN_PROGRESS",
                        "NOT_STARTED",
                        "PAUSED"
                    ],
                    "type": "string",
                    "description": "Upgrade status of upgrade unit group",
                    "title": "Upgrade status of upgrade unit group"
                },
                "upgrade_unit_count": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of upgrade units in the group",
                    "title": "Number of upgrade units in the group"
                },
                "failed_count": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of nodes in the upgrade unit group that failed upgrade",
                    "title": "Number of nodes in the upgrade unit group that failed upgrade"
                },
                "percent_complete": {
                    "readOnly": true,
                    "type": "number",
                    "description": "Indicator of upgrade progress in percentage",
                    "title": "Indicator of upgrade progress in percentage"
                },
                "group_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier for upgrade unit group",
                    "title": "UUID of upgrade unit group"
                },
                "group_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Name of the upgrade unit group",
                    "title": "Upgrade unit group Name"
                }
            }
        },
        "NodeStatusProperties": {
            "x-vmw-nsx-module": "ApplianceStats",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "ApplianceStats",
                    "type": "object",
                    "properties": {
                        "load_average": {
                            "items": {
                                "type": "number"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "One, five, and fifteen minute load averages for the system",
                            "title": "One, five, and fifteen minute load averages for the system"
                        },
                        "swap_used": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Amount of swap disk in use, in kilobytes",
                            "title": "Amount of swap disk in use, in kilobytes"
                        },
                        "mem_used": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Amount of RAM in use on the system, in kilobytes",
                            "title": "Amount of RAM in use on the system, in kilobytes"
                        },
                        "swap_total": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Amount of disk available for swap, in kilobytes",
                            "title": "Amount of disk available for swap, in kilobytes"
                        },
                        "system_time": {
                            "description": "Current time expressed in milliseconds since epoch",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "cpu_cores": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of CPU cores on the system",
                            "title": "Number of CPU cores on the system"
                        },
                        "uptime": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Milliseconds since system start",
                            "title": "Milliseconds since system start"
                        },
                        "mem_cache": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Amount of RAM on the system that can be flushed out to disk, in kilobytes",
                            "title": "Amount of RAM on the system that can be flushed out to disk, in kilobytes"
                        },
                        "mem_total": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Amount of RAM allocated to the system, in kilobytes",
                            "title": "Amount of RAM allocated to the system, in kilobytes"
                        },
                        "file_systems": {
                            "items": {
                                "$ref": "#/definitions/NodeFileSystemProperties"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "File systems configured on the system",
                            "title": "File systems configured on the system"
                        },
                        "source": {
                            "description": "Source of status data.",
                            "enum": [
                                "realtime",
                                "cached"
                            ],
                            "readOnly": true,
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "Node status properties",
            "title": "Node status properties"
        },
        "FeatureInfo": {
            "x-vmw-nsx-module": "AAA",
            "type": "object",
            "description": "Feature Info",
            "properties": {
                "info": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Info",
                    "title": "Info"
                }
            },
            "title": "Feature Info"
        },
        "ManagementClusterRoleConfig": {
            "x-vmw-nsx-module": "ClusterManagement",
            "allOf": [
                {
                    "$ref": "#/definitions/ClusterRoleConfig"
                },
                {
                    "x-vmw-nsx-module": "ClusterManagement",
                    "type": "object",
                    "properties": {
                        "mgmt_cluster_listen_addr": {
                            "readOnly": true,
                            "title": "The IP and port for the management cluster service on this node",
                            "description": "The IP and port for the management cluster service on this node",
                            "$ref": "#/definitions/ServiceEndpoint"
                        },
                        "mpa_msg_client_info": {
                            "$ref": "#/definitions/MsgClientInfo"
                        },
                        "api_listen_addr": {
                            "readOnly": true,
                            "title": "The IP and port for the public API service on this node",
                            "description": "The IP and port for the public API service on this node",
                            "$ref": "#/definitions/ServiceEndpoint"
                        },
                        "mgmt_plane_listen_addr": {
                            "readOnly": true,
                            "title": "The IP and port for the management plane service on this node",
                            "description": "The IP and port for the management plane service on this node",
                            "$ref": "#/definitions/ServiceEndpoint"
                        }
                    }
                }
            ]
        },
        "ClusterGroupMemberStatus": {
            "x-vmw-nsx-module": "Cluster",
            "type": "object",
            "description": "This type contains the attributes and status of a group member.",
            "properties": {
                "member_name": {
                    "readOnly": true,
                    "format": "ip",
                    "type": "string",
                    "description": "Name of the group member",
                    "title": "Name of the group member"
                },
                "member_status": {
                    "readOnly": true,
                    "enum": [
                        "UP",
                        "DOWN",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "Status of the group member",
                    "title": "Status of the group member"
                },
                "member_uuid": {
                    "readOnly": true,
                    "type": "string",
                    "description": "UUID of the group member",
                    "title": "UUID of the group member"
                }
            },
            "title": "Status of a group member"
        },
        "NsxRole": {
            "description": "Role",
            "title": "Role",
            "required": [
                "role"
            ],
            "x-vmw-nsx-module": "AAA",
            "type": "object",
            "properties": {
                "role": {
                    "enum": [
                        "read_only_api_users",
                        "read_write_api_users",
                        "enterprise_admin",
                        "auditor",
                        "network_engineer",
                        "network_op",
                        "security_engineer",
                        "security_op",
                        "lb_admin",
                        "lb_auditor",
                        "cloud_service_admin",
                        "cloud_service_auditor",
                        "site_reliability_engineer",
                        "site_reliability_auditor",
                        "cloud_admin",
                        "cloud_auditor"
                    ],
                    "type": "string",
                    "description": "Role name",
                    "title": "Role name"
                },
                "permissions": {
                    "items": {
                        "enum": [
                            "read-api",
                            "read-write-api",
                            "crud",
                            "read",
                            "execute",
                            "none"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Please use the /user-info/permissions api to get the permission that the user has on each feature.",
                    "x-deprecated": true,
                    "title": "Permissions"
                }
            }
        },
        "ComputeCollectionFabricTemplateListResult": {
            "x-vmw-nsx-module": "ComputeCollectionHostPrepFabricService",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ComputeCollectionHostPrepFabricService",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ComputeCollectionFabricTemplate"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of compute collection fabric template",
                            "title": "List of compute collection fabric template"
                        }
                    }
                }
            ],
            "description": "List of compute collection fabric template",
            "title": "List of compute collection fabric template"
        },
        "LbTcpProfileListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbTcpProfile"
                            },
                            "type": "array",
                            "description": "Paginated list of load balancer TCP profiles",
                            "title": "Paginated list of load balancer TCP profiles"
                        }
                    }
                }
            ]
        },
        "PortConnectionContainersEntities": {
            "x-vmw-nsx-module": "PortConnection",
            "type": "object",
            "description": "Port Connection Containers Entities",
            "properties": {
                "logical_ports": {
                    "items": {
                        "$ref": "#/definitions/LogicalPort"
                    },
                    "type": "array"
                }
            },
            "title": "Port Connection Containers Entities"
        },
        "NodeServicePropertiesListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NodeServiceProperties"
                            },
                            "type": "array",
                            "description": "Node service property results",
                            "title": "Node service property results"
                        }
                    }
                }
            ],
            "description": "Node service property query results",
            "title": "Node service property query results"
        },
        "PBRSectionRuleList": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/PBRSection"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "required": [
                        "rules"
                    ],
                    "type": "object",
                    "properties": {
                        "rules": {
                            "description": "List of PBR rules in the section.",
                            "title": "List of the PBR rules",
                            "items": {
                                "$ref": "#/definitions/PBRRule"
                            },
                            "readOnly": false,
                            "maxItems": 1000,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "ClusterRoleConfig": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "properties": {
                "type": {
                    "readOnly": true,
                    "enum": [
                        "ManagementClusterRoleConfig",
                        "ControllerClusterRoleConfig"
                    ],
                    "type": "string",
                    "description": "Type of this role configuration",
                    "title": "Type of this role configuration"
                }
            }
        },
        "DhcpFilter": {
            "description": "DHCP filtering configuration",
            "title": "DHCP filtering configuration",
            "required": [
                "client_block_enabled",
                "server_block_enabled"
            ],
            "x-vmw-nsx-module": "SwitchSecuritySwitchingProfile",
            "type": "object",
            "properties": {
                "client_block_enabled": {
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Indicates whether DHCP client blocking is enabled",
                    "title": "Indicates whether DHCP client blocking is enabled"
                },
                "server_block_enabled": {
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Indicates whether DHCP server blocking is enabled",
                    "title": "Indicates whether DHCP server blocking is enabled"
                }
            }
        },
        "IGMPTypeNSService": {
            "x-vmw-nsx-module": "Types",
            "allOf": [
                {
                    "$ref": "#/definitions/NSServiceElement"
                },
                {
                    "x-vmw-nsx-module": "Types",
                    "type": "object"
                }
            ],
            "description": "A NSService that represents IGMP protocol",
            "title": "A NSService that represents IGMP protocol"
        },
        "BridgeEndpointProfileListResult": {
            "x-vmw-nsx-module": "BridgeEndpointProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "BridgeEndpointProfile",
                    "type": "object",
                    "properties": {
                        "results": {
                            "description": "BridgeEndpointProfile Results",
                            "title": "BridgeEndpointProfile Results",
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/BridgeEndpointProfile"
                            },
                            "readOnly": true,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "Bridge Endpoint Profile queries result",
            "title": "Bridge Endpoint Profile queries result"
        },
        "IPProtocolNSService": {
            "x-vmw-nsx-module": "Types",
            "allOf": [
                {
                    "$ref": "#/definitions/NSServiceElement"
                },
                {
                    "required": [
                        "protocol_number"
                    ],
                    "x-vmw-nsx-module": "Types",
                    "type": "object",
                    "properties": {
                        "protocol_number": {
                            "format": "int64",
                            "type": "integer",
                            "description": "The IP protocol number",
                            "title": "The IP protocol number"
                        }
                    }
                }
            ],
            "description": "An NSService element that represents an IP protocol",
            "title": "An NSService element that represents an IP protocol"
        },
        "StaticHopBfdPeer": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "required": [
                        "peer_ip_address"
                    ],
                    "type": "object",
                    "properties": {
                        "source_addresses": {
                            "items": {
                                "description": "IPv4 address",
                                "format": "ipv4",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "BFD peers will be created from all these source addresses to this neighbour.",
                            "maxItems": 1,
                            "title": "Array of Logical Router Uplink IP Addresses"
                        },
                        "bfd_config": {
                            "title": "Configuration for the BFD peer",
                            "description": "If not specified then BFD peer will inherit configuration from the BFD global config.",
                            "$ref": "#/definitions/BfdConfigParameters"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "Indicate BFD peer is enabled or disabled. Default is true.",
                            "title": "status of BFD peer"
                        },
                        "peer_ip_address": {
                            "description": "IP address of BFD peer. This should be same as next hop IP address.",
                            "format": "ipv4",
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "RedistributionRuleList": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "type": "object",
                    "properties": {
                        "rules": {
                            "description": "List of redistribution rules.\nUser needs to re-order rules to change the priority.\n",
                            "title": "List of redistribution rules.\nUser needs to re-order rules to change the priority.\n",
                            "default": [],
                            "items": {
                                "$ref": "#/definitions/RedistributionRule"
                            },
                            "minItems": 0,
                            "maxItems": 5,
                            "type": "array"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        }
                    }
                }
            ]
        },
        "BridgeHighAvailabilityClusterProfile": {
            "x-vmw-nsx-module": "BridgeHighAvailabilityClusterProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ClusterProfile"
                },
                {
                    "x-vmw-nsx-module": "BridgeHighAvailabilityClusterProfile",
                    "type": "object",
                    "properties": {
                        "enable": {
                            "default": true,
                            "type": "boolean",
                            "description": "whether the heartbeat is enabled",
                            "title": "whether the heartbeat is enabled"
                        },
                        "bfd_probe_interval": {
                            "description": "the time interval (in millisec) between probe packets for heartbeat purpose",
                            "title": "the time interval (in millisec) between probe packets for heartbeat purpose",
                            "default": 1000,
                            "format": "int64",
                            "maximum": 60000,
                            "minimum": 300,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "Profile for BFD HA cluster setting",
            "title": "Profile for BFD HA cluster setting"
        },
        "Label": {
            "description": "Label that will be displayed for a UI element.",
            "title": "Label",
            "required": [
                "text"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "text": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "Text to be displayed at the label.",
                    "title": "Label text"
                },
                "hover": {
                    "default": false,
                    "type": "boolean",
                    "description": "If true, displays the label only on hover",
                    "title": "Show label only on hover"
                },
                "navigation": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Hyperlink of the specified UI page that provides details.",
                    "title": "Navigation to a specified UI page"
                },
                "condition": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "If the condition is met then the label will be applied. Examples of expression syntax are provided under example_request section of CreateWidgetConfiguration API.",
                    "title": "Expression for evaluating condition"
                },
                "icons": {
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/Icon"
                    },
                    "type": "array",
                    "description": "Icons to be applied at dashboard for the label",
                    "title": "Icons"
                }
            }
        },
        "TunnelProperties": {
            "x-vmw-nsx-module": "Tunnel",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Tunnel",
                    "type": "object",
                    "properties": {
                        "status": {
                            "readOnly": true,
                            "enum": [
                                "UP",
                                "DOWN",
                                "UNKNOWN"
                            ],
                            "type": "string",
                            "description": "Status of tunnel",
                            "title": "Status of tunnel"
                        },
                        "egress_interface": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Corresponds to the interface where local_ip_address is routed.",
                            "title": "Name of local transport interface carrying tunnel traffic"
                        },
                        "remote_node_display_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Represents the display name of the remote transport node at the other end of the tunnel.",
                            "title": "Display name of the remote transport node"
                        },
                        "remote_node_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "UUID of the remote transport node",
                            "title": "UUID of the remote transport node"
                        },
                        "encap": {
                            "readOnly": true,
                            "enum": [
                                "STT",
                                "VXLAN",
                                "GENEVE",
                                "UNKNOWN_ENCAP"
                            ],
                            "type": "string",
                            "description": "Tunnel encap",
                            "title": "Tunnel encap"
                        },
                        "bfd": {
                            "readOnly": true,
                            "title": "Detailed information about BFD configured on interface",
                            "description": "Detailed information about BFD configured on interface",
                            "$ref": "#/definitions/BFDProperties"
                        },
                        "name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Name of tunnel",
                            "title": "Name of tunnel"
                        },
                        "local_ip": {
                            "readOnly": true,
                            "format": "ip",
                            "type": "string",
                            "description": "Local IP address of tunnel",
                            "title": "Local IP address of tunnel"
                        },
                        "last_updated_time": {
                            "description": "Time at which the Tunnel status has been fetched last time.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "remote_ip": {
                            "readOnly": true,
                            "format": "ip",
                            "type": "string",
                            "description": "Remote IP address of tunnel",
                            "title": "Remote IP address of tunnel"
                        }
                    }
                }
            ]
        },
        "AppProfileMetaInfo": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "app_profile_category": {
                            "type": "string",
                            "description": "Categories of the app profile",
                            "title": "Categories of the app profile"
                        },
                        "app_profile_id": {
                            "type": "string",
                            "description": "ID of the App Profile",
                            "title": "ID of the App Profile"
                        },
                        "app_profile_name": {
                            "type": "string",
                            "description": "Name of the App Profile",
                            "title": "Name of the App Profile"
                        }
                    }
                }
            ],
            "description": "Contains the metadata of an App Profile\n",
            "title": "Metadata about App Profile"
        },
        "UpgradeUnitGroupInfo": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "properties": {
                "display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Name of the group",
                    "title": "Name of the group"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier of group",
                    "title": "UUID of group"
                }
            }
        },
        "LbPoolStatisticsListResult": {
            "x-vmw-nsx-module": "AggSvcLb",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLb",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbPoolStatistics"
                            },
                            "type": "array",
                            "description": "paginated statistics list of pools",
                            "title": "paginated statistics list of pools"
                        }
                    }
                }
            ]
        },
        "MigrationUnitGroupStatus": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "IN_PROGRESS",
                        "NOT_STARTED",
                        "PAUSED"
                    ],
                    "type": "string",
                    "description": "Migration status of migration unit group",
                    "title": "Migration status of migration unit group"
                },
                "failed_count": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of nodes in the migration unit group that failed migration",
                    "title": "Number of nodes in the migration unit group that failed migration"
                },
                "migration_unit_count": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of migration units in the group",
                    "title": "Number of migration units in the group"
                },
                "group_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier for migration unit group",
                    "title": "UUID of migration unit group"
                },
                "percent_complete": {
                    "readOnly": true,
                    "type": "number",
                    "description": "Indicator of migration progress in percentage",
                    "title": "Indicator of migration progress in percentage"
                },
                "group_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Name of the migration unit group",
                    "title": "Migration unit group Name"
                }
            }
        },
        "DSSectionState": {
            "x-vmw-nsx-module": "DistributedServices",
            "allOf": [
                {
                    "$ref": "#/definitions/ConfigurationState"
                },
                {
                    "x-vmw-nsx-module": "DistributedServices",
                    "type": "object",
                    "properties": {
                        "revision_desired": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "revision number of the desired state",
                            "title": "revision number of the desired state"
                        }
                    }
                }
            ]
        },
        "GenericDhcpOption": {
            "x-vmw-nsx-module": "Dhcp",
            "required": [
                "code",
                "values"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "description": "dhcp option code, [0-255]",
                    "format": "int64",
                    "title": "dhcp option code, [0-255]",
                    "maximum": 255,
                    "minimum": 0,
                    "type": "integer"
                },
                "values": {
                    "description": "dhcp option value",
                    "title": "dhcp option value",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "maxItems": 10,
                    "type": "array"
                }
            }
        },
        "FeatureUsageList": {
            "x-vmw-nsx-module": "License",
            "description": "list of feature usage items",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "License",
                    "type": "object",
                    "properties": {
                        "feature_usage_info": {
                            "items": {
                                "$ref": "#/definitions/FeatureUsage"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Feature Usage List",
                            "title": "Feature Usage List"
                        }
                    }
                }
            ]
        },
        "SwitchingProfileStatus": {
            "x-vmw-nsx-module": "BaseSwitchingProfile",
            "type": "object",
            "properties": {
                "num_logical_ports": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of logical ports using a switching profile",
                    "title": "Number of logical ports using a switching profile"
                },
                "switching_profile_id": {
                    "type": "string",
                    "description": "Identifier for the switching profile",
                    "title": "Identifier for the switching profile"
                },
                "num_logical_switches": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of logical switches using a switching profile",
                    "title": "Number of logical switches using a switching profile"
                }
            }
        },
        "ControlClusteringConfig": {
            "x-vmw-nsx-module": "ClusterNodeVMDeployment",
            "allOf": [
                {
                    "$ref": "#/definitions/ClusteringConfig"
                },
                {
                    "x-vmw-nsx-module": "ClusterNodeVMDeployment",
                    "type": "object",
                    "properties": {
                        "join_to_existing_cluster": {
                            "type": "boolean",
                            "description": "Specifies whether or not the cluster node VM should try to join to\nthe existing control cluster or initialize a new one.\nOnly required in uncertainty case, i.e. when there are manually-\ndeployed controllers that are registered but not connected to the\ncluster and no auto-deployed controllers are part of the cluster.\n",
                            "title": "Flag to identify the type of clustering"
                        },
                        "shared_secret": {
                            "type": "string",
                            "description": "Shared secret to be used when joining the cluster node VM to a control\ncluster or for initializing a new cluster with the VM.\nMust contain at least 4 unique characters and be at least 6 characters\nlong.\n",
                            "title": "Cluster's shared secret"
                        }
                    }
                }
            ],
            "description": "Config for joining cluster nodes VMs to a control cluster\n",
            "title": "Clustering config for joining control cluster"
        },
        "SftpProtocol": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Protocol"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "required": [
                        "ssh_fingerprint",
                        "authentication_scheme"
                    ],
                    "type": "object",
                    "properties": {
                        "ssh_fingerprint": {
                            "type": "string",
                            "description": "SSH fingerprint of server",
                            "title": "SSH fingerprint of server"
                        },
                        "authentication_scheme": {
                            "title": "Scheme to authenticate if required",
                            "description": "Scheme to authenticate if required",
                            "$ref": "#/definitions/PasswordAuthenticationScheme"
                        }
                    }
                }
            ]
        },
        "SwitchingToVmcModeParameters": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/NodeMode"
                },
                {
                    "required": [
                        "csp_org_uri",
                        "default_org_id",
                        "base_url",
                        "auth_code"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "csp_org_uri": {
                            "type": "string",
                            "description": "Relative path on CSP server to the Org location. Can be \"/csp/gateway/am/api/orgs/\".",
                            "title": "Relative path to CSP Org"
                        },
                        "default_org_id": {
                            "type": "string",
                            "description": "Org ID of a Client - commonly UUID.",
                            "title": "Org ID of a Client"
                        },
                        "proxy_host": {
                            "description": "IP/host of PoP (Point-of-Presence) Http proxy server",
                            "format": "hostname-or-ipv4",
                            "type": "string"
                        },
                        "sre_org": {
                            "title": "Org Info for \"Enterprise Admin\"",
                            "description": "Org ID and role of \"Enterprise Admin\"",
                            "$ref": "#/definitions/OrgInfo"
                        },
                        "gss_org": {
                            "title": "Org Info for \"Global Support Services\"",
                            "description": "Org ID and role of \"Global Support Services\"",
                            "$ref": "#/definitions/OrgInfo"
                        },
                        "ea_org": {
                            "title": "Org Info for \"Site Reliability Engineer\"",
                            "description": "Org ID and role of \"Site Reliability Engineer\"",
                            "$ref": "#/definitions/OrgInfo"
                        },
                        "csp_time_drift": {
                            "format": "int64",
                            "type": "integer",
                            "description": "CSP time drift in milliseconds",
                            "title": "CSP time drift"
                        },
                        "base_url": {
                            "type": "string",
                            "description": "Protocol and domain name (or IP address) of a CSP server, like \"https://console-stg.cloud.vmware.com\".",
                            "title": "CSP base URL"
                        },
                        "sddc_id": {
                            "type": "string",
                            "description": "SDDC id",
                            "title": "SDDC id"
                        },
                        "proxy_port": {
                            "description": "Port of PoP (Point-of-Presence) Http proxy server",
                            "format": "int64",
                            "title": "Port of PoP (Point-of-Presence) Http proxy server",
                            "maximum": 65535,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "csp_client_credential": {
                            "title": "CSP Client Credential",
                            "description": "Client's credentials on CSP server",
                            "$ref": "#/definitions/Oauth2Credentials"
                        },
                        "auth_code": {
                            "title": "Auth Code",
                            "description": "Client's credentials.",
                            "$ref": "#/definitions/Oauth2Credentials"
                        },
                        "mode_change_only": {
                            "type": "boolean",
                            "description": "When this parameter is set to true, only a change in the node mode happens without any update to auth properties. The required params would need to provided but they would be ignored in the backed. When this param is not set to true i.e. set to false or not provided, the mode change and auth properties update will both happen.",
                            "title": "Only change node  mode"
                        },
                        "csp_client_incoming_credentials": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "List of incoming client IDs",
                            "title": "CSP client incoming credentials"
                        },
                        "service_definition_id": {
                            "type": "string",
                            "description": "Service definition id",
                            "title": "Service definition id"
                        }
                    }
                }
            ],
            "description": "Possible values of a mode in a \"/config/nsx_appliance_mode\" file",
            "title": "Parameters required to switch to VMC nsx node mode"
        },
        "ControllerClusterStatus": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "properties": {
                "status": {
                    "readOnly": true,
                    "enum": [
                        "UNSTABLE",
                        "STABLE",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "The current status of the controller cluster",
                    "title": "The current status of the controller cluster"
                }
            }
        },
        "VsphereDeploymentConfig": {
            "x-vmw-nsx-module": "FabricNode",
            "description": "The Vsphere deployment configuration determines where to deploy the edge\nnode. It contains settings that are applied during install time.\nIf using DHCP, you must leave the following fields unset: search_domains,\nmanagement_port_subnets, dns_servers and default_gateway_addresses.\n",
            "allOf": [
                {
                    "$ref": "#/definitions/DeploymentConfig"
                },
                {
                    "x-vmw-nsx-module": "FabricNode",
                    "required": [
                        "data_network_ids",
                        "hostname",
                        "management_network_id",
                        "compute_id",
                        "vc_id",
                        "storage_id"
                    ],
                    "type": "object",
                    "properties": {
                        "data_network_ids": {
                            "description": "List of distributed portgroup or VLAN logical identifiers to which the\ndatapath serving vnics of edge node vm will be connected.\n",
                            "title": "Portgroup or logical switch identifiers for datapath connectivity.",
                            "minItems": 3,
                            "items": {
                                "type": "string"
                            },
                            "maxItems": 3,
                            "type": "array"
                        },
                        "dns_servers": {
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "List of DNS servers.\n",
                            "title": "DNS servers."
                        },
                        "ntp_servers": {
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "List of NTP servers.\n",
                            "title": "NTP servers."
                        },
                        "management_network_id": {
                            "type": "string",
                            "description": "Distributed portgroup identifier to which the management vnic of edge node vm\nwill be connected. This portgroup must have connectivity with MP and CCP. A\nVLAN logical switch identifier may also be specified.\n",
                            "title": "Portgroup or logical switch identifier for management network connectivity."
                        },
                        "enable_ssh": {
                            "default": false,
                            "type": "boolean",
                            "description": "Enabling SSH service is not recommended for security reasons.\n",
                            "title": "Enable SSH."
                        },
                        "allow_ssh_root_login": {
                            "default": false,
                            "type": "boolean",
                            "description": "Allowing root SSH logins is not recommended for security reasons.\n",
                            "title": "Allow root SSH logins."
                        },
                        "compute_id": {
                            "type": "string",
                            "description": "The edge node vm will be deployed on the specified cluster or resourcepool.\nNote - all the hosts must have nsx fabric prepared in the specified cluster.\n",
                            "title": "Cluster identifier or resourcepool identifier for specified vcenter server."
                        },
                        "search_domains": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "List of domain names that are used to complete unqualified host names.\n",
                            "title": "Search domain names."
                        },
                        "vc_id": {
                            "type": "string",
                            "description": "The vc specific identifiers will be resolved on this VC.\nSo all other identifiers specified here must belong to this vcenter server.\n",
                            "title": "Vsphere compute identifier for identifying the vcenter server."
                        },
                        "storage_id": {
                            "type": "string",
                            "description": "The edge node vm will be deployed on the specified datastore. User must ensure\nthat storage is accessible by the specified cluster/host.\n",
                            "title": "Storage/datastore identifier in the specified vcenter server."
                        },
                        "default_gateway_addresses": {
                            "description": "The default gateway for edge node must be specified if all the nodes it\ncommunicates with are not in the same subnet.\nNote: Only single IPv4 default gateway address is supported and it must\nbelong to management network.\n",
                            "title": "Default gateway for the node.",
                            "minItems": 1,
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "maxItems": 1,
                            "type": "array"
                        },
                        "management_port_subnets": {
                            "description": "IP Address and subnet configuration for the management port. Note:\nonly one IPv4 address is supported for the management port.\n",
                            "title": "Port subnets for management port. Only one IPv4 Address is supported.",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/IPSubnet"
                            },
                            "maxItems": 1,
                            "type": "array"
                        },
                        "host_id": {
                            "type": "string",
                            "description": "The edge node vm will be deployed on the specified Host within the cluster\nif host_id is specified.\nNote - User must ensure that storage and specified networks are accessible by this host.\n",
                            "title": "Host identifier in the specified vcenter server."
                        },
                        "hostname": {
                            "type": "string",
                            "description": "Host name or FQDN for edge node.",
                            "title": "Host name or FQDN for edge node."
                        }
                    }
                }
            ]
        },
        "LogicalSwitchMirrorSource": {
            "x-vmw-nsx-module": "PortMirroring",
            "allOf": [
                {
                    "$ref": "#/definitions/MirrorSource"
                },
                {
                    "x-vmw-nsx-module": "PortMirroring",
                    "required": [
                        "switch_id"
                    ],
                    "type": "object",
                    "properties": {
                        "switch_id": {
                            "type": "string",
                            "description": "Source logical switch identifier",
                            "title": "Source logical switch identifier"
                        }
                    }
                }
            ]
        },
        "ViewList": {
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "description": "Represents a list of views.",
            "properties": {
                "views": {
                    "items": {
                        "$ref": "#/definitions/View"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Array of views",
                    "title": "Array of views"
                }
            },
            "title": "List of Views"
        },
        "ClusterConfig": {
            "x-vmw-nsx-module": "ClusterManagement",
            "allOf": [
                {
                    "$ref": "#/definitions/RevisionedResource"
                },
                {
                    "x-vmw-nsx-module": "ClusterManagement",
                    "required": [
                        "mgmt_cluster_changes_allowed",
                        "control_cluster_changes_allowed"
                    ],
                    "type": "object",
                    "properties": {
                        "control_cluster_changes_allowed": {
                            "type": "boolean",
                            "description": "True if control cluster nodes may be added or removed",
                            "title": "True if control cluster nodes may be added or removed"
                        },
                        "mgmt_cluster_changes_allowed": {
                            "type": "boolean",
                            "description": "True if management cluster nodes may be added or removed",
                            "title": "True if management cluster nodes may be added or removed"
                        },
                        "cluster_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Unique identifier of this cluster",
                            "title": "Unique identifier of this cluster"
                        }
                    }
                }
            ]
        },
        "UpgradeHistory": {
            "x-vmw-nsx-module": "UpgradeTypes",
            "required": [
                "timestamp",
                "target_version",
                "initial_version",
                "upgrade_status"
            ],
            "type": "object",
            "properties": {
                "timestamp": {
                    "type": "integer",
                    "description": "Timestamp (in milliseconds since epoch) when the upgrade was performed",
                    "format": "int64"
                },
                "target_version": {
                    "type": "string",
                    "description": "Version being upgraded to",
                    "title": "Target Version"
                },
                "initial_version": {
                    "type": "string",
                    "description": "Version before the upgrade started",
                    "title": "Initial Version"
                },
                "upgrade_status": {
                    "enum": [
                        "STARTED",
                        "SUCCESS",
                        "FAILED"
                    ],
                    "type": "string",
                    "description": "Status of the upgrade",
                    "title": "Status of the upgrade"
                }
            }
        },
        "AppDiscoverySessionsListResult": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/AppDiscoverySession"
                            },
                            "type": "array",
                            "description": "AppProfile Sessions results",
                            "title": "AppProfile Sessions results"
                        }
                    }
                }
            ],
            "description": "Application discovery sessions list",
            "title": "Application discovery sessions list"
        },
        "CryptoAlgorithm": {
            "x-vmw-nsx-module": "CertificateManager",
            "type": "object",
            "properties": {
                "key_size": {
                    "items": {
                        "type": "integer",
                        "description": "Crypto key size",
                        "format": "int64"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "supported key sizes for the algorithm"
                },
                "name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "crypto algorithm name"
                }
            }
        },
        "Dscp": {
            "x-vmw-nsx-module": "QosSwitchingProfile",
            "type": "object",
            "description": "Dscp value is ignored in case of 'TRUSTED' DscpMode.",
            "properties": {
                "priority": {
                    "description": "Internal Forwarding Priority",
                    "title": "Internal Forwarding Priority",
                    "default": 0,
                    "format": "int32",
                    "maximum": 63,
                    "minimum": 0,
                    "type": "integer"
                },
                "mode": {
                    "description": "Trust settings",
                    "enum": [
                        "TRUSTED",
                        "UNTRUSTED"
                    ],
                    "type": "string"
                }
            },
            "title": "One of Quality-of-Service or Encapsulated-Remote-Switched-Port-Analyzer"
        },
        "AllClusterGroupStatus": {
            "x-vmw-nsx-module": "Cluster",
            "type": "object",
            "description": "A list of the statuses of all the groups in the cluster.",
            "properties": {
                "cluster_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "UUID of the cluster",
                    "title": "UUID of the cluster"
                },
                "groups": {
                    "items": {
                        "$ref": "#/definitions/ClusterGroupStatus"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Array of groups and their statuses",
                    "title": "Array of groups and their statuses"
                }
            },
            "title": "Status of all the cluster groups"
        },
        "DirectoryGroup": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "required": [
                        "domain_sync_node_id",
                        "distinguished_name",
                        "domain_id",
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "domain_sync_node_id": {
                            "type": "string",
                            "description": "Domain sync node under which this directory group is located.",
                            "title": "Domain synchronization root node id"
                        },
                        "distinguished_name": {
                            "type": "string",
                            "description": "Directory group distinguished name",
                            "title": "Directory group distinguished name"
                        },
                        "domain_id": {
                            "type": "string",
                            "description": "Domain ID this directory group belongs to.",
                            "title": "Domain id"
                        },
                        "resource_type": {
                            "type": "string",
                            "description": "Directory group resource type comes from multiple sub-classes extending this base class. For example, DirectoryAdGroup is one accepted resource_type. If there are more sub-classes defined, they will also be accepted resource_type.",
                            "title": "Directory group resource type for this domain"
                        }
                    }
                }
            ]
        },
        "AddClusterNodeVMInfo": {
            "description": "Contains a list of cluster node VM deployment requests and optionally\na clustering configuration.\n",
            "title": "Info for AddClusterNodeVM",
            "required": [
                "deployment_requests"
            ],
            "x-vmw-nsx-module": "ClusterNodeVMDeployment",
            "type": "object",
            "properties": {
                "deployment_requests": {
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/ClusterNodeVMDeploymentRequest"
                    },
                    "type": "array",
                    "description": "Cluster node VM deployment requests to be deployed by the Manager.\n",
                    "title": "List of deployment requests"
                },
                "clustering_config": {
                    "title": "Configuration for auto-clustering of VMs post-deployment",
                    "description": "Configuration for automatically joining the cluster nodes to the\ncluster after they are deployed.\nIt is required if any of the deployment nodes\nhas CONTROLLER role.\n",
                    "$ref": "#/definitions/ClusteringConfig"
                }
            }
        },
        "BaseServiceInstance": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "transport_type",
                        "resource_type"
                    ],
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
                    "type": "object",
                    "properties": {
                        "on_failure_policy": {
                            "enum": [
                                "ALLOW",
                                "BLOCK"
                            ],
                            "type": "string",
                            "description": "Failure policy of the service instance - if it has to be different from the service. By default the service instance inherits the FailurePolicy of the service it belongs to.",
                            "title": "On Failure Policy"
                        },
                        "transport_type": {
                            "readOnly": false,
                            "enum": [
                                "L2_BRIDGE",
                                "L3_ROUTED"
                            ],
                            "type": "string",
                            "description": "Transport to be used by this service instance for deploying the Service-VM.",
                            "title": "Transport Type"
                        },
                        "resource_type": {
                            "description": "ServiceInstance is used when NSX handles the lifecyle of\n  appliance. Deployment and appliance related all the information is necessary.\nByodServiceInstance is a custom instance to be used when NSX is not handling\n  the lifecycles of appliance/s. User will manage their own appliance (BYOD)\n  to connect with NSX.\nVirtualServiceInstance is a a custom instance to be used when NSX is not\n  handling the lifecycle of an appliance and when the user is not bringing\n  their own appliance.\n",
                            "enum": [
                                "ServiceInstance",
                                "ByodServiceInstance",
                                "VirtualServiceInstance"
                            ],
                            "type": "string"
                        },
                        "service_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The Service to which the service instance is associated.",
                            "title": "Service Id"
                        }
                    }
                }
            ],
            "description": "The deployment of a registered service. service instance is instantiation of service.",
            "title": "Base Instance of a service"
        },
        "EdgeUpgradeStatus": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ComponentUpgradeStatus"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "type": "object"
                }
            ],
            "description": "Status of edge upgrade",
            "title": "Status of edge upgrade"
        },
        "IncludedFieldsParameters": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "A list of fields to include in query results",
            "properties": {
                "included_fields": {
                    "type": "string",
                    "description": "Comma separated list of fields that should be included in query result",
                    "title": "Comma separated list of fields that should be included in query result"
                }
            },
            "title": "A list of fields to include in query results"
        },
        "Footer": {
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "description": "Footer of a widget that provides additional information or allows an action such as clickable url for navigation. An example usage of footer is provided under 'example_request' section of 'CreateWidgetConfiguration' API.",
            "properties": {
                "condition": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "If the condition is met then the footer will be applied. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.",
                    "title": "Expression for evaluating condition"
                },
                "actions": {
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/FooterAction"
                    },
                    "type": "array",
                    "description": "Action to be performed at the footer of a widget. An action at the footer can be simple text description or a hyperlink to a UI page. Action allows a clickable url for navigation. An example usage of footer action is provided under 'example_request' section of 'CreateWidgetConfiguration' API.",
                    "title": "Footer Actions"
                }
            },
            "title": "Widget Footer"
        },
        "IPSecVPNPeerEndpointListResult": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNPeerEndpoint"
                            },
                            "type": "array",
                            "description": "IPSec Peer endpoint list results",
                            "title": "IPSec Peer endpoint list results"
                        }
                    }
                }
            ],
            "description": "List all the peer endpoints.",
            "title": "List peer endpoints"
        },
        "ProtocolVersion": {
            "description": "HTTP protocol version",
            "title": "HTTP protocol version",
            "required": [
                "enabled",
                "name"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable status for this protocol version",
                    "title": "Enable status for this protocol version"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the TLS protocol version",
                    "title": "Name of the TLS protocol version"
                }
            }
        },
        "IpfixUpmProfile": {
            "x-vmw-nsx-module": "UpmIpfix",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "resource_type"
                    ],
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "UpmIpfix",
                    "type": "object",
                    "properties": {
                        "resource_type": {
                            "description": "All IPFIX profile types.",
                            "enum": [
                                "IpfixSwitchUpmProfile"
                            ],
                            "readOnly": false,
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "Parent profile of all IPFIX profiles.",
            "title": "Base IPFIX Profile"
        },
        "StartAppDiscoverySessionParameters": {
            "description": "Parameters to start an application discovery session. It can have NSGroup\nIds as well as the App Profile Ids.\n",
            "title": "Parameters to start an application discovery session",
            "required": [
                "ns_group_ids"
            ],
            "x-vmw-nsx-module": "AppDiscovery",
            "type": "object",
            "properties": {
                "ns_group_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "NSGroup Ids",
                    "title": "NSGroup Ids"
                },
                "app_profile_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "App Profile Ids",
                    "title": "App Profile Ids"
                }
            }
        },
        "MigrationFeedbackResponse": {
            "description": "Detailed feedback requests from the migration tool where user input is required.",
            "title": "Feedback details required for Migration",
            "required": [
                "action",
                "id",
                "value"
            ],
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "action": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Action selected in response to the feedback request.",
                    "title": "Action selected for feedback request"
                },
                "id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Identifier of the feedback request.",
                    "title": "UUID of the feedback request"
                },
                "value": {
                    "readOnly": false,
                    "type": "string",
                    "description": "User input provided inresponse to the feedback request.",
                    "title": "User input for the feedback query"
                }
            }
        },
        "HostAggregateInfo": {
            "x-vmw-nsx-module": "NsxQuery",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "NsxQuery",
                    "type": "object",
                    "properties": {
                        "status": {
                            "readOnly": true,
                            "description": "Host status",
                            "$ref": "#/definitions/NodeStatus"
                        },
                        "transport_node": {
                            "readOnly": true,
                            "$ref": "#/definitions/TransportNode"
                        },
                        "host": {
                            "readOnly": true,
                            "description": "Host attributes",
                            "$ref": "#/definitions/HostNode"
                        }
                    }
                }
            ],
            "description": "Aggregation of desired and runtime status of host",
            "title": "Aggregation of desired and runtime status of host"
        },
        "ManagementConfig": {
            "x-vmw-nsx-module": "ConfigManagement",
            "allOf": [
                {
                    "$ref": "#/definitions/RevisionedResource"
                },
                {
                    "x-vmw-nsx-module": "ConfigManagement",
                    "required": [
                        "publish_fqdns"
                    ],
                    "type": "object",
                    "properties": {
                        "publish_fqdns": {
                            "type": "boolean",
                            "description": "True if Management nodes publish their fqdns(instead of default IP addresses) across NSX for its reachability.",
                            "title": "True if Management nodes publish their fqdns(instead of default IP addresses) across NSX for its reachability."
                        }
                    }
                }
            ]
        },
        "CCPUpgradeStatus": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ComponentUpgradeStatus"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "type": "object"
                }
            ],
            "description": "Status of CCP upgrade",
            "title": "Status of CCP upgrade"
        },
        "PoolMemberGroup": {
            "x-vmw-nsx-module": "LoadBalancer",
            "required": [
                "grouping_object"
            ],
            "type": "object",
            "properties": {
                "grouping_object": {
                    "title": "Grouping object resource reference",
                    "description": "Load balancer pool support grouping object as dynamic pool members.\nThe IP list of the grouping object such as NSGroup would be used as\npool member IP setting.\n",
                    "$ref": "#/definitions/ResourceReference"
                },
                "ip_revision_filter": {
                    "default": "IPV4",
                    "enum": [
                        "IPV4",
                        "IPV6",
                        "IPV4_IPV6"
                    ],
                    "type": "string",
                    "description": "Ip revision filter is used to filter IPv4 or IPv6 addresses from the\ngrouping object.\nIf the filter is not specified, both IPv4 and IPv6 addresses would be\nused as server IPs.\nThe link local and loopback addresses would be always filtered out.\n",
                    "title": "Filter of ipv4 or ipv6 address of grouping object IP list"
                },
                "max_ip_list_size": {
                    "description": "The size is used to define the maximum number of grouping object IP\naddress list. These IP addresses would be used as pool members.\nIf the grouping object includes more than certain number of\nIP addresses, the redundant parts would be ignored and those IP\naddresses would not be treated as pool members.\nIf the size is not specified, one member is budgeted for this dynamic\npool so that the pool has at least one member even if some other\ndynamic pools grow beyond the capacity of load balancer service. Other\nmembers are picked according to available dynamic capacity. The unused\nmembers would be set to DISABLED so that the load balancer system\nitself is not overloaded during runtime.\n",
                    "format": "int64",
                    "title": "Maximum number of grouping object IP address list",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "type": "integer"
                },
                "port": {
                    "description": "If port is specified, all connections will be sent to this port.\nIf unset, the same port the client connected to will be used, it could\nbe overridden by default_pool_member_ports setting in virtual server.\nThe port should not specified for multiple ports case.\n",
                    "format": "int32",
                    "title": "Pool member port for all IP addresses of the grouping object",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                },
                "customized_members": {
                    "items": {
                        "$ref": "#/definitions/PoolMemberSetting"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "The list is used to show the customized pool member settings. User can\nonly user pool member action API to update the admin state for a specific\nIP address.\n",
                    "title": "List of customized pool member settings"
                }
            }
        },
        "SupportBundleFileTransferProtocol": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "required": [
                "ssh_fingerprint",
                "name",
                "authentication_scheme"
            ],
            "type": "object",
            "properties": {
                "ssh_fingerprint": {
                    "type": "string",
                    "description": "SSH fingerprint of server",
                    "title": "SSH fingerprint of server"
                },
                "name": {
                    "enum": [
                        "SCP",
                        "SFTP"
                    ],
                    "type": "string",
                    "description": "Protocol name",
                    "title": "Protocol name"
                },
                "authentication_scheme": {
                    "title": "Scheme to authenticate if required",
                    "description": "Scheme to authenticate if required",
                    "$ref": "#/definitions/SupportBundleFileTransferAuthenticationScheme"
                }
            }
        },
        "TrustManagementData": {
            "x-vmw-nsx-module": "CertificateManager",
            "type": "object",
            "properties": {
                "supported_algorithms": {
                    "items": {
                        "$ref": "#/definitions/CryptoAlgorithm"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "list of supported algorithms"
                }
            }
        },
        "TransportZoneProfile": {
            "x-vmw-nsx-module": "TransportZoneProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "TransportZoneProfile",
                    "required": [
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "resource_type": {
                            "enum": [
                                "BfdHealthMonitoringProfile"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "RoutingConfig": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "type": "object",
                    "properties": {
                        "forwarding_up_timer": {
                            "default": 0,
                            "format": "int64",
                            "type": "integer",
                            "description": "Defines the extra time the router must wait before sending the UP notification\nafter the first BGP session is established. Default means forward immediately.\n",
                            "title": "Forwarding up timer"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        }
                    }
                }
            ]
        },
        "FirewallSectionListResult": {
            "x-vmw-nsx-module": "Firewall",
            "allOf": [
                {
                    "$ref": "#/definitions/DSSectionListResult"
                },
                {
                    "x-vmw-nsx-module": "Firewall",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/FirewallSection"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of the firewall sections. The list has to be homogenous.",
                            "title": "Section list"
                        }
                    }
                }
            ]
        },
        "Crl": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "CertificateManager",
                    "required": [
                        "pem_encoded"
                    ],
                    "type": "object",
                    "properties": {
                        "details": {
                            "readOnly": true,
                            "description": "details of the X509Crl object",
                            "$ref": "#/definitions/X509Crl"
                        },
                        "pem_encoded": {
                            "readOnly": false,
                            "type": "string",
                            "description": "pem encoded crl data"
                        }
                    }
                }
            ]
        },
        "TransportNodeListResult": {
            "x-vmw-nsx-module": "TransportNode",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "TransportNode",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/TransportNode"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "TransportNode Results",
                            "title": "TransportNode Results"
                        }
                    }
                }
            ],
            "description": "Transport Node queries result",
            "title": "Transport Node queries result"
        },
        "NSGroupComplexExpression": {
            "x-vmw-nsx-module": "NSGroup",
            "allOf": [
                {
                    "$ref": "#/definitions/NSGroupExpression"
                },
                {
                    "required": [
                        "expressions"
                    ],
                    "x-vmw-nsx-module": "NSGroup",
                    "type": "object",
                    "properties": {
                        "expressions": {
                            "description": "Represents expressions which are to be logically 'AND'ed.The array cannot contain\nNSGroupComplexExpression.Only NSGroupTagExpression and NSGroupSimpleExpressions\nare accepted.\n",
                            "title": "List of simple and tag expressions",
                            "minItems": 2,
                            "items": {
                                "$ref": "#/definitions/NSGroupExpression"
                            },
                            "maxItems": 5,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "Complex expressions to represent NSGroup membership",
            "title": "Complex expressions to represent NSGroup membership"
        },
        "L2VPNSessionRemoteMacs": {
            "x-vmw-nsx-module": "L2VPNStatistics",
            "type": "object",
            "description": "Remote MAC addresses for all logical switches for a L2VPN session.",
            "properties": {
                "remote_mac_addresses": {
                    "items": {
                        "$ref": "#/definitions/L2VPNSessionRemoteMacsForLS"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "List MAC addresses for all logical switch for a particular L2VPN session.",
                    "title": "Remote MAC addresses for all logical switches"
                },
                "display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "L2VPN display name.",
                    "title": "Display name"
                },
                "session_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "L2VPN session identifier.",
                    "title": "Session identifier"
                }
            },
            "title": "Remote MAC addresses list"
        },
        "TcpHeader": {
            "x-vmw-nsx-module": "Traceflow",
            "type": "object",
            "properties": {
                "tcp_flags": {
                    "description": "TCP flags (9bits)",
                    "format": "int64",
                    "title": "TCP flags (9bits)",
                    "maximum": 511,
                    "minimum": 0,
                    "type": "integer"
                },
                "src_port": {
                    "description": "Source port of tcp header",
                    "format": "int64",
                    "title": "Source port of tcp header",
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                },
                "dst_port": {
                    "description": "Destination port of tcp header",
                    "format": "int64",
                    "title": "Destination port of tcp header",
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "LogicalDhcpServer": {
            "x-vmw-nsx-module": "Dhcp",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Dhcp",
                    "required": [
                        "ipv4_dhcp_server",
                        "dhcp_profile_id"
                    ],
                    "type": "object",
                    "properties": {
                        "attached_logical_port_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "id of attached logical port",
                            "title": "id of attached logical port"
                        },
                        "ipv4_dhcp_server": {
                            "title": "dhcp server for ipv4 addresses",
                            "description": "dhcp server for ipv4 addresses",
                            "$ref": "#/definitions/IPv4DhcpServer"
                        },
                        "dhcp_profile_id": {
                            "type": "string",
                            "description": "dhcp profile uuid",
                            "title": "dhcp profile uuid"
                        }
                    }
                }
            ]
        },
        "LogicalSwitchStatusListResult": {
            "x-vmw-nsx-module": "LogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LogicalSwitch",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalSwitchStatus"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "LogicalSwitchStatus Results",
                            "title": "LogicalSwitchStatus Results"
                        }
                    }
                }
            ],
            "description": "Logical Switch runtime status queries result",
            "title": "Logical Switch runtime status queries result"
        },
        "FileHash": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "required": [
                        "name",
                        "hash_type",
                        "hash_code"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "File name",
                            "title": "File name"
                        },
                        "hash_type": {
                            "enum": [
                                "SHA1"
                            ],
                            "type": "string",
                            "description": "Algorithm used to compute the file's hash",
                            "title": "Algorithm used to compute the file's hash"
                        },
                        "hash_code": {
                            "type": "string",
                            "description": "Computed hash of file",
                            "title": "Computed hash of file"
                        }
                    }
                }
            ],
            "description": "File hash code",
            "title": "File hash code"
        },
        "UrlAlias": {
            "description": "Short name or alias of a url. It is used to represent the url.",
            "title": "Url Alias",
            "required": [
                "url"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "url": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Url to fetch data from.",
                    "title": "Url"
                },
                "alias": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "Short name or alias of url, if any. If not specified, the url can be referenced by its index in the array of urls of the datasource instance as $<index> (for example, $0).",
                    "title": "Url Alias Name"
                },
                "query": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Search query to be applied, if any. If query string is not provided, it will be ignored.",
                    "title": "Search query of the search api, if any"
                }
            }
        },
        "VidmInfo": {
            "x-vmw-nsx-module": "AAA",
            "type": "object",
            "description": "Vidm Info",
            "properties": {
                "display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "User's Full Name Or User Group's Display Name",
                    "title": "User's Full Name Or User Group's Display Name"
                },
                "type": {
                    "readOnly": true,
                    "enum": [
                        "remote_user",
                        "remote_group"
                    ],
                    "type": "string",
                    "description": "Type",
                    "title": "Type"
                },
                "name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Username Or Groupname",
                    "title": "Username Or Groupname"
                }
            },
            "title": "Vidm Info"
        },
        "AuthenticationPolicyProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "api_failed_auth_reset_period": {
                            "description": "In order to trigger an account lockout, all authentication failures must occur in this time window. If the reset period expires, the failed login count is reset to zero. Only applies to NSX Manager nodes. Ignored on other node types.",
                            "format": "int64",
                            "default": 900,
                            "title": "Period, in seconds, for authentication failures to trigger lockout",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "minimum_password_length": {
                            "description": "Minimum number of characters required in account passwords",
                            "format": "int64",
                            "default": 8,
                            "title": "Minimum number of characters required in account passwords",
                            "minimum": 8,
                            "type": "integer"
                        },
                        "cli_failed_auth_lockout_period": {
                            "description": "Once a lockout occurs, the account remains locked out of the CLI for this time period. While the lockout period is in effect, additional authentication attempts restart the lockout period, even if a valid password is specified.",
                            "format": "int64",
                            "default": 900,
                            "title": "Lockout period in seconds",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "api_max_auth_failures": {
                            "description": "Only applies to NSX Manager nodes. Ignored on other node types.",
                            "format": "int64",
                            "default": 5,
                            "title": "Number of authentication failures that trigger API lockout",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "api_failed_auth_lockout_period": {
                            "description": "Once a lockout occurs, the account remains locked out of the API for this time period. Only applies to NSX Manager nodes. Ignored on other node types.",
                            "format": "int64",
                            "default": 900,
                            "title": "Lockout period in seconds",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "cli_max_auth_failures": {
                            "description": "Number of authentication failures that trigger CLI lockout",
                            "format": "int64",
                            "default": 5,
                            "title": "Number of authentication failures that trigger CLI lockout",
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "Configuration of authentication policies for the NSX node",
            "title": "Configuration of authentication policies for the NSX node"
        },
        "ServiceInsertionRule": {
            "x-vmw-nsx-module": "ServiceInsertionRules",
            "allOf": [
                {
                    "$ref": "#/definitions/DSRule"
                },
                {
                    "required": [
                        "redirect_tos"
                    ],
                    "x-vmw-nsx-module": "ServiceInsertionRules",
                    "type": "object",
                    "properties": {
                        "services": {
                            "description": "List of the services. Null will be treated as any.",
                            "title": "Service List",
                            "items": {
                                "$ref": "#/definitions/ServiceInsertionService"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        },
                        "redirect_tos": {
                            "description": "A rule can be realized on a particular service definition, service instance or instance endpoint. If a service definition is selected as a redirect_to target, by default it will take the first deployed service instance if finds.",
                            "title": "Redirect_Tos List",
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 1,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "ServiceInsertion Rule.",
            "title": "ServiceInsertion Rule"
        },
        "RouteMapListResult": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/RouteMap"
                            },
                            "type": "array",
                            "description": "Paginated list of RouteMaps",
                            "title": "Paginated list of RouteMaps"
                        }
                    }
                }
            ]
        },
        "ColumnItem": {
            "description": "Represents a column of the Grid",
            "title": "Grid Column",
            "required": [
                "field",
                "type",
                "label"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "sort_key": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "Sorting on column is based on the sort_key. sort_key represents the field in the output data on which sort is requested.",
                    "title": "Key for sorting on this column"
                },
                "type": {
                    "description": "Data type of the field.",
                    "title": "Field data type",
                    "default": "String",
                    "enum": [
                        "String",
                        "Number",
                        "Date"
                    ],
                    "maxLength": 255,
                    "type": "string"
                },
                "tooltip": {
                    "items": {
                        "$ref": "#/definitions/Tooltip"
                    },
                    "type": "array",
                    "description": "Multi-line text to be shown on tooltip while hovering over a cell in the grid.",
                    "title": "Multi-line tooltip"
                },
                "label": {
                    "readOnly": false,
                    "title": "Column Label",
                    "description": "Label of the column.",
                    "$ref": "#/definitions/Label"
                },
                "field": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Field from which values of the column will be derived.",
                    "title": "Column Field"
                },
                "sort_ascending": {
                    "default": true,
                    "type": "boolean",
                    "description": "If true, the value of the column are sorted in ascending order. Otherwise, in descending order.",
                    "title": "Represents order of sorting the values"
                },
                "drilldown_id": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "Id of drilldown widget, if any. Id should be a valid id of an existing widget.",
                    "title": "Id of drilldown widget"
                },
                "hidden": {
                    "default": false,
                    "type": "boolean",
                    "description": "If set to true, hides the column",
                    "title": "Hide the column"
                },
                "navigation": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Hyperlink of the specified UI page that provides details. If drilldown_id is provided, then navigation cannot be used.",
                    "title": "Navigation to a specified UI page"
                },
                "column_identifier": {
                    "type": "string",
                    "description": "Identifies the column and used for fetching content upon an user click or drilldown. If column identifier is not provided, the column's data will not participate in searches and drilldowns.",
                    "title": "Identifier for this column"
                },
                "render_configuration": {
                    "items": {
                        "$ref": "#/definitions/RenderConfiguration"
                    },
                    "type": "array",
                    "description": "Render configuration to be applied, if any.",
                    "title": "Render Configuration"
                }
            }
        },
        "ServiceProfileListResult": {
            "x-vmw-nsx-module": "ServiceProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ServiceProfile",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ServiceProfile"
                            },
                            "type": "array",
                            "description": "service profile list results",
                            "title": "service profile list results"
                        }
                    }
                }
            ]
        },
        "IpfixObsPointsListResult": {
            "x-vmw-nsx-module": "Ipfix",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Ipfix",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IpfixObsPointConfig"
                            },
                            "type": "array",
                            "description": "IPFIX observation points",
                            "title": "IPFIX observation points"
                        }
                    }
                }
            ],
            "description": "This is deprecated. Please use UpmProfileListResult instead.\n",
            "title": "List of logical IPFIX observation points"
        },
        "MigrationUnitGroupAggregateInfoListResult": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MigrationUnitGroupAggregateInfo"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Paged collection of migration status for migration unit groups",
                            "title": "Paged collection of migration status for migration unit groups"
                        }
                    }
                }
            ]
        },
        "LogicalServiceListResult": {
            "x-vmw-nsx-module": "LogicalService",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LogicalService",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalService"
                            },
                            "type": "array",
                            "description": "Logical router service list results",
                            "title": "Logical router service list results"
                        }
                    }
                }
            ]
        },
        "InterfaceStatistics": {
            "x-vmw-nsx-module": "Common",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Common",
                    "type": "object",
                    "properties": {
                        "rx_packets": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Count of packets received on this port",
                            "title": "Count of packets received on this port"
                        },
                        "rx_errors": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Count of receive errors occurring on this port",
                            "title": "Count of receive errors occurring on this port"
                        },
                        "rx_bytes": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Count of bytes received on this port",
                            "title": "Count of bytes received on this port"
                        },
                        "tx_errors": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Count of transmit errors occurring on this port",
                            "title": "Count of transmit errors occurring on this port"
                        },
                        "tx_bytes": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Count of bytes transmitted on this port",
                            "title": "Count of bytes transmitted on this port"
                        },
                        "tx_packets": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Count of packets transmitted on this port",
                            "title": "Count of packets transmitted on this port"
                        }
                    }
                }
            ],
            "description": "Statistics for a network interface",
            "title": "Statistics for a network interface"
        },
        "NodeProcessPropertiesListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NodeProcessProperties"
                            },
                            "type": "array",
                            "description": "Node process property results",
                            "title": "Node process property results"
                        }
                    }
                }
            ],
            "description": "Node process property query results",
            "title": "Node process property query results"
        },
        "CipherSuite": {
            "description": "HTTP cipher suite",
            "title": "HTTP cipher suite",
            "required": [
                "enabled",
                "name"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable status for this cipher suite",
                    "title": "Enable status for this cipher suite"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the TLS cipher suite",
                    "title": "Name of the TLS cipher suite"
                }
            }
        },
        "MacManagementSwitchingProfile": {
            "x-vmw-nsx-module": "MacManagementSwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseSwitchingProfile"
                },
                {
                    "x-vmw-nsx-module": "MacManagementSwitchingProfile",
                    "type": "object",
                    "properties": {
                        "mac_learning": {
                            "readOnly": false,
                            "title": "MAC learning configuration",
                            "description": "MAC learning configuration",
                            "$ref": "#/definitions/MacLearningSpec"
                        },
                        "mac_change_allowed": {
                            "default": false,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Allowing source MAC address change",
                            "title": "Allowing source MAC address change"
                        }
                    }
                }
            ]
        },
        "PacketCaptureOption": {
            "x-vmw-nsx-module": "PacketCapture",
            "type": "object",
            "description": "The option is used to filter data on given node.",
            "properties": {
                "name": {
                    "enum": [
                        "ETHTYPE",
                        "MAC",
                        "SRCMAC",
                        "DSTMAC",
                        "VLAN",
                        "IP",
                        "SRCIP",
                        "DSTIP",
                        "IPPROTO",
                        "PORT",
                        "SRCPORT",
                        "DSTPORT",
                        "VNI"
                    ],
                    "type": "string",
                    "description": "The avaiable option names in the enum can be used to filter the capture data.",
                    "title": "Packet capture option name"
                },
                "value": {
                    "type": "string",
                    "description": "Define the capture value according to the given capture option.",
                    "title": "Packet capture option value"
                }
            },
            "title": "Packet capture option"
        },
        "EdgeClusterMember": {
            "x-vmw-nsx-module": "EdgeClusters",
            "required": [
                "transport_node_id"
            ],
            "type": "object",
            "properties": {
                "member_index": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "System generated index for cluster member",
                    "title": "System generated index for cluster member"
                },
                "display_name": {
                    "type": "string",
                    "description": "display name of edge cluster member",
                    "title": "display name of edge cluster member"
                },
                "description": {
                    "type": "string",
                    "description": "description of edge cluster member",
                    "title": "description of edge cluster member"
                },
                "transport_node_id": {
                    "type": "string",
                    "description": "Identifier of the transport node backed by an Edge node",
                    "title": "UUID of edge transport node"
                }
            }
        },
        "FirewallSectionState": {
            "x-vmw-nsx-module": "Firewall",
            "allOf": [
                {
                    "$ref": "#/definitions/DSSectionState"
                },
                {
                    "x-vmw-nsx-module": "Firewall",
                    "type": "object"
                }
            ]
        },
        "ServiceProfile": {
            "x-vmw-nsx-module": "ServiceProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "ServiceProfile",
                    "required": [
                        "server_addresses",
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "server_addresses": {
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "resource_type": {
                            "description": "Resource type of the service profile",
                            "enum": [
                                "DhcpRelayProfile"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "PortConnectionEdgeNodeGroup": {
            "x-vmw-nsx-module": "PortConnection",
            "allOf": [
                {
                    "$ref": "#/definitions/PortConnectionEntity"
                },
                {
                    "required": [
                        "logical_router_id"
                    ],
                    "x-vmw-nsx-module": "PortConnection",
                    "type": "object",
                    "properties": {
                        "edge_nodes": {
                            "items": {
                                "$ref": "#/definitions/TransportNode"
                            },
                            "type": "array"
                        },
                        "logical_router_id": {
                            "type": "string",
                            "description": "Id of the logical router",
                            "title": "Id of the logical router"
                        }
                    }
                }
            ],
            "description": "Collection of edge nodes backing a logical router",
            "title": "Collection of edge nodes backing a logical router"
        },
        "DhcpLeases": {
            "x-vmw-nsx-module": "AggSvcDhcp",
            "type": "object",
            "properties": {
                "timestamp": {
                    "type": "integer",
                    "description": "timestamp of the lease info",
                    "format": "int64"
                },
                "leases": {
                    "description": "The lease info list of the server",
                    "title": "The lease info list of the server",
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/DhcpLeasePerIP"
                    },
                    "maxItems": 65535,
                    "type": "array"
                },
                "dhcp_server_id": {
                    "type": "string",
                    "description": "dhcp server uuid",
                    "title": "dhcp server uuid"
                }
            }
        },
        "NodeNetworkProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object"
                }
            ],
            "description": "Network configuration properties",
            "title": "Network configuration properties"
        },
        "BaseSwitchingProfile": {
            "x-vmw-nsx-module": "BaseSwitchingProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "BaseSwitchingProfile",
                    "required": [
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "required_capabilities": {
                            "items": {
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array"
                        },
                        "resource_type": {
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "MigrationFeedbackRequestListResult": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "Migration",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MigrationFeedbackRequest"
                            },
                            "readOnly": false,
                            "type": "array",
                            "description": "Paged Collection of feedback requests",
                            "title": "Paged Collection of feedback requests"
                        }
                    }
                }
            ],
            "description": "List of detailed feedback requests from the migration tool where user input is required.",
            "title": "List of feedback required for Migration"
        },
        "LogicalRouterListResult": {
            "x-vmw-nsx-module": "LogicalRouter",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LogicalRouter",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalRouter"
                            },
                            "type": "array",
                            "description": "Logical router list results",
                            "title": "Logical router list results"
                        }
                    }
                }
            ]
        },
        "LogicalPort": {
            "x-vmw-nsx-module": "LogicalPort",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "LogicalPort",
                    "required": [
                        "logical_switch_id",
                        "admin_state"
                    ],
                    "type": "object",
                    "properties": {
                        "logical_switch_id": {
                            "type": "string",
                            "description": "Id of the Logical switch that this port belongs to.",
                            "title": "Id of the Logical switch that this port belongs to."
                        },
                        "init_state": {
                            "description": "Set initial state when a new logical port is created. 'UNBLOCKED_VLAN'\nmeans new port will be unblocked on traffic in creation, also VLAN will\nbe set with corresponding logical switch setting.\n",
                            "enum": [
                                "UNBLOCKED_VLAN"
                            ],
                            "type": "string"
                        },
                        "switching_profile_ids": {
                            "items": {
                                "$ref": "#/definitions/SwitchingProfileTypeIdEntry"
                            },
                            "type": "array"
                        },
                        "attachment": {
                            "title": "Logical port attachment",
                            "description": "Logical port attachment",
                            "$ref": "#/definitions/LogicalPortAttachment"
                        },
                        "admin_state": {
                            "enum": [
                                "UP",
                                "DOWN"
                            ],
                            "type": "string",
                            "description": "Represents Desired state of the logical port",
                            "title": "Represents Desired state of the logical port"
                        },
                        "extra_configs": {
                            "items": {
                                "$ref": "#/definitions/ExtraConfig"
                            },
                            "type": "array",
                            "description": "This property could be used for vendor specific configuration in key value\nstring pairs. Logical port setting will override logical switch setting if\nthe same key was set on both logical switch and logical port.\n",
                            "title": "Extra configs on logical port"
                        },
                        "address_bindings": {
                            "description": "Address bindings for logical port",
                            "title": "Address bindings for logical port",
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/PacketAddressClassifier"
                            },
                            "maxItems": 512,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "L2VpnSessionListResult": {
            "x-vmw-nsx-module": "L2VPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "L2VPN",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/L2VpnSession"
                            },
                            "type": "array",
                            "description": "L2VPN sessions list result",
                            "title": "L2VPN sessions list result"
                        }
                    }
                }
            ],
            "description": "Paginated list all the L2VPN sessions",
            "title": "List all L2VPN sessions"
        },
        "RouteMapSequence": {
            "x-vmw-nsx-module": "Routing",
            "required": [
                "action",
                "match_criteria"
            ],
            "type": "object",
            "properties": {
                "set_criteria": {
                    "title": "Set Criteria for the RouteMap Sequence",
                    "description": "Set Criteria for the RouteMap Sequence",
                    "$ref": "#/definitions/RouteMapSequenceSet"
                },
                "action": {
                    "description": "Action for the Sequence",
                    "enum": [
                        "PERMIT",
                        "DENY"
                    ],
                    "type": "string"
                },
                "match_criteria": {
                    "title": "Match Criteria for the RouteMap Sequence",
                    "description": "Match Criteria for the RouteMap Sequence",
                    "$ref": "#/definitions/RouteMapSequenceMatch"
                }
            }
        },
        "MACAddressElementListResult": {
            "x-vmw-nsx-module": "MACSet",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MACSet",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MACAddressElement"
                            },
                            "type": "array",
                            "description": "MAC address element list",
                            "title": "MAC address element list"
                        }
                    }
                }
            ],
            "description": "Collection of MAC address elements",
            "title": "Collection of MAC address elements"
        },
        "ClusterProfileTypeIdEntry": {
            "x-vmw-nsx-module": "ClusterProfile",
            "required": [
                "profile_id"
            ],
            "type": "object",
            "properties": {
                "profile_id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "key value"
                },
                "resource_type": {
                    "description": "Supported cluster profiles.",
                    "enum": [
                        "EdgeHighAvailabilityProfile",
                        "BridgeHighAvailabilityClusterProfile"
                    ],
                    "type": "string"
                }
            }
        },
        "NSGroupMetaInfo": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "required": [
                        "ns_group_id"
                    ],
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "no_of_vms": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Number of VMs discovered for this NSGroup when session was started",
                            "title": "Number of VMs discovered for this NSGroup when session was started"
                        },
                        "ns_group_id": {
                            "type": "string",
                            "description": "ID of the NS Group",
                            "title": "ID of the NS Group"
                        }
                    }
                }
            ],
            "description": "Contains the metadata of a NSGroup when the application discovery session\nwas started\n",
            "title": "Metadata about NSGroup"
        },
        "UpgradeUnitList": {
            "x-vmw-nsx-module": "Upgrade",
            "required": [
                "list"
            ],
            "type": "object",
            "properties": {
                "list": {
                    "items": {
                        "$ref": "#/definitions/UpgradeUnit"
                    },
                    "type": "array",
                    "description": "Collection of Upgrade units",
                    "title": "Collection of Upgrade units"
                }
            }
        },
        "PortConnectionEntities": {
            "description": "Port Connection Entities (to help draw a visual picture of entities between two ports)",
            "title": "Port Connection Entities (to help draw a visual picture of entities between two ports)",
            "required": [
                "errors",
                "logical_switches",
                "hypervisors",
                "tunnels",
                "vms",
                "containers"
            ],
            "x-vmw-nsx-module": "PortConnection",
            "type": "object",
            "properties": {
                "containers": {
                    "$ref": "#/definitions/PortConnectionContainersEntities"
                },
                "hypervisors": {
                    "items": {
                        "$ref": "#/definitions/PortConnectionHypervisor"
                    },
                    "type": "array"
                },
                "errors": {
                    "items": {
                        "$ref": "#/definitions/PortConnectionError"
                    },
                    "type": "array"
                },
                "logical_switches": {
                    "items": {
                        "$ref": "#/definitions/PortConnectionLogicalSwitch"
                    },
                    "type": "array"
                },
                "edge_node_groups": {
                    "items": {
                        "$ref": "#/definitions/PortConnectionEdgeNodeGroup"
                    },
                    "type": "array"
                },
                "routers": {
                    "items": {
                        "$ref": "#/definitions/PortConnectionRouter"
                    },
                    "type": "array"
                },
                "vms": {
                    "items": {
                        "$ref": "#/definitions/VirtualMachine"
                    },
                    "type": "array"
                },
                "tunnels": {
                    "items": {
                        "$ref": "#/definitions/PortConnectionTunnel"
                    },
                    "type": "array"
                },
                "physical_hosts": {
                    "$ref": "#/definitions/PortConnectionBMEntities"
                }
            }
        },
        "CreateRemoteDirectoryProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/CopyRemoteFileProperties"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "required": [
                        "protocol"
                    ],
                    "type": "object",
                    "properties": {
                        "protocol": {
                            "title": "Protocol to use to copy file",
                            "description": "Protocol to use to copy file",
                            "$ref": "#/definitions/SftpProtocol"
                        }
                    }
                }
            ]
        },
        "SelectableResourceReference": {
            "x-vmw-nsx-module": "ClusterRestore",
            "allOf": [
                {
                    "$ref": "#/definitions/ResourceReference"
                },
                {
                    "required": [
                        "selected"
                    ],
                    "x-vmw-nsx-module": "ClusterRestore",
                    "type": "object",
                    "properties": {
                        "selected": {
                            "type": "boolean",
                            "description": "Set to true if this resource has been selected to be acted upon",
                            "title": "Set to true if this resource has been selected to be acted upon"
                        }
                    }
                }
            ],
            "description": "Resources to take action on",
            "title": "Resources to take action on"
        },
        "IpAllocationBase": {
            "x-vmw-nsx-module": "Dhcp",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Dhcp",
                    "type": "object",
                    "properties": {
                        "lease_time": {
                            "description": "lease time, in seconds, [60-(2^32-1)], default 86400",
                            "title": "lease time, in seconds, [60-(2^32-1)], default 86400",
                            "default": 86400,
                            "format": "int64",
                            "maximum": 4294967295,
                            "minimum": 60,
                            "type": "integer"
                        },
                        "gateway_ip": {
                            "description": "gateway ip",
                            "format": "ip",
                            "type": "string"
                        },
                        "options": {
                            "title": "dhcp options",
                            "description": "If an option is defined at server level and not configred at\nip-pool/static-binding level, the option will be inherited to\nip-pool/static-binding. If both define a same-code option, the\noption defined at ip-pool/static-binding level take precedence\nover that defined at server level.\n",
                            "$ref": "#/definitions/DhcpOptions"
                        }
                    }
                }
            ]
        },
        "LbSnatIpPool": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbSnatTranslation"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "ip_addresses"
                    ],
                    "type": "object",
                    "properties": {
                        "ip_addresses": {
                            "items": {
                                "$ref": "#/definitions/LbSnatIpElement"
                            },
                            "type": "array",
                            "description": "If an IP range is specified, the range may contain no more than 64\nIP addresses.\n",
                            "maxItems": 64,
                            "title": "List of Ip address or ip range"
                        }
                    }
                }
            ]
        },
        "PacketsDroppedBySecurity": {
            "x-vmw-nsx-module": "AggSvcL2Types",
            "type": "object",
            "properties": {
                "spoof_guard_dropped": {
                    "items": {
                        "$ref": "#/definitions/PacketTypeAndCounter"
                    },
                    "type": "array",
                    "description": "The packets dropped by \"Spoof Guard\"; supported packet types are IPv4, IPv6, ARP, ND, non-IP.",
                    "title": "The packets dropped by \"Spoof Guard\"; supported packet types are IPv4, IPv6, ARP, ND, non-IP."
                },
                "dhcp_server_dropped_ipv4": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of IPv4 packets dropped by \"DHCP server block\".",
                    "title": "The number of IPv4 packets dropped by \"DHCP server block\"."
                },
                "dhcp_server_dropped_ipv6": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of IPv6 packets dropped by \"DHCP server block\".",
                    "title": "The number of IPv6 packets dropped by \"DHCP server block\"."
                },
                "dhcp_client_dropped_ipv4": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of IPv4 packets dropped by \"DHCP client block\".",
                    "title": "The number of IPv4 packets dropped by \"DHCP client block\"."
                },
                "bpdu_filter_dropped": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of packets dropped by \"BPDU filter\".",
                    "title": "The number of packets dropped by \"BPDU filter\"."
                },
                "dhcp_client_dropped_ipv6": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of IPv6 packets dropped by \"DHCP client block\".",
                    "title": "The number of IPv6 packets dropped by \"DHCP client block\"."
                }
            }
        },
        "LbSnatIpElement": {
            "x-vmw-nsx-module": "LoadBalancer",
            "required": [
                "ip_address"
            ],
            "type": "object",
            "properties": {
                "ip_address": {
                    "description": "Ip address or ip range such as 1.1.1.1 or 1.1.1.101-1.1.1.160",
                    "format": "address-or-block-or-range",
                    "type": "string"
                },
                "prefix_length": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Subnet prefix length should be not specified if there is only one single\nIP address or IP range.\n",
                    "title": "subnet prefix length"
                }
            }
        },
        "DirectoryDomainSyncNode": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "distinguished_name"
                    ],
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "distinguished_name": {
                            "type": "string",
                            "description": "Distinguished name of the domain sync node",
                            "title": "Distinguished name"
                        }
                    }
                }
            ],
            "description": "Directory Domain Synchronization Nodes",
            "title": "Directory Domain Synchronization Nodes"
        },
        "CopyToRemoteFileProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/CopyRemoteFileProperties"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "required": [
                        "protocol"
                    ],
                    "type": "object",
                    "properties": {
                        "protocol": {
                            "title": "Protocol to use to copy file",
                            "description": "Only scp and sftp may be used.",
                            "$ref": "#/definitions/Protocol"
                        }
                    }
                }
            ]
        },
        "IpfixConfigListResult": {
            "x-vmw-nsx-module": "Ipfix",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Ipfix",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IpfixConfig"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "IPFIX Config",
                            "title": "IPFIX Config"
                        }
                    }
                }
            ],
            "description": "List of IPFIX Config",
            "title": "List of IPFIX Config"
        },
        "X509CrlEntry": {
            "x-vmw-nsx-module": "CertificateManager",
            "type": "object",
            "description": "Each revoked certificate is identified in a CRL by its certificate serial number.",
            "properties": {
                "revocation_date": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Revocation date"
                },
                "serial_number": {
                    "readOnly": true,
                    "type": "string",
                    "description": "the revoked certificate's serial number"
                }
            },
            "title": "Each revoked certificate is identified in a CRL by its certificate serial number."
        },
        "SIAggregatedDataCounter": {
            "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
            "type": "object",
            "properties": {
                "tx_bytes": {
                    "readOnly": true,
                    "$ref": "#/definitions/SIDataCounter"
                },
                "rx_packets": {
                    "readOnly": true,
                    "$ref": "#/definitions/SIDataCounter"
                },
                "tx_packets": {
                    "readOnly": true,
                    "$ref": "#/definitions/SIDataCounter"
                },
                "rx_bytes": {
                    "readOnly": true,
                    "$ref": "#/definitions/SIDataCounter"
                }
            }
        },
        "ErrorResolverMetadataList": {
            "x-vmw-nsx-module": "ErrorResolver",
            "required": [
                "errors"
            ],
            "type": "object",
            "description": "List of errors with their metadata",
            "properties": {
                "errors": {
                    "items": {
                        "$ref": "#/definitions/ErrorResolverMetadata"
                    },
                    "type": "array",
                    "description": "List of errors with their corresponding metadata.",
                    "title": "List of errors with their corresponding metadata."
                }
            }
        },
        "SoftwareModule": {
            "description": "Software module details",
            "title": "Software module details",
            "required": [
                "module_name",
                "module_version"
            ],
            "x-vmw-nsx-module": "FabricNode",
            "type": "object",
            "properties": {
                "module_name": {
                    "type": "string",
                    "description": "Name of the module in the node",
                    "title": "Name of the module in the node"
                },
                "module_version": {
                    "type": "string",
                    "description": "Version of the module in the node",
                    "title": "Version of the module in the node"
                }
            }
        },
        "NodeUserPropertiesListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NodeUserProperties"
                            },
                            "type": "array",
                            "description": "List of node users",
                            "title": "List of node users"
                        }
                    }
                }
            ],
            "description": "Node users list results",
            "title": "Node users list results"
        },
        "DnsQueryAnswer": {
            "x-vmw-nsx-module": "DnsForwarder",
            "type": "object",
            "description": "Answer of nslookup",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Matched name of the given address.\n",
                    "title": "Matched name"
                },
                "address": {
                    "type": "string",
                    "description": "Can be resolved ip address.\n",
                    "title": "Matched ip address"
                }
            },
            "title": "Answer of nslookup"
        },
        "Resource": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "Base class for resources",
            "properties": {
                "_self": {
                    "readOnly": true,
                    "title": "Link to this resource",
                    "description": "Link to this resource",
                    "$ref": "#/definitions/SelfResourceLink"
                },
                "_links": {
                    "items": {
                        "$ref": "#/definitions/ResourceLink"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The server will populate this field when returing the resource. Ignored on PUT and POST.",
                    "title": "References related to this resource"
                },
                "_schema": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Schema for this resource",
                    "title": "Schema for this resource"
                }
            },
            "title": "Base class for resources"
        },
        "IPSecVPNPolicySubnet": {
            "description": "Used to specify the local/peer subnets in IPSec VPN Policy rule.",
            "title": "Subnet for IPSec Policy based VPN",
            "required": [
                "subnet"
            ],
            "x-vmw-nsx-module": "IPSecVPN",
            "type": "object",
            "properties": {
                "subnet": {
                    "description": "Subnet used in policy rule.",
                    "format": "ipv4-cidr-block",
                    "type": "string"
                }
            }
        },
        "NodeNtpServiceProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/NodeServiceProperties"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "service_properties": {
                            "title": "NTP Service properties",
                            "description": "NTP Service properties",
                            "$ref": "#/definitions/NtpServiceProperties"
                        }
                    }
                }
            ],
            "description": "Node NTP service properties",
            "title": "Node NTP service properties"
        },
        "HeatMapTransportNodesAggregateStatus": {
            "x-vmw-nsx-module": "Heatmap",
            "type": "object",
            "properties": {
                "degraded_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of transport nodes that are degraded",
                    "title": "Number of transport nodes that are degraded"
                },
                "down_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of transport nodes that are down",
                    "title": "Number of transport nodes that are down"
                },
                "unknown_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of transport nodes with unknown status",
                    "title": "Number of transport nodes with unknown status"
                },
                "up_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of transport nodes that are up",
                    "title": "Number of transport nodes that are up"
                }
            }
        },
        "UpgradeBundleId": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "description": "Identifier of the upgrade bundle",
            "properties": {
                "bundle_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier of bundle upload",
                    "title": "Bundle Id of upgrade bundle uploaded"
                }
            },
            "title": "Bundle id of upgrade bundle"
        },
        "OrgInfo": {
            "description": "Organization ID and role, predefined for a particular type of VMware support.",
            "title": "Organization ID and role",
            "required": [
                "org_id",
                "org_role"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "org_id": {
                    "type": "string",
                    "description": "Organization ID, connected to a predefined role of a VMware support.",
                    "title": "Org ID"
                },
                "org_role": {
                    "type": "string",
                    "description": "Predefined role of a VMware support.",
                    "title": "Org role"
                }
            }
        },
        "ClusteringInfo": {
            "x-vmw-nsx-module": "ClusterManagement",
            "required": [
                "join_to_existing_cluster"
            ],
            "type": "object",
            "description": "Clustering parameters for the controller cluster",
            "properties": {
                "shared_secret": {
                    "type": "string",
                    "description": "Shared secret of the cluster.",
                    "title": "Shared Secret of the cluster"
                },
                "join_to_existing_cluster": {
                    "type": "boolean",
                    "description": "Property to indicate if the node must join an existing cluster.",
                    "title": "True If the controller node should join an existing cluster"
                }
            }
        },
        "AddressBindingEntry": {
            "x-vmw-nsx-module": "LogicalPort",
            "type": "object",
            "description": "An address binding entry is a combination of the IP-MAC-VLAN binding for\na logical port. The address bindings can be obtained via various methods\nlike ARP snooping, DHCP snooping etc. or by user configuration.\n",
            "properties": {
                "source": {
                    "description": "Address binding source",
                    "default": "UNKNOWN",
                    "enum": [
                        "INVALID",
                        "UNKNOWN",
                        "USER_DEFINED",
                        "ARP_SNOOPING",
                        "DHCP_SNOOPING",
                        "VM_TOOLS"
                    ],
                    "type": "string"
                },
                "binding": {
                    "title": "Combination of IP-MAC-VLAN binding",
                    "description": "Combination of IP-MAC-VLAN binding",
                    "$ref": "#/definitions/PacketAddressClassifier"
                },
                "binding_timestamp": {
                    "type": "integer",
                    "description": "Timestamp of binding",
                    "format": "int64"
                }
            },
            "title": "Combination of IP-MAC-VLAN binding"
        },
        "BpduFilter": {
            "description": "BPDU filter configuration",
            "title": "BPDU filter configuration",
            "required": [
                "enabled"
            ],
            "x-vmw-nsx-module": "SwitchSecuritySwitchingProfile",
            "type": "object",
            "properties": {
                "white_list": {
                    "description": "Pre-defined list of allowed MAC addresses to be excluded from BPDU filtering",
                    "title": "Pre-defined list of allowed MAC addresses to be excluded from BPDU filtering",
                    "minItems": 0,
                    "items": {
                        "type": "string"
                    },
                    "readOnly": false,
                    "maxItems": 32,
                    "type": "array"
                },
                "enabled": {
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Indicates whether BPDU filter is enabled",
                    "title": "Indicates whether BPDU filter is enabled"
                }
            }
        },
        "LbSslCipherInfo": {
            "description": "SSL cipher",
            "title": "SSL cipher",
            "required": [
                "is_default",
                "is_secure",
                "cipher"
            ],
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "properties": {
                "is_default": {
                    "type": "boolean",
                    "description": "Default SSL cipher flag",
                    "title": "Default SSL cipher flag"
                },
                "is_secure": {
                    "type": "boolean",
                    "description": "Secure/insecure SSL cipher flag",
                    "title": "Secure/insecure SSL cipher flag"
                },
                "cipher_group_labels": {
                    "items": {
                        "description": "SSL cipher group",
                        "enum": [
                            "BALANCED",
                            "HIGH_SECURITY",
                            "HIGH_COMPATIBILITY",
                            "CUSTOM"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Several cipher groups might contain the same cipher suite, each cipher\nsuite could have multiple cipher group labels.\n",
                    "title": "Cipher group label list"
                },
                "cipher": {
                    "description": "SSL cipher",
                    "enum": [
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
                        "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
                        "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                        "TLS_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_RSA_WITH_AES_256_CBC_SHA256",
                        "TLS_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
                        "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
                        "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"
                    ],
                    "type": "string"
                }
            }
        },
        "NodeHttpServiceProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/NodeServiceProperties"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "service_properties": {
                            "title": "HTTP Service properties",
                            "description": "HTTP Service properties",
                            "$ref": "#/definitions/HttpServiceProperties"
                        }
                    }
                }
            ],
            "description": "Node HTTP service properties",
            "title": "Node HTTP service properties"
        },
        "UpgradeUnitTypeStats": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "properties": {
                "node_with_issues_count": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of nodes with issues that may cause upgrade failure",
                    "title": "Number of nodes with issues that may cause upgrade failure"
                },
                "node_count": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of nodes",
                    "title": "Number of nodes"
                },
                "version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Version of the upgrade unit",
                    "title": "Version of the upgrade unit"
                },
                "type": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Type of upgrade unit",
                    "title": "Type of upgrade unit"
                }
            }
        },
        "WidgetConfiguration": {
            "x-vmw-nsx-module": "NsxDashboard",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "display_name",
                        "resource_type"
                    ],
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "NsxDashboard",
                    "type": "object",
                    "properties": {
                        "resource_type": {
                            "description": "Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration and ContainerConfiguration.",
                            "title": "Widget visualization type",
                            "enum": [
                                "LabelValueConfiguration",
                                "DonutConfiguration",
                                "MultiWidgetConfiguration",
                                "ContainerConfiguration",
                                "StatsConfiguration",
                                "GridConfiguration"
                            ],
                            "readOnly": true,
                            "maxLength": 255,
                            "type": "string"
                        },
                        "display_name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "Title of the widget.",
                            "title": "Widget Title"
                        },
                        "datasources": {
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/Datasource"
                            },
                            "type": "array",
                            "description": "The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.",
                            "title": "Array of Datasource Instances with their relative urls"
                        },
                        "weight": {
                            "format": "int32",
                            "type": "integer",
                            "description": "Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.",
                            "x-deprecated": true,
                            "title": "Weightage or placement of the widget or container"
                        },
                        "footer": {
                            "$ref": "#/definitions/Footer"
                        },
                        "shared": {
                            "type": "boolean",
                            "description": "Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.",
                            "x-deprecated": true,
                            "title": "Visiblity of widgets to other users"
                        },
                        "drilldown_id": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.",
                            "title": "Id of drilldown widget"
                        },
                        "is_drilldown": {
                            "default": false,
                            "type": "boolean",
                            "description": "Set to true if this widget should be used as a drilldown.",
                            "title": "Set as a drilldown widget"
                        }
                    }
                }
            ],
            "description": "Describes the configuration of a widget to be displayed on the dashboard. WidgetConfiguration is a base type that provides attributes of a widget in-general.",
            "title": "Dashboard Widget Configuration"
        },
        "LbSslCipherAndProtocolListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "ciphers",
                        "protocols"
                    ],
                    "type": "object",
                    "properties": {
                        "ciphers": {
                            "items": {
                                "$ref": "#/definitions/LbSslCipherInfo"
                            },
                            "type": "array",
                            "description": "List of SSL ciphers",
                            "title": "List of SSL ciphers"
                        },
                        "protocols": {
                            "items": {
                                "$ref": "#/definitions/LbSslProtocolInfo"
                            },
                            "type": "array",
                            "description": "List of SSL protocols",
                            "title": "List of SSL protocols"
                        }
                    }
                }
            ]
        },
        "IpAddressInfo": {
            "x-vmw-nsx-module": "Inventory",
            "type": "object",
            "description": "Ipaddress information of the fabric node.",
            "properties": {
                "source": {
                    "readOnly": true,
                    "enum": [
                        "VM_TOOLS"
                    ],
                    "type": "string",
                    "description": "Source of the ipaddress information.",
                    "title": "Source of the ipaddress information."
                },
                "ip_addresses": {
                    "items": {
                        "description": "IPv4 or IPv6 address",
                        "format": "ip",
                        "type": "string"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "IP Addresses of the the virtual network interface, as discovered in the source.",
                    "title": "IP Addresses of the the virtual network interface, as discovered in the source."
                }
            },
            "title": "Ipaddress information of the fabric node."
        },
        "IpfixCollector": {
            "x-vmw-nsx-module": "Ipfix",
            "required": [
                "collector_ip_address"
            ],
            "type": "object",
            "properties": {
                "collector_ip_address": {
                    "description": "IP address for the IPFIX collector",
                    "format": "ip",
                    "type": "string"
                },
                "collector_port": {
                    "description": "Port for the IPFIX collector",
                    "title": "Port for the IPFIX collector",
                    "default": 4739,
                    "format": "int32",
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                }
            }
        },
        "NiocProfile": {
            "x-vmw-nsx-module": "NiocProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseHostSwitchProfile"
                },
                {
                    "x-vmw-nsx-module": "NiocProfile",
                    "type": "object",
                    "properties": {
                        "host_infra_traffic_res": {
                            "items": {
                                "$ref": "#/definitions/ResourceAllocation"
                            },
                            "type": "array",
                            "description": "host_infra_traffic_res specifies bandwidth allocation for\nvarious traffic resources.\n",
                            "title": "Resource allocation associated with NiocProfile"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "The enabled property specifies the status of NIOC feature.\nWhen enabled is set to true, NIOC feature is turned on and\nthe bandwidth allocations specified for the traffic resources\nare enforced. When enabled is set to false, NIOC feature\nis turned off and no bandwidth allocation is guaranteed.\nBy default, enabled will be set to true.\n",
                            "title": "Enabled status of NIOC feature"
                        }
                    }
                }
            ],
            "description": "This profile is created for Network I/O Control(NIOC).\n",
            "title": "Profile for Nioc"
        },
        "LbClientCertificateSubjectDnCondition": {
            "description": "Match condition for client certficate subject DN",
            "title": "Match condition for client certficate subject DN",
            "required": [
                "subject_dn"
            ],
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "properties": {
                "case_sensitive": {
                    "default": true,
                    "type": "boolean",
                    "description": "If true, case is significant when comparing subject DN value.\n",
                    "title": "A case sensitive flag for subject DN comparing"
                },
                "match_type": {
                    "description": "Match type of subject DN",
                    "default": "REGEX",
                    "enum": [
                        "STARTS_WITH",
                        "ENDS_WITH",
                        "EQUALS",
                        "CONTAINS",
                        "REGEX"
                    ],
                    "type": "string"
                },
                "subject_dn": {
                    "type": "string",
                    "description": "Value of subject DN",
                    "title": "Value of subject DN"
                }
            }
        },
        "UpgradeBundleFetchRequest": {
            "description": "URL and other fetch requests of upgrade bundle",
            "title": "Fetch request for fetching upgrade bundle",
            "required": [
                "url"
            ],
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "properties": {
                "url": {
                    "readOnly": false,
                    "type": "string",
                    "description": "URL for uploading upgrade bundle",
                    "title": "URL of upgrade bundle"
                }
            }
        },
        "HostInfraTrafficType": {
            "x-vmw-nsx-module": "NiocProfile",
            "type": "object",
            "description": "The traffic_name specifies the infrastructure traffic type and it\nmust be one of the following system-defined types:\nFAULT_TOLERANCE is traffic for failover and recovery.\nHBR is traffic for Host based replication.\nISCSI is traffic for Internet Small Computer System Interface.\nMANAGEMENT is traffic for host management.\nNFS is traffic related to file transfer in network file system.\nVDP is traffic for vSphere data protection.\nVIRTUAL_MACHINE is traffic generated by virtual machines.\nVMOTION is traffic for computing resource migration.\nVSAN is traffic generated by virtual storage area network.\nThe dynamic_res_pool_name provides a name for the resource pool.\nIt can be any arbitrary string.\nEither traffic_name or dynamic_res_pool_name must be set.\nIf both are specified or omitted, an error will be returned.\n",
            "properties": {
                "dynamic_res_pool_name": {
                    "type": "string",
                    "description": "Dynamic resource pool traffic name",
                    "title": "Dynamic resource pool traffic name"
                },
                "traffic_name": {
                    "enum": [
                        "FAULT_TOLERANCE",
                        "HBR",
                        "ISCSI",
                        "MANAGEMENT",
                        "NFS",
                        "VDP",
                        "VIRTUAL_MACHINE",
                        "VMOTION",
                        "VSAN"
                    ],
                    "type": "string",
                    "description": "Traffic types",
                    "title": "Traffic types"
                }
            },
            "title": "Enumerate all types of traffic"
        },
        "ErrorInfo": {
            "x-vmw-nsx-module": "InventoryCmObj",
            "type": "object",
            "description": "Error information",
            "properties": {
                "timestamp": {
                    "description": "Timestamp when the error occurred",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "error_message": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Error message",
                    "title": "Error message"
                }
            },
            "title": "Error information"
        },
        "LbAppProfileListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbAppProfile"
                            },
                            "type": "array",
                            "description": "paginated list of load balancer application profiles",
                            "title": "paginated list of load balancer application profiles"
                        }
                    }
                }
            ]
        },
        "Datasource": {
            "description": "An instance of a datasource configuration.",
            "title": "Datasource Instance",
            "required": [
                "display_name",
                "urls"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "display_name": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "Name of a datasource instance.",
                    "title": "Datasource instance's display name"
                },
                "urls": {
                    "items": {
                        "$ref": "#/definitions/UrlAlias"
                    },
                    "type": "array",
                    "description": "Array of urls relative to the datasource configuration. For example, api/v1/fabric/nodes is a relative url of nsx-manager instance.",
                    "title": "Array of relative urls and their aliases"
                }
            }
        },
        "SshKeyProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/SshKeyBaseProperties"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "required": [
                        "type",
                        "value"
                    ],
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "SSH key type",
                            "title": "SSH key type"
                        },
                        "value": {
                            "type": "string",
                            "description": "SSH key value",
                            "title": "SSH key value"
                        }
                    }
                }
            ]
        },
        "Lag": {
            "description": "LACP group",
            "title": "LACP group",
            "required": [
                "load_balance_algorithm",
                "mode",
                "name",
                "number_of_uplinks"
            ],
            "x-vmw-nsx-module": "UplinkHostSwitchProfile",
            "type": "object",
            "properties": {
                "uplinks": {
                    "description": "uplink names",
                    "title": "uplink names",
                    "items": {
                        "$ref": "#/definitions/Uplink"
                    },
                    "readOnly": true,
                    "maxItems": 32,
                    "type": "array"
                },
                "name": {
                    "type": "string",
                    "description": "Lag name",
                    "title": "Lag name"
                },
                "number_of_uplinks": {
                    "description": "number of uplinks",
                    "format": "int32",
                    "title": "number of uplinks",
                    "maximum": 32,
                    "minimum": 2,
                    "type": "integer"
                },
                "timeout_type": {
                    "default": "SLOW",
                    "enum": [
                        "SLOW",
                        "FAST"
                    ],
                    "type": "string",
                    "description": "LACP timeout type",
                    "title": "LACP timeout type"
                },
                "load_balance_algorithm": {
                    "enum": [
                        "SRCMAC",
                        "DESTMAC",
                        "SRCDESTMAC",
                        "SRCDESTIPVLAN",
                        "SRCDESTMACIPPORT"
                    ],
                    "type": "string",
                    "description": "LACP load balance Algorithm",
                    "title": "LACP load balance Algorithm"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "unique id",
                    "title": "unique id"
                },
                "mode": {
                    "enum": [
                        "ACTIVE",
                        "PASSIVE"
                    ],
                    "type": "string",
                    "description": "LACP group mode",
                    "title": "LACP group mode"
                }
            }
        },
        "TraceflowObservationReceived": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/TraceflowObservation"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "vtep_label": {
                            "format": "int64",
                            "type": "integer",
                            "description": "The virtual tunnel endpoint label",
                            "title": "The virtual tunnel endpoint label"
                        },
                        "uplink_name": {
                            "type": "string",
                            "description": "The name of the uplink the traceflow packet is received on",
                            "title": "The name of the uplink the traceflow packet is received on"
                        },
                        "local_ip_address": {
                            "description": "IP address of the destination end of the tunnel",
                            "format": "ip",
                            "type": "string"
                        },
                        "remote_ip_address": {
                            "description": "IP address of the source end of the tunnel",
                            "format": "ip",
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "IpMacPair": {
            "description": "IP and MAC pair.",
            "title": "IP and MAC pair.",
            "required": [
                "ip"
            ],
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "properties": {
                "ip": {
                    "description": "IP address",
                    "format": "ip",
                    "readOnly": false,
                    "type": "string"
                },
                "mac": {
                    "description": "MAC address",
                    "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                    "readOnly": false,
                    "type": "string"
                }
            }
        },
        "AuditLog": {
            "description": "Audit log in RFC5424 format",
            "title": "Audit log in RFC5424 format",
            "required": [
                "procid",
                "full_log",
                "appname",
                "timestamp",
                "hostname",
                "struct_data",
                "priority",
                "facility",
                "msgid",
                "message"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "priority": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Priority field of the log",
                    "title": "Priority field of the log"
                },
                "procid": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Process ID field of the log",
                    "title": "Process ID field of the log"
                },
                "facility": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Facility field of the log",
                    "title": "Facility field of the log"
                },
                "full_log": {
                    "type": "string",
                    "description": "Full log with both header and message",
                    "title": "Full log with both header and message"
                },
                "msgid": {
                    "type": "string",
                    "description": "Message ID field of the log",
                    "title": "Message ID field of the log"
                },
                "appname": {
                    "type": "string",
                    "description": "Application name field of the log",
                    "title": "Application name field of the log"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Date and time in UTC of the log",
                    "title": "Date and time in UTC of the log"
                },
                "message": {
                    "type": "string",
                    "description": "Message field of the log",
                    "title": "Message field of the log"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname field of the log",
                    "title": "Hostname field of the log"
                },
                "struct_data": {
                    "title": "Structured data field of the log",
                    "description": "Structured data field of the log",
                    "$ref": "#/definitions/StructuredData"
                }
            }
        },
        "VerifiableAsymmetricLoginCredential": {
            "x-vmw-nsx-module": "Types",
            "allOf": [
                {
                    "$ref": "#/definitions/LoginCredential"
                },
                {
                    "x-vmw-nsx-module": "Types",
                    "type": "object",
                    "properties": {
                        "asymmetric_credential": {
                            "type": "string",
                            "description": "Asymmetric login credential",
                            "title": "Asymmetric login credential"
                        },
                        "credential_verifier": {
                            "type": "string",
                            "description": "Credential verifier",
                            "title": "Credential verifier"
                        },
                        "credential_key": {
                            "type": "string",
                            "description": "Credential key",
                            "title": "Credential key"
                        }
                    }
                }
            ]
        },
        "IPSecVPNDPDProfileListResult": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNDPDProfile"
                            },
                            "type": "array",
                            "description": "IPSec DPD Profile list results",
                            "title": "IPSec DPD Profile list results"
                        }
                    }
                }
            ],
            "description": "List all the dead peer detection (DPD) profiles.",
            "title": "List dead peer detection (DPD) profiles"
        },
        "PacketCaptureSessionList": {
            "x-vmw-nsx-module": "PacketCapture",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "PacketCapture",
                    "required": [
                        "result_count"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/PacketCaptureSession"
                            },
                            "type": "array",
                            "description": "Packet capture list for all sessoins",
                            "title": "Packet capture list for all sessoins"
                        },
                        "result_count": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Total capture session count",
                            "title": "Total capture session count"
                        }
                    }
                }
            ]
        },
        "PolicyBasedIPSecVPNSession": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/IPSecVPNSession"
                },
                {
                    "required": [
                        "policy_rules"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "policy_rules": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNPolicyRule"
                            },
                            "type": "array",
                            "description": "Policy rules",
                            "title": "Policy rules"
                        }
                    }
                }
            ],
            "description": "A Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security associations is negotiated for each pair of local and peer subnet.",
            "title": "Policy based VPN session"
        },
        "PoolMemberSettingList": {
            "description": "List of PoolMemberSetting",
            "title": "List of PoolMemberSetting",
            "required": [
                "members"
            ],
            "x-vmw-nsx-module": "LoadBalancer",
            "type": "object",
            "properties": {
                "members": {
                    "items": {
                        "$ref": "#/definitions/PoolMemberSetting"
                    },
                    "type": "array",
                    "description": "List of pool member settings to be passed to add, update and remove APIs\n",
                    "title": "List of pool member settings to be passed to add, update and remove APIs\n"
                }
            }
        },
        "AuditLogListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "last_full_sync_timestamp",
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "last_full_sync_timestamp": {
                            "type": "string",
                            "description": "Timestamp of the last full audit log collection",
                            "title": "Timestamp of the last full audit log collection"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/AuditLog"
                            },
                            "type": "array",
                            "description": "Audit log results",
                            "title": "Audit log results"
                        }
                    }
                }
            ],
            "description": "Audit log collection results",
            "title": "Audit log collection results"
        },
        "BridgeEndpointStatistics": {
            "x-vmw-nsx-module": "AggSvcBridging",
            "allOf": [
                {
                    "$ref": "#/definitions/AggregatedDataCounter"
                },
                {
                    "x-vmw-nsx-module": "AggSvcBridging",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "endpoint_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The id of the bridge endpoint",
                            "title": "The id of the bridge endpoint"
                        }
                    }
                }
            ]
        },
        "TeamingPolicy": {
            "description": "Uplink Teaming Policy",
            "title": "Uplink Teaming Policy",
            "required": [
                "policy",
                "active_list"
            ],
            "x-vmw-nsx-module": "UplinkHostSwitchProfile",
            "type": "object",
            "properties": {
                "policy": {
                    "enum": [
                        "FAILOVER_ORDER",
                        "LOADBALANCE_SRCID"
                    ],
                    "type": "string",
                    "description": "Teaming policy",
                    "title": "Teaming policy"
                },
                "standby_list": {
                    "items": {
                        "$ref": "#/definitions/Uplink"
                    },
                    "type": "array",
                    "description": "List of Uplinks used in standby list",
                    "title": "List of Uplinks used in standby list"
                },
                "active_list": {
                    "items": {
                        "$ref": "#/definitions/Uplink"
                    },
                    "type": "array",
                    "description": "List of Uplinks used in active list",
                    "title": "List of Uplinks used in active list"
                }
            }
        },
        "AdvertiseRule": {
            "x-vmw-nsx-module": "Routing",
            "required": [
                "networks"
            ],
            "type": "object",
            "properties": {
                "action": {
                    "default": "ALLOW",
                    "enum": [
                        "DENY",
                        "ALLOW"
                    ],
                    "type": "string",
                    "description": "ALLOW action enables the advertisment and DENY action disables the advertisement of a filtered routes to the connected TIER0 router.",
                    "title": "Action to ALLOW or DENY advertisement of routes"
                },
                "rule_filter": {
                    "title": "Rule filter for the advertise rule",
                    "description": "Rule filter for the advertise rule",
                    "$ref": "#/definitions/AdvertisementRuleFilter"
                },
                "display_name": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "Display name",
                    "title": "Display name"
                },
                "networks": {
                    "items": {
                        "description": "IPv4 CIDR Block",
                        "format": "ipv4-cidr-block",
                        "type": "string"
                    },
                    "type": "array",
                    "description": "network(CIDR) to be routed",
                    "title": "network(CIDR) to be routed"
                },
                "description": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Description",
                    "title": "Description"
                }
            }
        },
        "LbHttpSslCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "client_supported_ssl_ciphers": {
                            "items": {
                                "description": "SSL cipher",
                                "enum": [
                                    "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
                                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_RSA_WITH_AES_256_CBC_SHA256",
                                    "TLS_RSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Cipher list which supported by client",
                            "title": "Cipher list which supported by client"
                        },
                        "client_certificate_issuer_dn": {
                            "title": "The issuer DN match condition of the client certificate",
                            "description": "The issuer DN match condition of the client certificate for an\nestablished SSL connection\n",
                            "$ref": "#/definitions/LbClientCertificateIssuerDnCondition"
                        },
                        "client_certificate_subject_dn": {
                            "title": "The subject DN match condition of the client certificate",
                            "description": "The subject DN match condition of the client certificate for an\nestablished SSL connection\n",
                            "$ref": "#/definitions/LbClientCertificateSubjectDnCondition"
                        },
                        "used_ssl_cipher": {
                            "description": "Cipher used for an established SSL connection",
                            "enum": [
                                "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                                "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                                "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
                                "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
                                "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
                                "TLS_RSA_WITH_AES_256_CBC_SHA",
                                "TLS_RSA_WITH_AES_128_CBC_SHA",
                                "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
                                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                                "TLS_RSA_WITH_AES_128_CBC_SHA256",
                                "TLS_RSA_WITH_AES_128_GCM_SHA256",
                                "TLS_RSA_WITH_AES_256_CBC_SHA256",
                                "TLS_RSA_WITH_AES_256_GCM_SHA384",
                                "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
                                "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                                "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                                "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                                "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                                "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
                                "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
                                "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
                                "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
                                "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
                                "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
                                "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
                                "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
                                "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
                                "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"
                            ],
                            "type": "string"
                        },
                        "session_reused": {
                            "description": "The type of SSL session reused",
                            "default": "IGNORE",
                            "enum": [
                                "IGNORE",
                                "REUSED",
                                "NEW"
                            ],
                            "type": "string"
                        },
                        "used_protocol": {
                            "description": "Protocol of an established SSL connection",
                            "enum": [
                                "SSL_V2",
                                "SSL_V3",
                                "TLS_V1",
                                "TLS_V1_1",
                                "TLS_V1_2"
                            ],
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "This condition is used to match SSL handshake and SSL connection at\nall phases.If multiple properties are configured, the rule is considered\na match when all the configured properties are matched.\n",
            "title": "Condition to match SSL handshake and SSL connection"
        },
        "FirewallSection": {
            "x-vmw-nsx-module": "Firewall",
            "allOf": [
                {
                    "$ref": "#/definitions/DSSection"
                },
                {
                    "x-vmw-nsx-module": "Firewall",
                    "type": "object",
                    "properties": {
                        "enforced_on": {
                            "readOnly": true,
                            "type": "string",
                            "description": "This attribute represents enforcement point of firewall section. For example, firewall section enforced on logical port with attachment type bridge endpoint will have 'BRIDGEENDPOINT' value, firewall section enforced on logical router will have 'LOGICALROUTER' value and rest have 'VIF' value.",
                            "title": "Firewall Section Enforcement type"
                        },
                        "locked": {
                            "default": false,
                            "readOnly": true,
                            "type": "boolean",
                            "description": "Section is locked/unlocked.",
                            "title": "Section Locked"
                        },
                        "lock_modified_by": {
                            "readOnly": true,
                            "type": "string",
                            "description": "ID of the user who last modified the lock for the section.",
                            "title": "Lock modified by user"
                        },
                        "lock_modified_time": {
                            "description": "Section locked/unlocked time in epoch milliseconds.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "comments": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Comments for section lock/unlock.",
                            "title": "Section lock/unlock comments"
                        },
                        "autoplumbed": {
                            "default": false,
                            "readOnly": true,
                            "type": "boolean",
                            "description": "This flag indicates whether it is an auto-plumbed section that is associated to a LogicalRouter. Auto-plumbed sections are system owned and cannot be updated via the API.",
                            "title": "Tells if a section is auto-plumbed or not"
                        }
                    }
                }
            ]
        },
        "AppProfileListResult": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/AppProfile"
                            },
                            "type": "array",
                            "description": "AppProfile IDs",
                            "title": "AppProfile IDs"
                        }
                    }
                }
            ],
            "description": "App Profile ID list",
            "title": "App Profile ID list"
        },
        "BridgeEndpointStatus": {
            "x-vmw-nsx-module": "AggSvcBridging",
            "type": "object",
            "properties": {
                "active_nodes": {
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "The Ids of the transport nodes which actively serve the endpoint.",
                    "title": "The Ids of the transport nodes which actively serve the endpoint."
                },
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "endpoint_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The id of the bridge endpoint",
                    "title": "The id of the bridge endpoint"
                }
            }
        },
        "ComputeManager": {
            "x-vmw-nsx-module": "InventoryCmObj",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "InventoryCmObj",
                    "required": [
                        "origin_type",
                        "server"
                    ],
                    "type": "object",
                    "properties": {
                        "credential": {
                            "readOnly": false,
                            "title": "Login credentials for the compute manager",
                            "description": "Login credentials for the compute manager",
                            "$ref": "#/definitions/LoginCredential"
                        },
                        "origin_properties": {
                            "items": {
                                "$ref": "#/definitions/KeyValuePair"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Key-Value map of additional specific properties of compute manager",
                            "title": "Key-Value map of additional specific properties of compute manager"
                        },
                        "origin_type": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Compute manager type like vCenter",
                            "title": "Compute manager type like vCenter"
                        },
                        "server": {
                            "readOnly": false,
                            "format": "hostname-or-ip",
                            "type": "string",
                            "description": "IP address or hostname of compute manager",
                            "title": "IP address or hostname of compute manager"
                        }
                    }
                }
            ]
        },
        "FilterRequest": {
            "description": "Filter request parameters",
            "title": "Filter request",
            "required": [
                "field_names",
                "value"
            ],
            "x-vmw-nsx-module": "Search",
            "type": "object",
            "properties": {
                "field_names": {
                    "type": "string",
                    "description": "Comma seperated fields to be filtered on",
                    "title": "Field Names"
                },
                "value": {
                    "type": "string",
                    "description": "Filter value",
                    "title": "Value"
                }
            }
        },
        "BFDStatusCount": {
            "x-vmw-nsx-module": "Heatmap",
            "type": "object",
            "properties": {
                "bfd_admin_down_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of tunnels in BFD admin down state",
                    "title": "Number of tunnels in BFD admin down state"
                },
                "bfd_up_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of tunnels in BFD up state",
                    "title": "Number of tunnels in BFD up state"
                },
                "bfd_down_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of tunnels in BFD down state",
                    "title": "Number of tunnels in BFD down state"
                },
                "bfd_init_count": {
                    "format": "int32",
                    "type": "integer",
                    "description": "Number of tunnels in BFD init state",
                    "title": "Number of tunnels in BFD init state"
                }
            }
        },
        "ContainerConfiguration": {
            "x-vmw-nsx-module": "NsxDashboard",
            "allOf": [
                {
                    "$ref": "#/definitions/WidgetConfiguration"
                },
                {
                    "x-vmw-nsx-module": "NsxDashboard",
                    "type": "object",
                    "properties": {
                        "widgets": {
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/WidgetItem"
                            },
                            "type": "array",
                            "description": "If not specified, creates an empty container.",
                            "title": "Widgets held by the container"
                        },
                        "navigation": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "Hyperlink of the specified UI page that provides details.",
                            "title": "Navigation to a specified UI page"
                        },
                        "labels": {
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/Label"
                            },
                            "type": "array",
                            "description": "Labels for the container.",
                            "title": "Labels"
                        },
                        "span": {
                            "default": 2,
                            "format": "int32",
                            "type": "integer",
                            "description": "Represents the horizontal span of the container.",
                            "title": "Number of widgets to be held in this container horizontally"
                        }
                    }
                }
            ],
            "description": "Represents a container to group widgets that belong to a common category or have a common purpose.",
            "title": "Container that holds widgets"
        },
        "FirewallStats": {
            "x-vmw-nsx-module": "FirewallStatsRule",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "FirewallStatsRule",
                    "type": "object",
                    "properties": {
                        "total_session_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Aggregated number of sessions processed by the all firewall rules. This is aggregated statistic which are computed with lower frequency compared to individual generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.",
                            "title": "Total Sessions count"
                        },
                        "packet_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Aggregated number of packets processed by the rule.",
                            "title": "packets count"
                        },
                        "popularity_index": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "This is calculated by sessions count divided by age of the rule.",
                            "title": "The index of the popularity of firewall rule"
                        },
                        "max_session_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Maximum value of sessions count of all firewall rules of the type. This is aggregated statistic which are computed with lower frequency compared to generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.",
                            "title": "Maximum Sessions count"
                        },
                        "byte_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Aggregated number of bytes processed by the rule.",
                            "title": "bytes count"
                        },
                        "max_popularity_index": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Maximum value of popularity index of all firewall rules of the type. This is aggregated statistic which are computed with lower frequency compared to individual generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.",
                            "title": "The maximum popularity index"
                        },
                        "session_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "Aggregated number of sessions processed by the rule.",
                            "title": "sessions count"
                        },
                        "rule_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Rule Identifier of the Firewall rule. This is a globally unique number.",
                            "title": "Firewall rule Id"
                        }
                    }
                }
            ]
        },
        "ConfigurationState": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "Describes status of configuration of an entity",
            "properties": {
                "state": {
                    "readOnly": true,
                    "enum": [
                        "pending",
                        "in_progress",
                        "success",
                        "failed",
                        "partial_success",
                        "orphaned",
                        "unknown"
                    ],
                    "type": "string",
                    "description": "Gives details of state of desired configuration",
                    "title": "Overall state of desired configuration"
                },
                "details": {
                    "items": {
                        "$ref": "#/definitions/ConfigurationStateElement"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Array of configuration state of various sub systems",
                    "title": "Array of configuration state of various sub systems"
                },
                "failure_code": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Error code",
                    "title": "Error code"
                },
                "failure_message": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Error message in case of failure",
                    "title": "Error message in case of failure"
                }
            },
            "title": "Describes status of configuration of an entity"
        },
        "DonutConfiguration": {
            "x-vmw-nsx-module": "NsxDashboard",
            "allOf": [
                {
                    "$ref": "#/definitions/WidgetConfiguration"
                },
                {
                    "required": [
                        "sections"
                    ],
                    "x-vmw-nsx-module": "NsxDashboard",
                    "type": "object",
                    "properties": {
                        "navigation": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "Hyperlink of the specified UI page that provides details.",
                            "title": "Navigation to a specified UI page"
                        },
                        "display_count": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, displays the count of entities in the donut",
                            "title": "Show or hide the count of entities"
                        },
                        "sections": {
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/DonutSection"
                            },
                            "type": "array",
                            "description": "Sections",
                            "title": "Sections"
                        },
                        "label": {
                            "title": "Label of the Donut Configuration",
                            "description": "Displayed at the middle of the donut, by default. It labels the entities of donut.",
                            "$ref": "#/definitions/Label"
                        }
                    }
                }
            ],
            "description": "Represents configuration of a Donut",
            "title": "Donut Configuration"
        },
        "ExtraConfigHostSwitchProfile": {
            "x-vmw-nsx-module": "ExtraConfigHostSwitchProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseHostSwitchProfile"
                },
                {
                    "x-vmw-nsx-module": "ExtraConfigHostSwitchProfile",
                    "type": "object",
                    "properties": {
                        "extra_configs": {
                            "items": {
                                "$ref": "#/definitions/ExtraConfig"
                            },
                            "type": "array",
                            "description": "list of extra configs",
                            "title": "list of extra configs"
                        }
                    }
                }
            ],
            "description": "Profile for extra configs in host switch",
            "title": "Profile for extra configs in host switch"
        },
        "IPSecVPNSessionStatistics": {
            "x-vmw-nsx-module": "VPNStatistics",
            "type": "object",
            "description": "Session statistics gives aggregated statistics of all policies for all the tunnels.",
            "properties": {
                "ike_traffic_statistics": {
                    "readOnly": true,
                    "title": "IKE traffic statistics",
                    "description": "Traffic statistics for IPSec VPN IKE session.",
                    "$ref": "#/definitions/IPSecVPNIKETrafficStatistics"
                },
                "display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Display name of vpn session.",
                    "title": "Display name"
                },
                "policy_statistics": {
                    "items": {
                        "$ref": "#/definitions/IPSecVPNPolicyTrafficStatistics"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Gives aggregate traffic statistics across all ipsec tunnels and individual tunnel statistics.",
                    "title": "IPSec policy statistics"
                },
                "partial_stats": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Partial statistics if true specifies that the statistics are only from active node.",
                    "title": "Partial Statistics"
                },
                "ipsec_vpn_session_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "UUID of vpn session.",
                    "title": "Session identifier"
                },
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "ike_status": {
                    "readOnly": true,
                    "title": "IKE status summary",
                    "description": "Status for IPSec VPN IKE session UP/DOWN and fail reason if IKE session is down.",
                    "$ref": "#/definitions/IPSecVPNIKESessionStatus"
                },
                "aggregate_traffic_counters": {
                    "readOnly": true,
                    "title": "Traffic summary",
                    "description": "Aggregate traffic statistics across all ipsec tunnels.",
                    "$ref": "#/definitions/IPSecVPNTrafficCounters"
                }
            },
            "title": "IPSec VPN session statistics"
        },
        "CommunityMatchExpression": {
            "description": "Community match expression",
            "title": "Community match expression",
            "required": [
                "expression"
            ],
            "x-vmw-nsx-module": "Routing",
            "type": "object",
            "properties": {
                "operator": {
                    "readOnly": true,
                    "enum": [
                        "AND"
                    ],
                    "type": "string",
                    "description": "Operator for evaluating community match expressions.\nAND logical AND operator\n",
                    "title": "Operator"
                },
                "expression": {
                    "items": {
                        "$ref": "#/definitions/CommunityMatchOperation"
                    },
                    "type": "array",
                    "description": "Array of community match operations",
                    "title": "Array of community match operations"
                }
            }
        },
        "MetadataProxyStatisticsPerLogicalSwitch": {
            "x-vmw-nsx-module": "AggSvcMetadataProxy",
            "required": [
                "requests_to_nova_server",
                "succeeded_responses_from_nova_server",
                "logical_switch_id",
                "requests_from_clients",
                "responses_to_clients",
                "error_responses_from_nova_server"
            ],
            "type": "object",
            "properties": {
                "requests_to_nova_server": {
                    "format": "int64",
                    "type": "integer",
                    "description": "requests to nova server",
                    "title": "requests to nova server"
                },
                "responses_to_clients": {
                    "format": "int64",
                    "type": "integer",
                    "description": "responses to clients",
                    "title": "responses to clients"
                },
                "succeeded_responses_from_nova_server": {
                    "format": "int64",
                    "type": "integer",
                    "description": "succeeded responses from  nova server",
                    "title": "succeeded responses from  nova server"
                },
                "logical_switch_id": {
                    "type": "string",
                    "description": "uuid of attached logical switch",
                    "title": "uuid of attached logical switch"
                },
                "requests_from_clients": {
                    "format": "int64",
                    "type": "integer",
                    "description": "requests from clients",
                    "title": "requests from clients"
                },
                "error_responses_from_nova_server": {
                    "format": "int64",
                    "type": "integer",
                    "description": "error responses from  nova server",
                    "title": "error responses from  nova server"
                }
            }
        },
        "NodeServiceProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "required": [
                        "service_name"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "service_name": {
                            "type": "string",
                            "description": "Service name",
                            "title": "Service name"
                        }
                    }
                }
            ],
            "description": "Node service properties",
            "title": "Node service properties"
        },
        "ReorderMigrationRequest": {
            "x-vmw-nsx-module": "Migration",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "is_before": {
                    "default": true,
                    "readOnly": false,
                    "type": "boolean",
                    "description": "flag indicating whether the migration unit group/migration unit is to be placed before or after the specified migration unit group/migration unit",
                    "title": "flag indicating whether the migration unit group/migration unit is to be placed before or after the specified migration unit group/migration unit"
                },
                "id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "id of the migration unit group/migration unit before/after which the migration unit group/migration unit is to be placed",
                    "title": "id of the migration unit group/migration unit before/after which the migration unit group/migration unit is to be placed"
                }
            }
        },
        "ComputeManagerListResult": {
            "x-vmw-nsx-module": "InventoryCmObj",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "InventoryCmObj",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ComputeManager"
                            },
                            "type": "array",
                            "description": "List of compute managers",
                            "title": "List of compute managers"
                        }
                    }
                }
            ],
            "description": "List of compute managers",
            "title": "List of compute managers"
        },
        "Pnic": {
            "description": "Physical NIC specification",
            "title": "Physical NIC specification",
            "required": [
                "uplink_name",
                "device_name"
            ],
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "properties": {
                "uplink_name": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Uplink name for this Pnic. This name will be used to reference this Pnic in other configurations.",
                    "title": "Uplink name for this Pnic. This name will be used to reference this Pnic in other configurations."
                },
                "device_name": {
                    "readOnly": false,
                    "type": "string",
                    "description": "device name or key",
                    "title": "device name or key"
                }
            }
        },
        "Icon": {
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "description": "Icon to be applied at dashboard for widgets and UI elements.",
            "properties": {
                "placement": {
                    "default": "PRE",
                    "enum": [
                        "PRE",
                        "POST"
                    ],
                    "type": "string",
                    "description": "If specified as PRE, the icon appears before the UI element. If set as POST, the icon appears after the UI element.",
                    "title": "Position at which to display icon, if any"
                },
                "type": {
                    "enum": [
                        "ERROR",
                        "WARNING",
                        "INFO",
                        "INPROGRESS",
                        "SUCCESS",
                        "DETAIL",
                        "NOT_AVAILABLE"
                    ],
                    "type": "string",
                    "description": "Icon will be rendered based on its type. For example, if ERROR is chosen, then icon representing error will be rendered.",
                    "title": "Type of icon"
                },
                "tooltip": {
                    "items": {
                        "$ref": "#/definitions/Tooltip"
                    },
                    "type": "array",
                    "description": "Multi-line text to be shown on tooltip while hovering over the icon.",
                    "title": "Multi-line tooltip"
                }
            },
            "title": "Icon"
        },
        "SupportBundleResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "request_properties": {
                    "readOnly": true,
                    "title": "Request properties",
                    "description": "Request properties",
                    "$ref": "#/definitions/SupportBundleRequest"
                },
                "failed_nodes": {
                    "items": {
                        "$ref": "#/definitions/FailedNodeSupportBundleResult"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Nodes where bundles were not generated or not copied to remote server",
                    "title": "Nodes where bundles were not generated or not copied to remote server"
                },
                "success_nodes": {
                    "items": {
                        "$ref": "#/definitions/SuccessNodeSupportBundleResult"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Nodes whose bundles were successfully copied to remote file server",
                    "title": "Nodes whose bundles were successfully copied to remote file server"
                },
                "remaining_nodes": {
                    "items": {
                        "$ref": "#/definitions/RemainingSupportBundleNode"
                    },
                    "type": "array",
                    "description": "Nodes where bundle generation is pending or in progress",
                    "title": "Nodes where bundle generation is pending or in progress"
                }
            }
        },
        "LbPersistenceProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "persistence_shared": {
                            "default": false,
                            "type": "boolean",
                            "description": "If persistence shared flag is not set in the cookie persistence profile\nbound to a virtual server, it defaults to cookie persistence that is\nprivate to each virtual server and is qualified by the pool. This is\naccomplished by load balancer inserting a cookie with name in the\nformat &lt;name&gt;.&lt;virtual_server_id&gt;.&lt;pool_id&gt;.\nIf persistence shared flag is set in the cookie persistence profile, in\ncookie insert mode, cookie persistence could be shared across multiple\nvirtual servers that are bound to the same pools. The cookie name would\nbe changed to &lt;name&gt;.&lt;profile-id&gt;.&lt;pool-id&gt;.\nIf persistence shared flag is not set in the sourceIp persistence\nprofile bound to a virtual server, each virtual server that the profile\nis bound to maintains its own private persistence table.\nIf persistence shared flag is set in the sourceIp persistence profile,\nall virtual servers the profile is bound to share the same persistence\ntable.\n",
                            "title": "Persistence shared flag for the associated virtual servers"
                        },
                        "resource_type": {
                            "description": "Source-ip persistence ensures all connections from a client (identified by\nIP address) are sent to the same backend server for a specified period.\nCookie persistence allows related client connections, identified by the\nsame cookie in HTTP requests, to be redirected to the same server.\n",
                            "enum": [
                                "LbCookiePersistenceProfile",
                                "LbSourceIpPersistenceProfile"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "NodeAuthProviderVidmStatus": {
            "description": "Node AAA provider vIDM status",
            "title": "Node AAA provider vIDM status",
            "required": [
                "runtime_state",
                "vidm_enable"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "runtime_state": {
                    "type": "string",
                    "description": "AAA provider vIDM status",
                    "title": "AAA provider vIDM status"
                },
                "vidm_enable": {
                    "type": "boolean",
                    "description": "vIDM enable flag",
                    "title": "vIDM enable flag"
                }
            }
        },
        "VirtualServiceInstance": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseServiceInstance"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
                    "type": "object"
                }
            ],
            "description": "VirtualServiceInstance is a custom instance to be used when NSX is not handling the lifecycles of appliance/s and the user is not bringing their own appliance (BYOD).",
            "title": "Custom Instance of a service"
        },
        "VirtualMachine": {
            "x-vmw-nsx-module": "Inventory",
            "allOf": [
                {
                    "$ref": "#/definitions/DiscoveredResource"
                },
                {
                    "x-vmw-nsx-module": "Inventory",
                    "required": [
                        "local_id_on_host",
                        "external_id",
                        "power_state",
                        "compute_ids"
                    ],
                    "type": "object",
                    "properties": {
                        "source": {
                            "title": "Reference of the Host or Public Cloud Gateway that reported the VM",
                            "description": "Reference of the Host or Public Cloud Gateway that reported the VM",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "local_id_on_host": {
                            "type": "string",
                            "description": "Id of the vm unique within the host.",
                            "title": "Id of the vm unique within the host."
                        },
                        "type": {
                            "readOnly": true,
                            "enum": [
                                "EDGE",
                                "SERVICE",
                                "REGULAR"
                            ],
                            "type": "string",
                            "description": "Virtual Machine type; Edge, Service VM or other.",
                            "title": "Virtual Machine type; Edge, Service VM or other."
                        },
                        "power_state": {
                            "enum": [
                                "VM_RUNNING",
                                "VM_STOPPED",
                                "VM_SUSPENDED",
                                "UNKNOWN"
                            ],
                            "type": "string",
                            "description": "Current power state of this virtual machine in the system.",
                            "title": "Current power state of this virtual machine in the system."
                        },
                        "compute_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "List of external compute ids of the virtual machine in the format 'id-type-key:value' , list of external compute ids ['uuid:xxxx-xxxx-xxxx-xxxx', 'moIdOnHost:moref-11', 'instanceUuid:xxxx-xxxx-xxxx-xxxx']",
                            "title": "List of external compute ids of the virtual machine in the format 'id-type-key:value' , list of external compute ids ['uuid:xxxx-xxxx-xxxx-xxxx', 'moIdOnHost:moref-11', 'instanceUuid:xxxx-xxxx-xxxx-xxxx']"
                        },
                        "host_id": {
                            "type": "string",
                            "description": "Id of the host in which this virtual machine exists.",
                            "title": "Id of the host in which this virtual machine exists."
                        },
                        "external_id": {
                            "type": "string",
                            "description": "Current external id of this virtual machine in the system.",
                            "title": "Current external id of this virtual machine in the system."
                        }
                    }
                }
            ]
        },
        "VirtualNetworkInterface": {
            "x-vmw-nsx-module": "Inventory",
            "allOf": [
                {
                    "$ref": "#/definitions/DiscoveredResource"
                },
                {
                    "x-vmw-nsx-module": "Inventory",
                    "required": [
                        "device_key",
                        "owner_vm_id",
                        "vm_local_id_on_host",
                        "mac_address",
                        "host_id",
                        "external_id"
                    ],
                    "type": "object",
                    "properties": {
                        "mac_address": {
                            "type": "string",
                            "description": "MAC address of the virtual network interface.",
                            "title": "MAC address of the virtual network interface."
                        },
                        "device_key": {
                            "type": "string",
                            "description": "Device key of the virtual network interface.",
                            "title": "Device key of the virtual network interface."
                        },
                        "host_id": {
                            "type": "string",
                            "description": "Id of the host on which the vm exists.",
                            "title": "Id of the host on which the vm exists."
                        },
                        "owner_vm_id": {
                            "type": "string",
                            "description": "Id of the vm to which this virtual network interface belongs.",
                            "title": "Id of the vm to which this virtual network interface belongs."
                        },
                        "vm_local_id_on_host": {
                            "type": "string",
                            "description": "Id of the vm unique within the host.",
                            "title": "Id of the vm unique within the host."
                        },
                        "external_id": {
                            "type": "string",
                            "description": "External Id of the virtual network inferface.",
                            "title": "External Id of the virtual network inferface."
                        },
                        "lport_attachment_id": {
                            "type": "string",
                            "description": "LPort Attachment Id of the virtual network interface.",
                            "title": "LPort Attachment Id of the virtual network interface."
                        },
                        "ip_address_info": {
                            "items": {
                                "$ref": "#/definitions/IpAddressInfo"
                            },
                            "type": "array",
                            "description": "IP Addresses of the the virtual network interface, from various sources.",
                            "title": "IP Addresses of the the virtual network interface, from various sources."
                        },
                        "device_name": {
                            "type": "string",
                            "description": "Device name of the virtual network interface.",
                            "title": "Device name of the virtual network interface."
                        }
                    }
                }
            ]
        },
        "MigrationSetupInfo": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "description": "Details about source and destination NSX setup to be migrated",
            "properties": {
                "destination_nsx": {
                    "readOnly": false,
                    "title": "Destination NSX API endpoint",
                    "description": "IP address or hostname of the destination NSX API endpoint.",
                    "$ref": "#/definitions/DestinationNsxApiEndpoint"
                },
                "source_nsx": {
                    "items": {
                        "$ref": "#/definitions/SourceNsxApiEndpoint"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "List of source NSX manager endpoints.",
                    "title": "List of source NSX managers"
                }
            },
            "title": "Details about source and destination NSX setup"
        },
        "DirectoryGroupMemberListResults": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DirectoryGroupMember"
                            },
                            "type": "array",
                            "description": "Directory group member list",
                            "title": "Directory group member list"
                        }
                    }
                }
            ]
        },
        "TaskProperties": {
            "x-vmw-nsx-module": "Common",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Common",
                    "type": "object",
                    "properties": {
                        "status": {
                            "description": "Current status of the task",
                            "enum": [
                                "running",
                                "error",
                                "success",
                                "canceling",
                                "canceled",
                                "killed"
                            ],
                            "readOnly": true,
                            "type": "string"
                        },
                        "async_response_available": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "True if response for asynchronous request is available",
                            "title": "True if response for asynchronous request is available"
                        },
                        "description": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Description of the task",
                            "title": "Description of the task"
                        },
                        "start_time": {
                            "description": "The start time of the task in epoch milliseconds",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "cancelable": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "True if this task can be canceled",
                            "title": "True if this task can be canceled"
                        },
                        "request_method": {
                            "readOnly": true,
                            "type": "string",
                            "description": "HTTP request method",
                            "title": "HTTP request method"
                        },
                        "user": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Name of the user who created this task",
                            "title": "Name of the user who created this task"
                        },
                        "progress": {
                            "description": "Task progress if known, from 0 to 100",
                            "title": "Task progress if known, from 0 to 100",
                            "format": "int64",
                            "maximum": 100,
                            "readOnly": true,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "message": {
                            "readOnly": true,
                            "type": "string",
                            "description": "A message describing the disposition of the task",
                            "title": "A message describing the disposition of the task"
                        },
                        "request_uri": {
                            "readOnly": true,
                            "type": "string",
                            "description": "URI of the method invocation that spawned this task",
                            "title": "URI of the method invocation that spawned this task"
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Identifier for this task",
                            "title": "Identifier for this task"
                        },
                        "end_time": {
                            "description": "The end time of the task in epoch milliseconds",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "Task properties",
            "title": "Task properties"
        },
        "ServiceInsertionServiceListResult": {
            "x-vmw-nsx-module": "ServiceInsertion",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertion",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ServiceDefinition"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of the Service-Insertion Services. The list has to be homogenous.",
                            "title": "Service list"
                        }
                    }
                }
            ],
            "description": "Service List",
            "title": "Service List"
        },
        "MigrationBundleFetchRequest": {
            "description": "URL and other fetch requests of migration bundle",
            "title": "Fetch request for fetching migration bundle",
            "required": [
                "url"
            ],
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "url": {
                    "readOnly": false,
                    "type": "string",
                    "description": "URL for uploading migration bundle",
                    "title": "URL of migration bundle"
                }
            }
        },
        "CrlList": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "CertificateManager",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/Crl"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "CRL list"
                        }
                    }
                }
            ],
            "description": "Crl queries result",
            "title": "Crl queries result"
        },
        "BackupOperationHistory": {
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "description": "Past backup operation details",
            "properties": {
                "inventory_backup_statuses": {
                    "items": {
                        "$ref": "#/definitions/BackupOperationStatus"
                    },
                    "type": "array",
                    "description": "Statuses of previous inventory backups",
                    "title": "Statuses of previous inventory backups"
                },
                "cluster_backup_statuses": {
                    "items": {
                        "$ref": "#/definitions/BackupOperationStatus"
                    },
                    "type": "array",
                    "description": "Statuses of previous cluser backups",
                    "title": "Statuses of previous cluser backups"
                },
                "node_backup_statuses": {
                    "items": {
                        "$ref": "#/definitions/BackupOperationStatus"
                    },
                    "type": "array",
                    "description": "Statuses of previous node backups",
                    "title": "Statuses of previous node backups"
                }
            },
            "title": "Past backup operation details"
        },
        "FeatureUsage": {
            "x-vmw-nsx-module": "License",
            "description": "feature usage result item",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "License",
                    "type": "object",
                    "properties": {
                        "capacity_usage": {
                            "items": {
                                "$ref": "#/definitions/CapacityUsage"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Capacity Usage List",
                            "title": "Capacity Usage List"
                        },
                        "feature": {
                            "readOnly": true,
                            "type": "string",
                            "description": "name of the feature",
                            "title": "name of the feature"
                        }
                    }
                }
            ]
        },
        "RoleBinding": {
            "x-vmw-nsx-module": "AAA",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "AAA",
                    "type": "object",
                    "properties": {
                        "stale": {
                            "readOnly": true,
                            "enum": [
                                "TRUE",
                                "FALSE",
                                "UNKNOWN"
                            ],
                            "type": "string",
                            "description": "Property 'stale' can be considered to have these values - absent  - This type of rolebinding does not support stale property TRUE    - Rolebinding is stale in vIDM meaning the user is no longer present in vIDM FALSE   - Rolebinding is available in vIDM UNKNOWN - Rolebinding's state of staleness in unknown Once rolebindings become stale, they can be deleted using the API POST /aaa/role-bindings?action=delete_stale_bindings",
                            "title": "Stale in vIDM"
                        },
                        "type": {
                            "readOnly": true,
                            "enum": [
                                "remote_user",
                                "remote_group",
                                "local_user",
                                "principal_identity"
                            ],
                            "type": "string",
                            "description": "Type",
                            "title": "Type"
                        },
                        "name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "User/Group's name",
                            "title": "User/Group's name"
                        },
                        "roles": {
                            "items": {
                                "$ref": "#/definitions/Role"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Roles",
                            "title": "Roles"
                        }
                    }
                }
            ],
            "description": "User/Group's role binding",
            "title": "User/Group's role binding"
        },
        "LogicalSwitchStatus": {
            "x-vmw-nsx-module": "LogicalSwitch",
            "type": "object",
            "properties": {
                "num_logical_ports": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Count of Logical Ports belonging to this switch",
                    "title": "Count of Logical Ports belonging to this switch"
                },
                "logical_switch_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Unique ID identifying the the Logical Switch",
                    "title": "Unique ID identifying the the Logical Switch"
                }
            }
        },
        "RegistrationToken": {
            "description": "Appliance registration access token",
            "title": "Appliance registration access token",
            "required": [
                "token",
                "roles"
            ],
            "x-vmw-nsx-module": "RegistrationTokenEndPoint",
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Access token",
                    "title": "Access token"
                },
                "roles": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "List results",
                    "title": "List results"
                }
            }
        },
        "FeatureAccess": {
            "x-vmw-nsx-module": "AAA",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "AAA",
                    "type": "object",
                    "properties": {
                        "information": {
                            "items": {
                                "$ref": "#/definitions/FeatureInfo"
                            },
                            "type": "array",
                            "description": "Feature Info",
                            "title": "Feature Info"
                        },
                        "enabled": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "Feature enabled or not",
                            "title": "Feature enabled or not"
                        },
                        "feature": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Feature",
                            "title": "Feature"
                        }
                    }
                }
            ],
            "description": "Feature access",
            "title": "Feature access"
        },
        "NodeSyslogExporterPropertiesListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NodeSyslogExporterProperties"
                            },
                            "type": "array",
                            "description": "Node syslog exporter results",
                            "title": "Node syslog exporter results"
                        }
                    }
                }
            ],
            "description": "Node syslog exporter list results",
            "title": "Node syslog exporter list results"
        },
        "VniRange": {
            "x-vmw-nsx-module": "Vnim",
            "description": "A range of virtual network identifiers (VNIs)",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Vnim",
                    "required": [
                        "start",
                        "end"
                    ],
                    "type": "object",
                    "properties": {
                        "start": {
                            "description": "Start value for vni range to be used for virtual networks",
                            "title": "Start value of vni range",
                            "format": "int64",
                            "maximum": 16777215,
                            "readOnly": false,
                            "minimum": 5000,
                            "type": "integer"
                        },
                        "end": {
                            "description": "End value for vni range to be used for virtual networks",
                            "title": "End value of vni range",
                            "format": "int64",
                            "maximum": 16777215,
                            "readOnly": false,
                            "minimum": 5000,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "LogicalRouterPortStatisticsPerNode": {
            "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
            "allOf": [
                {
                    "$ref": "#/definitions/AggregatedLogicalRouterPortCounters"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
                    "type": "object",
                    "properties": {
                        "transport_node_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "The ID of the TransportNode",
                            "title": "The ID of the TransportNode"
                        }
                    }
                }
            ]
        },
        "DeploymentTemplate": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "type": "object",
            "description": "Deployment Template holds the attributes specific to partner for which the service is created. These attributes are opaque to NSX.",
            "properties": {
                "attributes": {
                    "description": "List of attributes specific to a partner for which the service is created. There attributes are passed on to the partner appliance and is opaque to the NSX Manager.",
                    "title": "Deployment Template attributes",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    },
                    "readOnly": false,
                    "maxItems": 128,
                    "type": "array"
                },
                "name": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Deployment Template name.",
                    "title": "name"
                }
            },
            "title": "Service Deployment Template"
        },
        "NodeProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "system_time": {
                            "description": "Current time expressed in milliseconds since epoch",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "node_uuid": {
                            "maxLength": 36,
                            "type": "string",
                            "description": "Node Unique Identifier",
                            "title": "Node Unique Identifier"
                        },
                        "motd": {
                            "description": "Message of the day to display when users login to node using the NSX CLI",
                            "title": "Message of the day to display when users login to node using the NSX CLI"
                        },
                        "cli_timeout": {
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer",
                            "description": "NSX CLI inactivity timeout, set to 0 to configure no timeout",
                            "title": "NSX CLI inactivity timeout, set to 0 to configure no timeout"
                        },
                        "kernel_version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Kernel version",
                            "title": "Kernel version"
                        },
                        "export_type": {
                            "readOnly": true,
                            "enum": [
                                "RESTRICTED",
                                "UNRESTRICTED"
                            ],
                            "type": "string",
                            "description": "Export restrictions in effect, if any",
                            "title": "Export restrictions in effect, if any"
                        },
                        "hostname": {
                            "description": "Host name or fully qualified domain name of node",
                            "pattern": "/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/",
                            "type": "string"
                        },
                        "product_version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Product version",
                            "title": "Product version"
                        },
                        "node_version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Node version",
                            "title": "Node version"
                        },
                        "bios_uuid": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Node BIOS Unique Indentifier",
                            "title": "Node BIOS Unique Indentifier"
                        },
                        "timezone": {
                            "type": "string",
                            "description": "Timezone",
                            "title": "Timezone"
                        }
                    }
                }
            ],
            "description": "Node properties",
            "title": "Node properties"
        },
        "VtepTableEntry": {
            "x-vmw-nsx-module": "AggSvcLogicalSwitch",
            "type": "object",
            "properties": {
                "vtep_label": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The virtual tunnel endpoint label",
                    "title": "The virtual tunnel endpoint label"
                },
                "vtep_mac_address": {
                    "type": "string",
                    "description": "The virtual tunnel endpoint MAC address",
                    "title": "The virtual tunnel endpoint MAC address"
                },
                "vtep_ip": {
                    "description": "The virtual tunnel endpoint IP address",
                    "format": "ip",
                    "type": "string"
                },
                "segment_id": {
                    "type": "string",
                    "description": "The segment Id",
                    "title": "The segment Id"
                }
            }
        },
        "UpgradeUnitStatusListResult": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/UpgradeUnitStatus"
                            },
                            "type": "array",
                            "description": "Paged Collection of upgrade units status",
                            "title": "Paged Collection of upgrade units status"
                        }
                    }
                }
            ]
        },
        "PortStatus": {
            "description": "indicates if the RabbitMQ management port is set or not",
            "title": "indicates if the RabbitMQ management port is set or not",
            "required": [
                "enabled"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "indicates if the RabbitMQ management port is set or not",
                    "title": "indicates if the RabbitMQ management port is set or not"
                }
            }
        },
        "TransportProtocolHeader": {
            "x-vmw-nsx-module": "Traceflow",
            "type": "object",
            "properties": {
                "dns_header": {
                    "title": "DNS header",
                    "description": "DNS header",
                    "$ref": "#/definitions/DnsHeader"
                },
                "udp_header": {
                    "title": "UDP header",
                    "description": "UDP header",
                    "$ref": "#/definitions/UdpHeader"
                },
                "dhcp_header": {
                    "title": "DHCP header",
                    "description": "DHCP header",
                    "$ref": "#/definitions/DhcpHeader"
                },
                "tcp_header": {
                    "title": "TCP header",
                    "description": "TCP header",
                    "$ref": "#/definitions/TcpHeader"
                },
                "icmp_echo_request_header": {
                    "title": "ICMP echo request header",
                    "description": "ICMP echo request header",
                    "$ref": "#/definitions/IcmpEchoRequestHeader"
                }
            }
        },
        "IPSecVPNPeerEndpoint": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "peer_address",
                        "peer_id"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "psk": {
                            "type": "string",
                            "description": "IPSec Pre-shared key. Maximum length of this field is 128 characters.",
                            "title": "Pre-shared key"
                        },
                        "peer_id": {
                            "type": "string",
                            "description": "Peer identifier.",
                            "title": "Peer id"
                        },
                        "ipsec_tunnel_profile_id": {
                            "type": "string",
                            "description": "Tunnel profile id to be used. By default it will point to system default profile.",
                            "title": "IPSec tunnel profile id"
                        },
                        "authentication_mode": {
                            "default": "PSK",
                            "enum": [
                                "PSK"
                            ],
                            "type": "string",
                            "description": "For peer authentication only Pre shared key (PSK) mode will be supported.",
                            "title": "Authentication Mode"
                        },
                        "peer_address": {
                            "type": "string",
                            "description": "IPV4 address of peer endpoint on remote site.",
                            "title": "IPV4 address of peer endpoint on remote site."
                        },
                        "connection_initiation_mode": {
                            "default": "INITIATOR",
                            "enum": [
                                "INITIATOR",
                                "RESPOND_ONLY",
                                "ON_DEMAND"
                            ],
                            "type": "string",
                            "description": "Connection initiation mode used by local\nendpoint to establish ike connection with peer endpoint.\nINITIATOR - In this mode local endpoint initiates tunnel\nsetup and will also respond to incoming tunnel setup requests\nfrom peer gateway.\nRESPOND_ONLY - In this mode, local endpoint shall only\nrespond to incoming tunnel setup requests. It shall not\ninitiate the tunnel setup.\nON_DEMAND - In this mode local endpoint will initiate tunnel\ncreation once first packet matching the policy rule is\nreceived and will also respond to incoming initiation request.\n",
                            "title": "Connection initiation mode"
                        },
                        "dpd_profile_id": {
                            "type": "string",
                            "description": "Dead peer detection (DPD) profile id. Default will be set according to system default policy.",
                            "title": "Dead peer detection (DPD) profile id"
                        },
                        "ike_profile_id": {
                            "type": "string",
                            "description": "IKE profile id to be used. Default will be set according to system default policy.",
                            "title": "Internet key exchange (IKE) profile id"
                        }
                    }
                }
            ],
            "description": "IPSec VPN Peer Endpoint covers configuration to be applied locally to establish a session with remote endpoint on peer site.",
            "title": "IPSec VPN Peer Endpoint"
        },
        "ConfigurationStateElement": {
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "description": "Describes status of configuration of an entity",
            "properties": {
                "sub_system_address": {
                    "readOnly": true,
                    "type": "string",
                    "description": "URI of backing resource on sub system",
                    "title": "URI of backing resource on sub system"
                },
                "state": {
                    "readOnly": true,
                    "enum": [
                        "in_progress",
                        "success",
                        "failed",
                        "partial_success"
                    ],
                    "type": "string",
                    "description": "State of configuration on this sub system",
                    "title": "State of configuration on this sub system"
                },
                "sub_system_type": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Type of backing resource on sub system",
                    "title": "Type of backing resource on sub system"
                },
                "failure_message": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Error message in case of failure",
                    "title": "Error message in case of failure"
                },
                "failure_code": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Error code",
                    "title": "Error code"
                },
                "sub_system_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier of backing resource on sub system",
                    "title": "Identifier of backing resource on sub system"
                }
            },
            "title": "Describes status of configuration of an entity"
        },
        "DestinationNsxApiEndpoint": {
            "description": "Details about the destination NSX manager for the migration",
            "title": "Destination NSX manager details",
            "required": [
                "destination_nsx_ip",
                "destination_nsx_username"
            ],
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "properties": {
                "destination_nsx_ip": {
                    "readOnly": false,
                    "format": "hostname-or-ip",
                    "type": "string",
                    "description": "IP address or host name of the destination NSX manager to which the config will be migrated.",
                    "title": "Destination NSX IP ddress or host name"
                },
                "destination_nsx_password": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Valid password for connecting to the destination NSX manager.",
                    "title": "Password for destination NSX manager"
                },
                "destination_nsx_port": {
                    "description": "Destination NSX manager port that will be used to apply details.",
                    "format": "int32",
                    "default": 443,
                    "title": "Destination NSX manager port",
                    "readOnly": false,
                    "type": "integer"
                },
                "destination_nsx_username": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Valid username for connecting to the destination NSX manager.",
                    "title": "Username for destination NSX manager"
                }
            }
        },
        "ManagementPlaneBaseNodeInfo": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "description": "The basic node info of management plane node",
            "properties": {
                "uuid": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Management plane node UUID",
                    "title": "Management plane node UUID"
                },
                "mgmt_cluster_listen_ip_address": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The IP address of MP node",
                    "title": "The IP address of MP node"
                }
            }
        },
        "WeeklyTelemetrySchedule": {
            "x-vmw-nsx-module": "TelemetryConfig",
            "allOf": [
                {
                    "$ref": "#/definitions/TelemetrySchedule"
                },
                {
                    "x-vmw-nsx-module": "TelemetryConfig",
                    "required": [
                        "hour_of_day",
                        "day_of_week"
                    ],
                    "type": "object",
                    "properties": {
                        "minutes": {
                            "description": "Minute at which data will be collected. Specify a value between 0 through 59.\n",
                            "title": "Minute at which data will be collected",
                            "default": 0,
                            "format": "int64",
                            "maximum": 59,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "hour_of_day": {
                            "description": "Hour at which data will be collected. Specify a value between 0 through 23.\n",
                            "format": "int64",
                            "title": "Hour at which data will be collected",
                            "maximum": 23,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "day_of_week": {
                            "enum": [
                                "SUNDAY",
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY"
                            ],
                            "type": "string",
                            "description": "Day of week on which data will be collected. Specify one of SUNDAY through SATURDAY.\n",
                            "title": "Day of week on which data will be collected"
                        }
                    }
                }
            ]
        },
        "MigrationUnitListResult": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MigrationUnit"
                            },
                            "type": "array",
                            "description": "Paged Collection of Migration units",
                            "title": "Paged Collection of Migration units"
                        }
                    }
                }
            ]
        },
        "FirewallSectionRuleList": {
            "x-vmw-nsx-module": "Firewall",
            "allOf": [
                {
                    "$ref": "#/definitions/FirewallSection"
                },
                {
                    "x-vmw-nsx-module": "Firewall",
                    "required": [
                        "rules"
                    ],
                    "type": "object",
                    "properties": {
                        "rules": {
                            "description": "List of firewall rules in the section. Only homogenous rules are supported.",
                            "title": "List of the firewall rules",
                            "items": {
                                "$ref": "#/definitions/FirewallRule"
                            },
                            "readOnly": false,
                            "maxItems": 1000,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "LbVirtualServerStatistics": {
            "x-vmw-nsx-module": "AggSvcLb",
            "required": [
                "statistics",
                "virtual_server_id"
            ],
            "type": "object",
            "properties": {
                "last_update_timestamp": {
                    "type": "integer",
                    "description": "Timestamp when the data was last updated",
                    "format": "int64"
                },
                "statistics": {
                    "title": "Virtual server statistics counter",
                    "description": "Virtual server statistics counter",
                    "$ref": "#/definitions/LbStatisticsCounter"
                },
                "virtual_server_id": {
                    "type": "string",
                    "description": "load balancer virtual server identifier",
                    "title": "load balancer virtual server identifier"
                }
            }
        },
        "BackupConfiguration": {
            "description": "Configuration for taking manual/automated backup",
            "title": "Configuration for taking manual/automated backup",
            "required": [
                "remote_file_server"
            ],
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "properties": {
                "backup_schedule": {
                    "title": "Set when backups should be taken - on a weekly schedule or at regular intervals.",
                    "description": "Set when backups should be taken - on a weekly schedule or at regular intervals.",
                    "$ref": "#/definitions/BackupSchedule"
                },
                "remote_file_server": {
                    "title": "The server to which backups will be sent.",
                    "description": "The server to which backups will be sent.",
                    "$ref": "#/definitions/RemoteFileServer"
                },
                "passphrase": {
                    "type": "string",
                    "description": "Passphrase used to encrypt backup files.",
                    "title": "Passphrase used to encrypt backup files."
                },
                "backup_enabled": {
                    "default": false,
                    "type": "boolean",
                    "description": "true if automated backup is enabled",
                    "title": "true if automated backup is enabled"
                },
                "inventory_summary_interval": {
                    "description": "The minimum number of seconds between each upload of the inventory summary to backup server.",
                    "title": "The minimum number of seconds between each upload of the inventory summary to backup server.",
                    "default": 300,
                    "format": "int64",
                    "maximum": 3600,
                    "minimum": 30,
                    "type": "integer"
                }
            }
        },
        "ComputeCollection": {
            "x-vmw-nsx-module": "InventoryCmObj",
            "allOf": [
                {
                    "$ref": "#/definitions/DiscoveredResource"
                },
                {
                    "x-vmw-nsx-module": "InventoryCmObj",
                    "type": "object",
                    "properties": {
                        "origin_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Id of the compute manager from where this Compute Collection was discovered",
                            "title": "Id of the compute manager from where this Compute Collection was discovered"
                        },
                        "origin_properties": {
                            "items": {
                                "$ref": "#/definitions/KeyValuePair"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Key-Value map of additional specific properties of\ncompute collection in the Compute Manager\n",
                            "title": "Key-Value map of additional specific properties of\ncompute collection in the Compute Manager\n"
                        },
                        "external_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "External ID of the ComputeCollection in the source Compute manager,\ne.g. mo-ref in VC\n",
                            "title": "External ID of the ComputeCollection in the source Compute manager,\ne.g. mo-ref in VC\n"
                        },
                        "owner_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Id of the owner of compute collection in the Compute Manager",
                            "title": "Id of the owner of compute collection in the Compute Manager"
                        },
                        "origin_type": {
                            "readOnly": true,
                            "type": "string",
                            "description": "ComputeCollection type like VC_Cluster. Here the Compute Manager\ntype prefix would help in differentiating similar named Compute\nCollection types from different Compute Managers\n",
                            "title": "ComputeCollection type like VC_Cluster. Here the Compute Manager\ntype prefix would help in differentiating similar named Compute\nCollection types from different Compute Managers\n"
                        },
                        "cm_local_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Local Id of the compute collection in the Compute Manager",
                            "title": "Local Id of the compute collection in the Compute Manager"
                        }
                    }
                }
            ]
        },
        "ServiceAssociationListResult": {
            "x-vmw-nsx-module": "GroupingObjectsProviders",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "discriminator": "service_type",
                    "x-vmw-nsx-module": "GroupingObjectsProviders",
                    "required": [
                        "service_type"
                    ],
                    "type": "object",
                    "properties": {
                        "service_type": {
                            "enum": [
                                "FireWallServiceAssociationListResult",
                                "IpfixServiceAssociationListResult"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "MigrationUnitAggregateInfoListResult": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MigrationUnitAggregateInfo"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Paged collection of MigrationUnit AggregateInfo",
                            "title": "Paged collection of MigrationUnit AggregateInfo"
                        }
                    }
                }
            ]
        },
        "NSServiceElement": {
            "description": "An NSService element that describes traffic corresponding to an NSService",
            "title": "An NSService element that describes traffic corresponding to an NSService",
            "required": [
                "resource_type"
            ],
            "discriminator": "resource_type",
            "x-vmw-nsx-module": "Types",
            "type": "object",
            "properties": {
                "resource_type": {
                    "enum": [
                        "EtherTypeNSService",
                        "IPProtocolNSService",
                        "IGMPTypeNSService",
                        "ICMPTypeNSService",
                        "ALGTypeNSService",
                        "L4PortSetNSService"
                    ],
                    "type": "string",
                    "description": "The specific type of NSServiceElement",
                    "title": "The specific type of NSServiceElement"
                }
            }
        },
        "DnsHeader": {
            "x-vmw-nsx-module": "Traceflow",
            "type": "object",
            "properties": {
                "message_type": {
                    "default": "QUERY",
                    "enum": [
                        "QUERY",
                        "RESPONSE"
                    ],
                    "type": "string",
                    "description": "Specifies the message type whether it is a query or a response.",
                    "title": "Specifies the message type whether it is a query or a response."
                },
                "address": {
                    "format": "hostname-or-ip",
                    "type": "string",
                    "description": "This is used to define what is being asked or responded.",
                    "title": "Domain name/IP to query/response"
                }
            }
        },
        "IPPrefixList": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "required": [
                        "prefixes"
                    ],
                    "type": "object",
                    "properties": {
                        "prefixes": {
                            "description": "Ordered list of PrefixConfig",
                            "title": "Ordered list of PrefixConfig",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/PrefixConfig"
                            },
                            "maxItems": 1330000,
                            "type": "array"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        }
                    }
                }
            ]
        },
        "EdgeClusterMemberAllocationPool": {
            "discriminator": "allocation_pool_type",
            "x-vmw-nsx-module": "LogicalRouter",
            "required": [
                "allocation_pool_type"
            ],
            "type": "object",
            "properties": {
                "allocation_pool_type": {
                    "description": "Types of logical router allocation pool based on services",
                    "enum": [
                        "LoadBalancerAllocationPool"
                    ],
                    "type": "string"
                }
            }
        },
        "LogicalRouter": {
            "x-vmw-nsx-module": "LogicalRouter",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "LogicalRouter",
                    "required": [
                        "router_type"
                    ],
                    "type": "object",
                    "properties": {
                        "edge_cluster_member_indices": {
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "type": "array",
                            "description": "For stateful services, the logical router should be associated with\nedge cluster. For TIER 1 logical router, for manual placement of\nservice router within the cluster, edge cluster member indices needs\nto be provided else same will be auto-allocated. You can provide\nmaximum two indices for HA ACTIVE_STANDBY. For TIER0 logical router\nthis property is no use and placement is derived from logical router\nuplink or loopback port.\n",
                            "title": "Member indices of the edge node on the cluster"
                        },
                        "failover_mode": {
                            "enum": [
                                "PREEMPTIVE",
                                "NON_PREEMPTIVE"
                            ],
                            "type": "string",
                            "description": "Determines the behavior when a logical router instance restarts after\na failure. If set to PREEMPTIVE, the preferred node will take over,\neven if it causes another failure. If set to NON_PREEMPTIVE, then the\ninstance that restarted will remain secondary.\nThis property must not be populated unless the high_availability_mode property\nis set to ACTIVE_STANDBY.\nIf high_availability_mode property is set to ACTIVE_STANDBY and this property\nis not specified then default will be NON_PREEMPTIVE.\n",
                            "title": "Failover mode for active-standby logical router instances."
                        },
                        "allocation_profile": {
                            "title": "Edge Cluster Member Allocation Profile",
                            "description": "Configurations options to auto allocate edge cluster members for\nlogical router. Auto allocation is supported only for TIER1 and pick\nleast utilized member post current assignment for next allocation.\n",
                            "$ref": "#/definitions/EdgeClusterMemberAllocationProfile"
                        },
                        "firewall_sections": {
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of Firewall sections related to Logical Router.",
                            "title": "LR Firewall Section References"
                        },
                        "advanced_config": {
                            "title": "Logical Router Configuration",
                            "description": "Contains config properties for tier0 routers",
                            "$ref": "#/definitions/LogicalRouterConfig"
                        },
                        "router_type": {
                            "enum": [
                                "TIER0",
                                "TIER1"
                            ],
                            "type": "string",
                            "description": "Type of Logical Router",
                            "title": "Type of Logical Router"
                        },
                        "preferred_edge_cluster_member_index": {
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer",
                            "description": "Used for tier0 routers only",
                            "title": "Preferred edge cluster member index in active standby mode\nfor pre-emptive failover\n"
                        },
                        "high_availability_mode": {
                            "enum": [
                                "ACTIVE_ACTIVE",
                                "ACTIVE_STANDBY"
                            ],
                            "type": "string",
                            "description": "High availability mode",
                            "title": "High availability mode"
                        },
                        "edge_cluster_id": {
                            "type": "string",
                            "description": "Used for tier0 routers",
                            "title": "Identifier of the edge cluster for this Logical Router"
                        }
                    }
                }
            ]
        },
        "LbRuleListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbRule"
                            },
                            "type": "array",
                            "description": "paginated list of LB rules",
                            "title": "paginated list of LB rules"
                        }
                    }
                }
            ]
        },
        "TransportNodeTemplateState": {
            "description": "transport node template application state",
            "title": "transport node template application state",
            "required": [
                "node_id"
            ],
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "properties": {
                "state": {
                    "readOnly": true,
                    "enum": [
                        "FAILED_TO_CREATE",
                        "IN_PROGRESS",
                        "FAILED_TO_REALIZE",
                        "SUCCESS"
                    ],
                    "type": "string",
                    "description": "Transport node template state on individual hosts of ComputeCollection\nwhich enabled automated transport code creation.\n'FAILED_TO_CREATE' means transport node isn't created. 'IN_PROGRESS' means\ntransport node is in progress of creation. 'FAILED_TO_REALIZE' means\ntransport node has been created, but failed on host realization, it will\nrepush to host by NSX later. 'SUCCESS' means transport node creation is\nsucceeded.\n",
                    "title": "Application state of transport node template on this host"
                },
                "node_id": {
                    "type": "string",
                    "description": "node id",
                    "title": "node id"
                },
                "transport_node_id": {
                    "type": "string",
                    "description": "transport node id",
                    "title": "transport node id"
                }
            }
        },
        "ClusterNodeVMDeploymentRequest": {
            "description": "Contains the deployment information for a cluster node VM soon to be\ndeployed or already deployed by the Manager\n",
            "title": "Info for an auto-deployment request",
            "required": [
                "deployment_config",
                "roles"
            ],
            "x-vmw-nsx-module": "ClusterNodeVMDeployment",
            "type": "object",
            "properties": {
                "deployment_config": {
                    "title": "Deployment config for cluster node VM",
                    "description": "Info needed to configure a cluster node VM at deployment for a\nspecific platform.\nMay require different parameters depending on the method used to deploy\nthe VM.\n",
                    "$ref": "#/definitions/ClusterNodeVMDeploymentConfig"
                },
                "vm_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "ID of the VM maintained internally and used to recognize it.\nNote: This is automatically generated and cannot be modified.\n",
                    "title": "ID of VM used to recognize it"
                },
                "user_settings": {
                    "title": "User settings for the VM",
                    "description": "Username and password settings for the cluster node VM.\nNote: These settings will be honored only during VM deployment.\nPost-deployment, CLI must be used for changing the user settings and\nchanges to these parameters will not have any effect.\n",
                    "$ref": "#/definitions/NodeUserSettings"
                },
                "roles": {
                    "items": {
                        "description": "Enumerates the types of cluster nodes for which VM auto-deployment is\ncurrently supported.\n",
                        "enum": [
                            "CONTROLLER",
                            "MANAGER"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "description": "List of cluster node role (or roles) which the VM should take on.\nThey specify what type (or types) of cluster node which the new VM\nshould act as.\n",
                    "title": "Cluster node roles of the VM"
                },
                "form_factor": {
                    "description": "Specifies the desired \"size\" of the VM\nNote: MEDIUM is currently the only supported size for controllers.\n",
                    "default": "MEDIUM",
                    "enum": [
                        "SMALL",
                        "MEDIUM",
                        "MEDIUM_LARGE",
                        "LARGE"
                    ],
                    "type": "string"
                }
            }
        },
        "CommunityMatchOperation": {
            "x-vmw-nsx-module": "Routing",
            "type": "object",
            "description": "Community match operation",
            "properties": {
                "match_operator": {
                    "default": "MATCH_ANY",
                    "enum": [
                        "MATCH_ANY",
                        "MATCH_ALL",
                        "MATCH_EXACT",
                        "MATCH_NONE",
                        "MATCH_REGEX"
                    ],
                    "type": "string",
                    "description": "Match operator for communities from provided community list id.\nMATCH_ANY will match any community\nMATCH_ALL will match all communities\nMATCH_EXACT will do exact match on community\nMATCH_NONE will not match any community\nMATCH_REGEX will match community by evaluating regular\nexpression\n",
                    "title": "Match operator"
                },
                "regular_expression": {
                    "type": "string",
                    "description": "Regular expression to match BGP communities. If match_operator\nis MATCH_REGEX then this value must be specified.\n",
                    "title": "Regular expression"
                },
                "community_list_id": {
                    "type": "string",
                    "description": "ID of BGP community list. This value is not required when\nmatch_operator is MATCH_REGEX otherwise required.\n",
                    "title": "Community list id"
                }
            },
            "title": "Community match operation"
        },
        "AcceptableComponentVersionList": {
            "x-vmw-nsx-module": "VersionWhitelist",
            "required": [
                "results"
            ],
            "type": "object",
            "properties": {
                "results": {
                    "items": {
                        "$ref": "#/definitions/AcceptableComponentVersion"
                    },
                    "type": "array",
                    "description": "Acceptable version whitelist for different components",
                    "title": "Acceptable version whitelist for different components"
                }
            }
        },
        "ServiceInsertionService": {
            "x-vmw-nsx-module": "ServiceInsertionRules",
            "allOf": [
                {
                    "$ref": "#/definitions/DSService"
                },
                {
                    "x-vmw-nsx-module": "ServiceInsertionRules",
                    "type": "object"
                }
            ],
            "description": "Protocol on which a particular ServiceInsertion Rule should apply to.",
            "title": "ServiceInsertion Service"
        },
        "MigrationUnit": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "type": "object",
                    "properties": {
                        "group": {
                            "readOnly": true,
                            "title": "Info of the group to which this migration unit belongs",
                            "description": "Info of the group to which this migration unit belongs",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "warnings": {
                            "items": {
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of warnings indicating issues with the migration unit that may result in migration failure",
                            "title": "List of warnings indicating issues with the migration unit that may result in migration failure"
                        },
                        "current_version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "This is component version e.g. if migration unit is of type INFRASTRUCTURE, then this is host version.",
                            "title": "Current version of migration unit"
                        },
                        "metadata": {
                            "items": {
                                "$ref": "#/definitions/KeyValuePair"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Metadata about migration unit",
                            "title": "Metadata about migration unit"
                        },
                        "type": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Migration unit type",
                            "title": "Migration unit type"
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Identifier of the migration unit",
                            "title": "UUID of the migration unit"
                        },
                        "display_name": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Name of the migration unit",
                            "title": "Name of the migration unit"
                        }
                    }
                }
            ]
        },
        "KeyValuePair": {
            "description": "An arbitrary key-value pair",
            "title": "An arbitrary key-value pair",
            "required": [
                "value",
                "key"
            ],
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "properties": {
                "value": {
                    "readOnly": false,
                    "maxLength": 255,
                    "type": "string",
                    "description": "Value",
                    "title": "Value"
                },
                "key": {
                    "readOnly": false,
                    "maxLength": 255,
                    "type": "string",
                    "description": "Key",
                    "title": "Key"
                }
            }
        },
        "InstanceDeploymentConfig": {
            "description": "The Instance Deployment Config contains settings that is applied during install time.",
            "title": "Instance Deployment Config",
            "required": [
                "context_id",
                "vm_nic_infos",
                "storage_id",
                "compute_id"
            ],
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "type": "object",
            "properties": {
                "context_id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Context Id or VCenter Id.",
                    "title": "Context Id"
                },
                "vm_nic_infos": {
                    "description": "List of set of NIC information for VMs",
                    "title": "List of VM NIC information",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/VmNicInfo"
                    },
                    "readOnly": false,
                    "maxItems": 2,
                    "type": "array"
                },
                "storage_id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Storage Id.",
                    "title": "storage id"
                },
                "compute_id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Resource Pool or Compute Id.",
                    "title": "compute id"
                }
            }
        },
        "LbSslProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object"
                }
            ],
            "description": "Load balancer abstract SSL profile",
            "title": "Load balancer abstract SSL profile"
        },
        "ServiceIPsListResult": {
            "x-vmw-nsx-module": "L3",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "L3",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ServiceIP"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of service IPs registered with the LR by services like NAT, LB, VPN, etc.",
                            "title": "Paginated list of service IPs"
                        }
                    }
                }
            ]
        },
        "ServiceBinding": {
            "x-vmw-nsx-module": "LogicalRouterPorts",
            "required": [
                "service_id"
            ],
            "type": "object",
            "properties": {
                "service_id": {
                    "title": "UUID of Service",
                    "description": "Identifier of Logical Service",
                    "$ref": "#/definitions/ResourceReference"
                }
            }
        },
        "SIPacketTypeAndCounter": {
            "x-vmw-nsx-module": "ServiceInsertionVMDeployment",
            "required": [
                "counter",
                "packet_type"
            ],
            "type": "object",
            "properties": {
                "counter": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of packets.",
                    "title": "The number of packets."
                },
                "packet_type": {
                    "type": "string",
                    "description": "The type of the packets",
                    "title": "The type of the packets"
                }
            }
        },
        "BridgeClusterListResult": {
            "x-vmw-nsx-module": "BridgeCluster",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "BridgeCluster",
                    "type": "object",
                    "properties": {
                        "results": {
                            "description": "BridgeCluster Results",
                            "title": "BridgeCluster Results",
                            "minItems": 0,
                            "items": {
                                "$ref": "#/definitions/BridgeCluster"
                            },
                            "readOnly": true,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "Bridge cluster queries result",
            "title": "Bridge cluster queries result"
        },
        "LbHttpRequestVersionCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "version"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "version": {
                            "description": "HTTP version",
                            "enum": [
                                "HTTP_VERSION_1_0",
                                "HTTP_VERSION_1_1",
                                "HTTP_VERSION_2_0"
                            ],
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "This condition is used to match the HTTP protocol version of the HTTP\nrequest messages.\n",
            "title": "Condition to match HTTP protocol version of HTTP requests"
        },
        "LbHttpRequestHeaderDeleteAction": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleAction"
                },
                {
                    "required": [
                        "header_name"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "header_name": {
                            "type": "string",
                            "description": "Name of a header field of HTTP request message",
                            "title": "Name of a header field of HTTP request message"
                        }
                    }
                }
            ],
            "description": "This action is used to delete header fields of HTTP request messages at\nHTTP_REQUEST_REWRITE phase. One action can be used to delete all headers\nwith same header name. To delete headers with different header names,\nmultiple actions must be defined.\n",
            "title": "Action to delete HTTP request header fields"
        },
        "AggregateResponse": {
            "description": "Response for the primary/related types",
            "title": "Aggregate response",
            "required": [
                "primary",
                "related"
            ],
            "x-vmw-nsx-module": "Search",
            "type": "object",
            "properties": {
                "primary": {
                    "type": "object",
                    "description": "Requested properties of the primary object",
                    "title": "Primary object properties"
                },
                "related": {
                    "items": {
                        "$ref": "#/definitions/RelatedData"
                    },
                    "type": "array",
                    "description": "Requested properties of the related objects",
                    "title": "Related objects properties"
                }
            }
        },
        "ClusterNodeConfigListResult": {
            "x-vmw-nsx-module": "ClusterManagement",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ClusterManagement",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ClusterNodeConfig"
                            },
                            "type": "array",
                            "description": "Cluster node configuration results",
                            "title": "Cluster node configuration results"
                        }
                    }
                }
            ]
        },
        "ClusterBackupInfo": {
            "x-vmw-nsx-module": "ClusterRestore",
            "type": "object",
            "description": "Cluster backup details",
            "properties": {
                "timestamp": {
                    "description": "timestamp of the cluster backup file",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "node_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "ID of the node from which the backup was taken",
                    "title": "ID of the node from which the backup was taken"
                },
                "ip_address": {
                    "description": "IP address of the node from which the backup was taken",
                    "format": "ip",
                    "readOnly": true,
                    "type": "string"
                }
            },
            "title": "Cluster backup details"
        },
        "LbSelectPoolAction": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleAction"
                },
                {
                    "required": [
                        "pool_id"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "pool_id": {
                            "type": "string",
                            "description": "UUID of load balancer pool",
                            "title": "UUID of load balancer pool"
                        }
                    }
                }
            ],
            "description": "This action is used to select a pool for matched HTTP request messages. The\npool is specified by UUID. The matched HTTP request messages are forwarded\nto the specified pool.\n",
            "title": "Action to select a pool for HTTP request messages"
        },
        "DhcpRelayProfileListResult": {
            "x-vmw-nsx-module": "DhcpRelay",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "DhcpRelay",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DhcpRelayProfile"
                            },
                            "type": "array",
                            "description": "Dhcp relay profile list results",
                            "title": "Dhcp relay profile list results"
                        }
                    }
                }
            ]
        },
        "ClusterStatus": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "properties": {
                "mgmt_cluster_status": {
                    "readOnly": true,
                    "title": "The current status of the management cluster",
                    "description": "The current status of the management cluster",
                    "$ref": "#/definitions/ManagementClusterStatus"
                },
                "control_cluster_status": {
                    "readOnly": true,
                    "title": "The current status of the control cluster",
                    "description": "The current status of the control cluster",
                    "$ref": "#/definitions/ControllerClusterStatus"
                },
                "cluster_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Unique identifier of this cluster",
                    "title": "Unique identifier of this cluster"
                }
            }
        },
        "LogicalRouterRouteTable": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouter",
                    "required": [
                        "logical_router_id"
                    ],
                    "type": "object",
                    "properties": {
                        "logical_router_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Name of the logical router",
                            "title": "Name of the logical router"
                        },
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "logical_router_id": {
                            "type": "string",
                            "description": "The id of the logical router",
                            "title": "The id of the logical router"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalRouterRouteEntry"
                            },
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "HttpsProtocol": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Protocol"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "required": [
                        "sha256_thumbprint"
                    ],
                    "type": "object",
                    "properties": {
                        "sha256_thumbprint": {
                            "type": "string",
                            "description": "SSL thumbprint of server",
                            "title": "SSL thumbprint of server"
                        },
                        "authentication_scheme": {
                            "title": "Scheme to authenticate if required",
                            "description": "Scheme to authenticate if required",
                            "$ref": "#/definitions/BasicAuthenticationScheme"
                        }
                    }
                }
            ]
        },
        "LicensesListResult": {
            "x-vmw-nsx-module": "License",
            "description": "Licenses queries result",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "License",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/License"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Licenses Results",
                            "title": "Licenses Results"
                        }
                    }
                }
            ]
        },
        "DirectoryGroupMember": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "required": [
                        "group_id",
                        "member_group_distinguished_name",
                        "member_group_id",
                        "group_distinguished_name",
                        "nested"
                    ],
                    "type": "object",
                    "properties": {
                        "group_id": {
                            "type": "string",
                            "description": "Directory group id this group member belongs to",
                            "title": "Group idnetifier"
                        },
                        "member_group_distinguished_name": {
                            "type": "string",
                            "description": "Directory group name this group member owns",
                            "title": "Member group distinguished name"
                        },
                        "member_group_id": {
                            "type": "string",
                            "description": "Directory group id this group member owns",
                            "title": "Member group idnetifier"
                        },
                        "group_distinguished_name": {
                            "type": "string",
                            "description": "Directory group distinguished name this group member belongs to.",
                            "title": "Group distinguished name"
                        },
                        "nested": {
                            "type": "boolean",
                            "description": "Whether this member group is a directory member of the parent group speicified by group_id or a nested member group which parent group is also member group of the parent group speicified by group_id.",
                            "title": "Nesting flag"
                        }
                    }
                }
            ]
        },
        "UpgradeUnitGroupStatusListResult": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/UpgradeUnitGroupStatus"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Paged collection of upgrade status for upgrade unit groups",
                            "title": "Paged collection of upgrade status for upgrade unit groups"
                        }
                    }
                }
            ]
        },
        "BgpRouteAggregation": {
            "x-vmw-nsx-module": "Routing",
            "required": [
                "prefix"
            ],
            "type": "object",
            "properties": {
                "summary_only": {
                    "default": true,
                    "type": "boolean",
                    "description": "Flag to send only summarized route",
                    "title": "Flag to send only summarized route"
                },
                "prefix": {
                    "description": "cidr of the aggregate address",
                    "format": "ipv4-cidr-block",
                    "type": "string"
                }
            }
        },
        "ApiError": {
            "x-vmw-nsx-module": "Common",
            "allOf": [
                {
                    "$ref": "#/definitions/RelatedApiError"
                },
                {
                    "x-vmw-nsx-module": "Common",
                    "type": "object",
                    "properties": {
                        "related_errors": {
                            "items": {
                                "$ref": "#/definitions/RelatedApiError"
                            },
                            "type": "array",
                            "description": "Other errors related to this error",
                            "title": "Other errors related to this error"
                        }
                    }
                }
            ],
            "description": "Detailed information about an API Error",
            "title": "Detailed information about an API Error"
        },
        "MacAddressCsvListResult": {
            "x-vmw-nsx-module": "AggSvcLogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/MacTableCsvRecord"
                            },
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "ServiceInstance": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseServiceInstance"
                },
                {
                    "required": [
                        "implementation_type",
                        "instance_deployment_template",
                        "attachment_point",
                        "deployed_to",
                        "deployment_spec_name",
                        "deployment_mode",
                        "instance_deployment_config"
                    ],
                    "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
                    "type": "object",
                    "properties": {
                        "deployment_spec_name": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Name of the deployment spec to be used by this service instance.",
                            "title": "Deployment Spec Name"
                        },
                        "implementation_type": {
                            "readOnly": false,
                            "enum": [
                                "NORTH_SOUTH",
                                "EAST_WEST"
                            ],
                            "type": "string",
                            "description": "Implementation to be used by this service instance for deploying the Service-VM.",
                            "title": "Implementation Type"
                        },
                        "instance_deployment_template": {
                            "readOnly": false,
                            "title": "Instance Deployment Template",
                            "description": "The deployment template to be used by this service instance. The attribute values specific to this instance can be added.",
                            "$ref": "#/definitions/DeploymentTemplate"
                        },
                        "attachment_point": {
                            "readOnly": false,
                            "enum": [
                                "TIER0_LR",
                                "TIER1_LR"
                            ],
                            "type": "string",
                            "description": "Attachment point to be used by this service instance for deploying the Service-VM.",
                            "title": "Attachment Point"
                        },
                        "instance_deployment_config": {
                            "readOnly": false,
                            "title": "Instance Deployment Config",
                            "description": "Instance Deployment Config contains the information to be injected during Service-VM deployment.",
                            "$ref": "#/definitions/InstanceDeploymentConfig"
                        },
                        "deployment_mode": {
                            "description": "Deployment mode specifies where the partner appliance will be deployed in HA or non-HA i.e standalone mode.",
                            "title": "Deployment Mode",
                            "default": "ACTIVE_STANDBY",
                            "enum": [
                                "STAND_ALONE",
                                "ACTIVE_STANDBY"
                            ],
                            "readOnly": false,
                            "type": "string"
                        },
                        "deployed_to": {
                            "description": "List of resource references where service instance be deployed. Ex. Tier 0 Logical Router in case of N-S ServiceInsertion.",
                            "title": "Deployed-to object list",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "readOnly": false,
                            "maxItems": 128,
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "The deployment of a registered service. Service instance is instantiation of service. It is the most used type of instance. It is a default instance to be used when NSX handles lifecycle of appliance. Deployment and appliance related all the information is necessary.",
            "title": "Normal Instance of a service"
        },
        "NtpServiceProperties": {
            "description": "NTP Service properties",
            "title": "NTP Service properties",
            "required": [
                "servers"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "servers": {
                    "items": {
                        "description": "Hostname or IPv4 address",
                        "format": "hostname-or-ipv4",
                        "type": "string"
                    },
                    "type": "array",
                    "description": "NTP servers",
                    "title": "NTP servers"
                }
            }
        },
        "VtepLabelPoolUsage": {
            "x-vmw-nsx-module": "VtepLabel",
            "type": "object",
            "description": "Pool usage statistics in a pool",
            "properties": {
                "total_ids": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of IDs in a pool",
                    "title": "Total number of IDs in a pool"
                },
                "allocated_ids": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of allocated IDs in a pool",
                    "title": "Total number of allocated IDs in a pool"
                },
                "free_ids": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of free IDs in a pool",
                    "title": "Total number of free IDs in a pool"
                }
            }
        },
        "CapacityUsage": {
            "x-vmw-nsx-module": "License",
            "description": "usage of each capacity type ex. vm, cpu",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "License",
                    "type": "object",
                    "properties": {
                        "usage_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "count of number of items of capacity_type",
                            "title": "count of number of items of capacity_type"
                        },
                        "capacity_type": {
                            "readOnly": true,
                            "type": "string",
                            "description": "type of the capacity field",
                            "title": "type of the capacity field"
                        }
                    }
                }
            ]
        },
        "MandatoryAccessControlProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "status": {
                            "readOnly": true,
                            "enum": [
                                "ENABLED",
                                "DISABLED",
                                "ENABLED_PENDING_REBOOT"
                            ],
                            "type": "string",
                            "description": "current status of Mandatory Access Control"
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled can be True/False"
                        }
                    }
                }
            ],
            "description": "Information about mandatory access control",
            "title": "Information about mandatory access control"
        },
        "LbClientSslProfileListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbClientSslProfile"
                            },
                            "type": "array",
                            "description": "paginated list of load balancer client SSL profiles",
                            "title": "paginated list of load balancer client SSL profiles"
                        }
                    }
                }
            ]
        },
        "DhcpRelayProfile": {
            "x-vmw-nsx-module": "DhcpRelay",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "DhcpRelay",
                    "required": [
                        "server_addresses"
                    ],
                    "type": "object",
                    "properties": {
                        "server_addresses": {
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "AdvertiseRuleList": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "type": "object",
                    "properties": {
                        "rules": {
                            "description": "List of advertisement rules",
                            "title": "List of advertisement rules",
                            "default": [],
                            "items": {
                                "$ref": "#/definitions/AdvertiseRule"
                            },
                            "minItems": 0,
                            "type": "array"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        }
                    }
                }
            ]
        },
        "StaticRouteNextHop": {
            "x-vmw-nsx-module": "Routing",
            "type": "object",
            "properties": {
                "blackhole_action": {
                    "description": "Action to be taken on matching packets for NULL routes.",
                    "enum": [
                        "DISCARD"
                    ],
                    "readOnly": true,
                    "type": "string"
                },
                "administrative_distance": {
                    "description": "Administrative Distance for the next hop IP",
                    "title": "Administrative Distance for the next hop IP",
                    "default": 1,
                    "format": "int64",
                    "maximum": 255,
                    "minimum": 1,
                    "type": "integer"
                },
                "ip_address": {
                    "description": "Next Hop IP",
                    "format": "ipv4",
                    "type": "string"
                },
                "bfd_enabled": {
                    "default": false,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Status of bfd for this next hop where bfd_enabled = true indicate bfd is enabled for this next hop and bfd_enabled = false indicate bfd peer is disabled or not configured for this next hop.",
                    "title": "Status of bfd for this next hop where bfd_enabled = true indicate bfd is enabled for this next hop and bfd_enabled = false indicate bfd peer is disabled or not configured for this next hop."
                },
                "logical_router_port_id": {
                    "title": "Reference of logical router port to be used for next hop",
                    "description": "Reference of logical router port to be used for next hop",
                    "$ref": "#/definitions/ResourceReference"
                }
            }
        },
        "PacketAddressClassifier": {
            "x-vmw-nsx-module": "Switching",
            "type": "object",
            "description": "A packet is classified to have an address binding, if its address\nconfiguration matches with all user specified properties.\n",
            "properties": {
                "vlan": {
                    "type": "integer",
                    "description": "Virtual Local Area Network Identifier",
                    "format": "int64"
                },
                "ip_address": {
                    "description": "A single IP address or a subnet, e.g. x.x.x.x or x.x.x.x/y",
                    "format": "address-or-block-or-range",
                    "type": "string"
                },
                "mac_address": {
                    "description": "A single MAC address",
                    "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                    "type": "string"
                }
            },
            "title": "Address classifications for a packet"
        },
        "ApplianceManagementTaskProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "status": {
                            "description": "Current status of the task",
                            "enum": [
                                "running",
                                "error",
                                "success",
                                "canceling",
                                "canceled",
                                "killed"
                            ],
                            "readOnly": true,
                            "type": "string"
                        },
                        "async_response_available": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "True if response for asynchronous request is available",
                            "title": "True if response for asynchronous request is available"
                        },
                        "description": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Description of the task",
                            "title": "Description of the task"
                        },
                        "start_time": {
                            "description": "The start time of the task in epoch milliseconds",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "details": {
                            "readOnly": true,
                            "type": "object",
                            "description": "Details about the task if known",
                            "title": "Details about the task if known"
                        },
                        "cancelable": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "True if this task can be canceled",
                            "title": "True if this task can be canceled"
                        },
                        "request_method": {
                            "readOnly": true,
                            "type": "string",
                            "description": "HTTP request method",
                            "title": "HTTP request method"
                        },
                        "end_time": {
                            "description": "The end time of the task in epoch milliseconds",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "progress": {
                            "description": "Task progress if known, from 0 to 100",
                            "title": "Task progress if known, from 0 to 100",
                            "format": "int64",
                            "maximum": 100,
                            "readOnly": true,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "message": {
                            "readOnly": true,
                            "type": "string",
                            "description": "A message describing the disposition of the task",
                            "title": "A message describing the disposition of the task"
                        },
                        "user": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Name of the user who created this task",
                            "title": "Name of the user who created this task"
                        },
                        "id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Identifier for this task",
                            "title": "Identifier for this task"
                        },
                        "request_uri": {
                            "readOnly": true,
                            "type": "string",
                            "description": "URI of the method invocation that spawned this task",
                            "title": "URI of the method invocation that spawned this task"
                        }
                    }
                }
            ],
            "description": "Appliance management task properties",
            "title": "Appliance management task properties"
        },
        "BridgeClusterStatus": {
            "x-vmw-nsx-module": "AggSvcBridging",
            "type": "object",
            "properties": {
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "health": {
                    "readOnly": true,
                    "enum": [
                        "UP",
                        "DOWN",
                        "DEGRADED",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "The health status of the cluster",
                    "title": "The health status of the cluster"
                },
                "cluster_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "The id of the cluster",
                    "title": "The id of the cluster"
                }
            }
        },
        "PerStepRestoreStatus": {
            "x-vmw-nsx-module": "ClusterRestore",
            "type": "object",
            "description": "Restore step status",
            "properties": {
                "description": {
                    "readOnly": true,
                    "type": "string",
                    "description": "A description of the restore status",
                    "title": "A description of the restore status"
                },
                "value": {
                    "readOnly": true,
                    "enum": [
                        "INITIAL",
                        "RUNNING",
                        "SUSPENDED_BY_USER",
                        "SUSPENDED_FOR_USER_ACTION",
                        "FAILED",
                        "SUCCESS"
                    ],
                    "type": "string",
                    "description": "Per step restore status value",
                    "title": "Per step restore status value"
                }
            },
            "title": "Restore step status"
        },
        "NodeCapability": {
            "x-vmw-nsx-module": "FabricNode",
            "type": "object",
            "description": "Capability of a fabric node",
            "properties": {
                "value": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Value of this capability",
                    "title": "Value of this capability"
                },
                "version": {
                    "readOnly": true,
                    "format": "int32",
                    "type": "integer",
                    "description": "Version of the capability",
                    "title": "Version of the capability"
                },
                "description": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Description of this capability that can be displayed in UI",
                    "title": "Description of this capability that can be displayed in UI"
                },
                "key": {
                    "readOnly": true,
                    "type": "string",
                    "description": "String that identifies the base capability for all nodes",
                    "title": "String that identifies the base capability for all nodes"
                },
                "provider": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Provider of this capability for the node",
                    "title": "Provider of this capability for the node"
                }
            },
            "title": "Capability of a fabric node"
        },
        "MACAddressElement": {
            "x-vmw-nsx-module": "MACSet",
            "allOf": [
                {
                    "$ref": "#/definitions/RevisionedResource"
                },
                {
                    "required": [
                        "mac_address"
                    ],
                    "x-vmw-nsx-module": "MACSet",
                    "type": "object",
                    "properties": {
                        "mac_address": {
                            "description": "A MAC address. Must be 6 pairs of hexadecimal digits, upper or lower case,\nseparated by colons or dashes. Examples: 01:23:45:67:89:ab, 01-23-45-67-89-AB.\n",
                            "pattern": "/^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$/",
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "MAC Address",
            "title": "MAC Address"
        },
        "AdvertisedNetwork": {
            "x-vmw-nsx-module": "L3",
            "type": "object",
            "properties": {
                "advertised_route_type": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Advertise network route type on TIER0 LR",
                    "title": "Advertised route type of network"
                },
                "resource": {
                    "readOnly": true,
                    "title": "Resource of network",
                    "description": "Resource which has registered network.",
                    "$ref": "#/definitions/ResourceReference"
                },
                "network": {
                    "description": "Advertised network address.",
                    "format": "ipv4",
                    "readOnly": true,
                    "type": "string"
                },
                "is_advertised": {
                    "default": false,
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Flag to denote advertisement status of network to TIER0 LR.",
                    "title": "Advertisement status of network"
                }
            }
        },
        "NodeCapabilitiesResult": {
            "description": "List of capabilities of a fabric node",
            "title": "List of capabilities of a fabric node",
            "required": [
                "capabilities"
            ],
            "x-vmw-nsx-module": "FabricNode",
            "type": "object",
            "properties": {
                "capabilities": {
                    "items": {
                        "$ref": "#/definitions/NodeCapability"
                    },
                    "type": "array",
                    "description": "Node capability results",
                    "title": "Node capability results"
                }
            }
        },
        "AppProfileMemberAppsCsvRecord": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvRecord"
                },
                {
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "app_profile_category": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Category of the app profile, value could be any string that describes the profile",
                            "title": "Category of the app profile, value could be any string that describes the profile"
                        },
                        "display_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Name of the app profile",
                            "title": "Name of the app profile"
                        },
                        "description": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Description of the app profile",
                            "title": "Description of the app profile"
                        },
                        "member_apps": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Applications that are member of this app profile",
                            "title": "Applications that are member of this app profile"
                        },
                        "app_profile_criteria": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Criteria of the app profile, value could be any string or \"*\" (match any string)",
                            "title": "Criteria of the app profile, value could be any string or \"*\" (match any string)"
                        }
                    }
                }
            ]
        },
        "AdvertisedNetworksListResult": {
            "x-vmw-nsx-module": "L3",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "L3",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/AdvertisedNetwork"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of networks which advertised to TIER0 from TIER1 LR",
                            "title": "List of advertised networks"
                        }
                    }
                }
            ]
        },
        "TraceflowRequest": {
            "x-vmw-nsx-module": "Traceflow",
            "required": [
                "packet",
                "lport_id"
            ],
            "type": "object",
            "properties": {
                "packet": {
                    "title": "Packet configuration",
                    "description": "Packet configuration",
                    "$ref": "#/definitions/PacketData"
                },
                "timeout": {
                    "description": "Maximum time (in ms) the management plane will wait for observation result list to be sent by controller plane.",
                    "title": "Timeout (in ms) for traceflow observations result list",
                    "default": 10000,
                    "format": "int64",
                    "maximum": 15000,
                    "minimum": 5000,
                    "type": "integer"
                },
                "lport_id": {
                    "type": "string",
                    "description": "id of the source logical port to inject the traceflow packet into",
                    "title": "id of the source logical port to inject the traceflow packet into"
                }
            }
        },
        "LogicalRouterConfig": {
            "x-vmw-nsx-module": "LogicalRouter",
            "type": "object",
            "properties": {
                "internal_transit_network": {
                    "description": "CIDR block defining Service router to distributed router links",
                    "format": "ipv4-cidr-block",
                    "type": "string"
                },
                "transport_zone_id": {
                    "type": "string",
                    "description": "Transport zone of the logical router. If specified then all downlink switches should belong to this transport zone and an error will be thrown if transport zone of the downlink switch doesn't match with this transport zone. All internal and external transit switches will be created in this transport zone.",
                    "title": "Transport Zone Identifier"
                },
                "ha_vip_configs": {
                    "items": {
                        "$ref": "#/definitions/HaVipConfig"
                    },
                    "type": "array",
                    "description": "This configuration can be defined only for Active-Standby LogicalRouter to provide | redundancy. For mulitple uplink ports, multiple HaVipConfigs must be defined | and each config will pair exactly two uplink ports. The VIP will move and will | always be owned by the Active node. Note - when HaVipConfig[s] are defined, | configuring dynamic-routing is disallowed.",
                    "title": "Array of HA VIP Config."
                },
                "external_transit_networks": {
                    "items": {
                        "description": "IPv4 CIDR Block",
                        "format": "ipv4-cidr-block",
                        "type": "string"
                    },
                    "type": "array",
                    "description": "CIDR block defining tier0 to tier1 links",
                    "title": "CIDR block defining tier0 to tier1 links"
                }
            }
        },
        "TunnelPortConfig": {
            "description": "IP Tunnel port configuration.",
            "title": "IP Tunnel port configuration",
            "required": [
                "ip_subnets"
            ],
            "x-vmw-nsx-module": "IPSecVPN",
            "type": "object",
            "properties": {
                "ip_subnets": {
                    "items": {
                        "$ref": "#/definitions/IPSubnet"
                    },
                    "type": "array",
                    "description": "IP Tunnel port  (commonly referred as VTI) subnet.",
                    "maxItems": 1,
                    "title": "IP Tunnel port subnet"
                },
                "tunnel_port_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Logical route port identifier.",
                    "title": "Logical route port identifier"
                }
            }
        },
        "LbTcpMonitor": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbActiveMonitor"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "receive": {
                            "type": "string",
                            "description": "Expected data, if specified, can be anywhere in the response and it has to\nbe a string, regular expressions are not supported.\n",
                            "title": "expected data received from server"
                        },
                        "send": {
                            "type": "string",
                            "description": "If both send and receive are not specified, then just a TCP connection\nis established (3-way handshake) to validate server is healthy, no\ndata is sent.\n",
                            "title": "data to send"
                        }
                    }
                }
            ]
        },
        "FileTransferProtocol": {
            "description": "Protocol to transfer backup file to remote server",
            "title": "Protocol to transfer backup file to remote server",
            "required": [
                "protocol_name",
                "ssh_fingerprint",
                "authentication_scheme"
            ],
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "properties": {
                "protocol_name": {
                    "default": "sftp",
                    "enum": [
                        "sftp"
                    ],
                    "type": "string",
                    "description": "Protocol name",
                    "title": "Protocol name"
                },
                "ssh_fingerprint": {
                    "type": "string",
                    "description": "The expected SSH fingerprint of the server. If the server's fingerprint\ndoes not match this fingerprint, the connection will be terminated.\n\nOnly ECDSA fingerprints hashed with SHA256 are supported. To obtain the\nhost's ssh fingerprint, you should connect via some method other than\nSSH to obtain this information. You can use one of these commands to\nview the key's fingerprint:\n1. ssh-keygen -l -E sha256 -f ssh_host_ecdsa_key.pub\n2. awk '{print $2}' ssh_host_ecdsa_key.pub | base64 -d | sha256sum -b |\n   sed 's/ .*$//' | xxd -r -p | base64 | sed 's/.//44g' |\n   awk '{print \"SHA256:\"$1}'\n",
                    "title": "SSH fingerprint of server"
                },
                "authentication_scheme": {
                    "title": "Scheme to authenticate if required",
                    "description": "Scheme to authenticate if required",
                    "$ref": "#/definitions/FileTransferAuthenticationScheme"
                }
            }
        },
        "LogicalPortListResult": {
            "x-vmw-nsx-module": "LogicalPort",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LogicalPort",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalPort"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "LogicalPort Results",
                            "title": "LogicalPort Results"
                        }
                    }
                }
            ],
            "description": "Logical port queries result",
            "title": "Logical port queries result"
        },
        "LbUdpMonitor": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbActiveMonitor"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "receive",
                        "send"
                    ],
                    "type": "object",
                    "properties": {
                        "receive": {
                            "type": "string",
                            "description": "Expected data, can be anywhere in the response and it has to be a\nstring, regular expressions are not supported.\nUDP healthcheck is considered failed if there is no server response\nwithin the timeout period.\n",
                            "title": "expected data received from server"
                        },
                        "send": {
                            "type": "string",
                            "description": "The data to be sent to the monitored server.\n",
                            "title": "data to send"
                        }
                    }
                }
            ]
        },
        "IPSecVPNIKEProfile": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "digest_algorithms": {
                            "items": {
                                "description": "The IKEDigestAlgorithms are used to verify message\nintegrity during IKE negotiation. SHA1 produces 160\nbits hash and SHA2_XXX produces XXX bit hash.\n",
                                "enum": [
                                    "SHA1",
                                    "SHA2_256",
                                    "SHA2_384",
                                    "SHA2_512"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Algorithm to be used for message digest during Internet Key Exchange(IKE) negotiation. Default is SHA2_256.",
                            "title": "Algorithm for message hash"
                        },
                        "encryption_algorithms": {
                            "items": {
                                "description": "IKEEncryption algorithms are used to ensure confidentiality of\nthe messages exchanged during IKE negotiations. AES stands for\nAdvanced Encryption Standards. AES_128 uses 128-bit keys whereas\nAES_256 uses 256-bit keys for encryption and decryption.\nAES_GCM stands for Advanced Encryption Standard(AES) in\nGalois/Counter Mode(GCM) and is used to provide both\nconfidentiality and data origin authentication. AES_GCM composed\nof two separate functions one for encryption(AES) and one for\nauthentication(GMAC). AES_GCM algorithms will be available with\nIKE_V2 version only.\nAES_GCM_128 uses 128-bit keys.\nAES_GCM_192 uses 192-bit keys.\nAES_GCM_256 uses 256-bit keys.\n",
                                "enum": [
                                    "AES_128",
                                    "AES_256",
                                    "AES_GCM_128",
                                    "AES_GCM_192",
                                    "AES_GCM_256"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Encryption algorithm is used during Internet Key Exchange(IKE) negotiation. Default is AES_128.",
                            "title": "Encryption algorithm for IKE"
                        },
                        "dh_groups": {
                            "items": {
                                "description": "Diffie-Hellman groups represent algorithm used to derive shared\nkeys between IPSec VPN initiator and responder over an\nunsecured network.\nGROUP2 uses 1024-bit Modular Exponentiation (MODP) group.\nGROUP5 uses 1536-bit MODP group.\nGROUP14 uses 2048-bit MODP group.\nGROUP15 uses 3072-bit MODP group.\nGROUP16 uses 4096-bit MODP group.\n",
                                "enum": [
                                    "GROUP2",
                                    "GROUP5",
                                    "GROUP14",
                                    "GROUP15",
                                    "GROUP16"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.",
                            "title": "DH group"
                        },
                        "sa_life_time": {
                            "description": "Life time for security association. Default is 86400 seconds (1 day).",
                            "title": "Security association (SA) life time",
                            "default": 86400,
                            "format": "int64",
                            "maximum": 31536000,
                            "minimum": 21600,
                            "type": "integer"
                        },
                        "ike_version": {
                            "default": "IKE-V2",
                            "enum": [
                                "IKE_V1",
                                "IKE_V2",
                                "IKE_FLEX"
                            ],
                            "type": "string",
                            "description": "IKE protocol version to be used. IKE-Flex will initiate IKE-V2 and responds to both IKE-V1 and IKE-V2.",
                            "title": "IKE version"
                        }
                    }
                }
            ],
            "description": "IKE Profile is a reusable profile that captures IKE phase one negotiation parameters. Any changes affects all IPSec VPN sessions consuming this profile.",
            "title": "Internet key exchange (IKE) profile"
        },
        "NatRuleListResult": {
            "x-vmw-nsx-module": "Nat",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Nat",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NatRule"
                            },
                            "type": "array",
                            "description": "NAT rule list results",
                            "title": "NAT rule list results"
                        }
                    }
                }
            ]
        },
        "ALGTypeNSService": {
            "x-vmw-nsx-module": "Types",
            "allOf": [
                {
                    "$ref": "#/definitions/NSServiceElement"
                },
                {
                    "required": [
                        "alg"
                    ],
                    "x-vmw-nsx-module": "Types",
                    "type": "object",
                    "properties": {
                        "alg": {
                            "enum": [
                                "ORACLE_TNS",
                                "FTP",
                                "SUN_RPC_TCP",
                                "SUN_RPC_UDP",
                                "MS_RPC_TCP",
                                "MS_RPC_UDP",
                                "NBNS_BROADCAST",
                                "NBDG_BROADCAST",
                                "TFTP"
                            ],
                            "type": "string",
                            "description": "The Application Layer Gateway (ALG) protocol",
                            "title": "The Application Layer Gateway (ALG) protocol"
                        },
                        "destination_ports": {
                            "items": {
                                "description": "Examples- Single port \"8080\", Range of ports \"8090-8095\"\n",
                                "format": "port-or-range",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "The destination_port cannot be empty and must be a single value.",
                            "maxItems": 15,
                            "title": "The destination_port cannot be empty and must be a single value."
                        },
                        "source_ports": {
                            "items": {
                                "description": "Examples- Single port \"8080\", Range of ports \"8090-8095\"\n",
                                "format": "port-or-range",
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Source ports",
                            "maxItems": 15,
                            "title": "Source ports"
                        }
                    }
                }
            ],
            "description": "An NSService element that represents an ALG protocol",
            "title": "An NSService element that represents an ALG protocol"
        },
        "ApplianceManagementTaskListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ApplianceManagementTaskProperties"
                            },
                            "type": "array",
                            "description": "Task property results",
                            "title": "Task property results"
                        }
                    }
                }
            ],
            "description": "Appliance management task query results",
            "title": "Appliance management task query results"
        },
        "VtepLabelRange": {
            "x-vmw-nsx-module": "VtepLabel",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "VtepLabel",
                    "required": [
                        "start",
                        "end"
                    ],
                    "type": "object",
                    "properties": {
                        "start": {
                            "description": "Start value for virtual tunnel endpoint label range",
                            "title": "Virtual tunnel endpoint label range start",
                            "format": "int64",
                            "maximum": 131071,
                            "readOnly": false,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "end": {
                            "description": "End value for virtual tunnel endpoint label range",
                            "title": "Virtual tunnel endpoint label range end",
                            "format": "int64",
                            "maximum": 131071,
                            "readOnly": false,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "NodeVersion": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "product_version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Product version",
                    "title": "Product version"
                },
                "node_version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Node version",
                    "title": "Node version"
                }
            }
        },
        "EdgeClusterListResult": {
            "x-vmw-nsx-module": "EdgeClusters",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "EdgeClusters",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/EdgeCluster"
                            },
                            "type": "array",
                            "description": "Edge cluster list results",
                            "title": "Edge cluster list results"
                        }
                    }
                }
            ]
        },
        "ActionableResourceListResult": {
            "x-vmw-nsx-module": "ClusterRestore",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ClusterRestore",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ActionableResource"
                            },
                            "type": "array",
                            "description": "List results",
                            "title": "List results"
                        }
                    }
                }
            ]
        },
        "LbVariableAssignmentAction": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleAction"
                },
                {
                    "required": [
                        "variable_value",
                        "variable_name"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "variable_value": {
                            "type": "string",
                            "description": "Value of variable",
                            "title": "Value of variable"
                        },
                        "variable_name": {
                            "type": "string",
                            "description": "Name of the variable to be assigned",
                            "title": "Name of the variable to be assigned"
                        }
                    }
                }
            ],
            "description": "This action is used to create a new variable and assign value to it.\nOne action can be used to create one variable. To create multiple\nvariables, multiple actions must be defined.\nThe variables can be used by LbVariableCondition, etc.\n",
            "title": "Action to create variable and assign value to it."
        },
        "TraceflowObservationListResult": {
            "x-vmw-nsx-module": "Traceflow",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Traceflow",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/TraceflowObservation"
                            },
                            "type": "array",
                            "description": "TraceflowObservation list results",
                            "title": "TraceflowObservation list results"
                        }
                    }
                }
            ]
        },
        "LogicalRouterRouteCsvRecord": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvRecord"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouter",
                    "required": [
                        "route_type",
                        "network"
                    ],
                    "type": "object",
                    "properties": {
                        "lr_component_id": {
                            "type": "string",
                            "description": "Logical router component(Service Router/Distributed Router) id",
                            "title": "Logical router component(Service Router/Distributed Router) id"
                        },
                        "next_hop": {
                            "description": "The IP of the next hop",
                            "format": "ip",
                            "type": "string"
                        },
                        "lr_component_type": {
                            "type": "string",
                            "description": "Logical router component(Service Router/Distributed Router) type",
                            "title": "Logical router component(Service Router/Distributed Router) type"
                        },
                        "network": {
                            "description": "CIDR network address",
                            "format": "ipv4-cidr-block",
                            "type": "string"
                        },
                        "route_type": {
                            "type": "string",
                            "description": "Route type (USER, CONNECTED, NSX_INTERNAL,..)",
                            "title": "Route type (USER, CONNECTED, NSX_INTERNAL,..)"
                        },
                        "logical_router_port_id": {
                            "type": "string",
                            "description": "The id of the logical router port which is used as the next hop",
                            "title": "The id of the logical router port which is used as the next hop"
                        },
                        "admin_distance": {
                            "format": "int64",
                            "type": "integer",
                            "description": "The admin distance of the next hop",
                            "title": "The admin distance of the next hop"
                        }
                    }
                }
            ]
        },
        "LbHttpRequestMethodCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "method"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "method": {
                            "description": "Type of HTTP request method",
                            "enum": [
                                "GET",
                                "OPTIONS",
                                "POST",
                                "HEAD",
                                "PUT"
                            ],
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "This condition is used to match method of HTTP requests. If the method of an\nHTTP request is same as the method specified in this condition, the HTTP\nrequest match this condition. For example, if the method field is set to\nGET in this condition, any HTTP request with GET method matches the\ncondition.\n",
            "title": "Condition to match method of HTTP request messages"
        },
        "UpgradeUnitGroup": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "required": [
                        "type"
                    ],
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "default": true,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Flag to indicate whether upgrade of this group is enabled or not",
                            "title": "Flag to indicate whether upgrade of this group is enabled or not"
                        },
                        "upgrade_unit_count": {
                            "readOnly": true,
                            "format": "int32",
                            "type": "integer",
                            "description": "Number of upgrade units in the group",
                            "title": "Count of upgrade units in the group"
                        },
                        "type": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Component type",
                            "title": "Component type"
                        },
                        "upgrade_units": {
                            "description": "List of upgrade units in the group",
                            "title": "List of upgrade units in the group",
                            "items": {
                                "$ref": "#/definitions/UpgradeUnit"
                            },
                            "readOnly": false,
                            "maxItems": 100,
                            "type": "array"
                        },
                        "extended_configuration": {
                            "description": "Extended configuration for the group",
                            "title": "Extended configuration for the group",
                            "items": {
                                "$ref": "#/definitions/KeyValuePair"
                            },
                            "readOnly": false,
                            "maxItems": 100,
                            "type": "array"
                        },
                        "parallel": {
                            "default": true,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Upgrade method to specify whether the upgrade is to be performed in parallel or serially",
                            "title": "Upgrade method to specify whether the upgrade is to be performed in parallel or serially"
                        }
                    }
                }
            ]
        },
        "EthernetHeader": {
            "x-vmw-nsx-module": "Traceflow",
            "type": "object",
            "properties": {
                "dst_mac": {
                    "type": "string",
                    "description": "The destination MAC address of form:\n\"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.\n",
                    "title": "Destination MAC address of the Ethernet header"
                },
                "eth_type": {
                    "description": "This field defaults to IPv4.",
                    "title": "The value of the type field to be put into the Ethernet header",
                    "default": 2048,
                    "format": "int64",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                },
                "src_mac": {
                    "type": "string",
                    "description": "The source MAC address of form:\n\"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.\n",
                    "title": "Source MAC address of the Ethernet header"
                }
            }
        },
        "PacketData": {
            "x-vmw-nsx-module": "Traceflow",
            "required": [
                "resource_type"
            ],
            "type": "object",
            "properties": {
                "routed": {
                    "type": "boolean",
                    "description": "A flag, when set true, indicates that the traceflow packet is of L3 routing.",
                    "title": "A flag, when set true, indicates that the traceflow packet is of L3 routing."
                },
                "transport_type": {
                    "default": "UNICAST",
                    "enum": [
                        "BROADCAST",
                        "UNICAST",
                        "MULTICAST",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "transport type of the traceflow packet",
                    "title": "transport type of the traceflow packet"
                },
                "resource_type": {
                    "default": "FieldsPacketData",
                    "enum": [
                        "BinaryPacketData",
                        "FieldsPacketData"
                    ],
                    "type": "string",
                    "description": "Packet configuration",
                    "title": "Packet configuration"
                },
                "frame_size": {
                    "description": "If the requested frame_size is too small (given the payload and traceflow metadata requirement of 16 bytes), the traceflow request will fail with an appropriate message.  The frame will be zero padded to the requested size.",
                    "title": "Requested total size of the (logical) packet in bytes",
                    "default": 128,
                    "format": "int64",
                    "maximum": 1000,
                    "minimum": 60,
                    "type": "integer"
                }
            }
        },
        "VtepTableCsvRecord": {
            "x-vmw-nsx-module": "AggSvcLogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvRecord"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalSwitch",
                    "required": [
                        "vtep_label",
                        "vtep_mac_address"
                    ],
                    "type": "object",
                    "properties": {
                        "vtep_label": {
                            "format": "int64",
                            "type": "integer",
                            "description": "The virtual tunnel endpoint label",
                            "title": "The virtual tunnel endpoint label"
                        },
                        "vtep_mac_address": {
                            "type": "string",
                            "description": "The virtual tunnel endpoint MAC address",
                            "title": "The virtual tunnel endpoint MAC address"
                        },
                        "vtep_ip": {
                            "description": "The virtual tunnel endpoint IP address",
                            "format": "ip",
                            "type": "string"
                        },
                        "segment_id": {
                            "type": "string",
                            "description": "The segment Id",
                            "title": "The segment Id"
                        }
                    }
                }
            ]
        },
        "IPSecVPNSession": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "local_endpoint_id",
                        "peer_endpoint_id",
                        "resource_type"
                    ],
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "local_endpoint_id": {
                            "type": "string",
                            "description": "Local endpoint identifier.",
                            "title": "Local endpoint identifier"
                        },
                        "peer_endpoint_id": {
                            "type": "string",
                            "description": "Peer endpoint identifier.",
                            "title": "Peer endpoint identifier"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "Enable/Disable IPSec VPN session.",
                            "title": "Enable/Disable IPSec VPN session"
                        },
                        "resource_type": {
                            "description": "A Policy Based VPN requires to define protect rules that match\n  local and peer subnets. IPSec security associations is\n  negotiated for each pair of local and peer subnet.\nA Route Based VPN is more flexible, more powerful and recommended over\n  policy based VPN. IP Tunnel port is created and all traffic routed via\n  tunnel port is protected. Routes can be configured statically\n  or can be learned through BGP. A route based VPN is must for establishing\n  redundant VPN session to remote site.\n",
                            "enum": [
                                "PolicyBasedIPSecVPNSession",
                                "RouteBasedIPSecVPNSession"
                            ],
                            "type": "string"
                        },
                        "ipsec_vpn_service_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Identifier of VPN Service linked with local endpoint.",
                            "title": "IPSec VPN service identifier"
                        }
                    }
                }
            ],
            "description": "VPN session defines connection between local and peer endpoint. Untill VPN session is defined configuration is not realized.",
            "title": "IPSec VPN session"
        },
        "ActionableResource": {
            "x-vmw-nsx-module": "ClusterRestore",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "ClusterRestore",
                    "type": "object",
                    "properties": {
                        "ip_address": {
                            "description": "A resource reference on which actions can be performed",
                            "format": "ip",
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "Resources managed during restore process",
            "title": "Resources managed during restore process"
        },
        "PoolMember": {
            "x-vmw-nsx-module": "LoadBalancer",
            "required": [
                "ip_address"
            ],
            "type": "object",
            "properties": {
                "max_concurrent_connections": {
                    "description": "To ensure members are not overloaded, connections to a member can be\ncapped by the load balancer. When a member reaches this limit, it is\nskipped during server selection.\nIf it is not specified, it means that connections are unlimited.\n",
                    "format": "int64",
                    "title": "maximum concurrent connection number",
                    "maximum": 2147483647,
                    "minimum": 1,
                    "type": "integer"
                },
                "admin_state": {
                    "description": "member admin state",
                    "default": "ENABLED",
                    "enum": [
                        "ENABLED",
                        "DISABLED",
                        "GRACEFUL_DISABLED"
                    ],
                    "type": "string"
                },
                "backup_member": {
                    "default": false,
                    "type": "boolean",
                    "description": "Backup servers are typically configured with a sorry page indicating to\nthe user that the application is currently unavailable. While the pool\nis active (a specified minimum number of pool members are active)\nBACKUP members are skipped during server selection. When the pool is\ninactive, incoming connections are sent to only the BACKUP member(s).\n",
                    "title": "determine whether the pool member is for backup usage"
                },
                "weight": {
                    "description": "Pool member weight is used for WEIGHTED_ROUND_ROBIN balancing\nalgorithm. The weight value would be ignored in other algorithms.\n",
                    "title": "pool member weight",
                    "default": 1,
                    "format": "int64",
                    "maximum": 256,
                    "minimum": 1,
                    "type": "integer"
                },
                "display_name": {
                    "type": "string",
                    "description": "pool member name",
                    "title": "pool member name"
                },
                "ip_address": {
                    "description": "pool member IP address",
                    "format": "ip",
                    "type": "string"
                },
                "port": {
                    "description": "If port is specified, all connections will be sent to this port. Only\nsingle port is supported.\nIf unset, the same port the client connected to will be used, it could\nbe overrode by default_pool_member_port setting in virtual server.\nThe port should not specified for port range case.\n",
                    "format": "port-or-range",
                    "type": "string"
                }
            }
        },
        "FeatureUsageCsvRecord": {
            "x-vmw-nsx-module": "License",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvRecord"
                },
                {
                    "x-vmw-nsx-module": "License",
                    "type": "object",
                    "properties": {
                        "vcpu_usage_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "count of number of vcpus of public cloud VMs",
                            "title": "count of number of vcpus of public cloud VMs"
                        },
                        "cpu_usage_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "count of number of cpu sockets used by this feature",
                            "title": "count of number of cpu sockets used by this feature"
                        },
                        "feature": {
                            "readOnly": true,
                            "type": "string",
                            "description": "name of the feature",
                            "title": "name of the feature"
                        },
                        "vm_usage_count": {
                            "readOnly": true,
                            "format": "int64",
                            "type": "integer",
                            "description": "count of number of vms used by this feature",
                            "title": "count of number of vms used by this feature"
                        }
                    }
                }
            ]
        },
        "TrustObjectData": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "CertificateManager",
                    "required": [
                        "pem_encoded"
                    ],
                    "type": "object",
                    "properties": {
                        "key_algo": {
                            "type": "string",
                            "description": "Key algorithm contained in this certificate"
                        },
                        "private_key": {
                            "readOnly": false,
                            "type": "string",
                            "description": "private key data"
                        },
                        "passphrase": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Password for private key encryption"
                        },
                        "pem_encoded": {
                            "readOnly": false,
                            "type": "string",
                            "description": "pem encoded certificate data"
                        }
                    }
                }
            ]
        },
        "ConditionalForwarderZone": {
            "x-vmw-nsx-module": "DnsForwarder",
            "allOf": [
                {
                    "$ref": "#/definitions/ForwarderZone"
                },
                {
                    "x-vmw-nsx-module": "DnsForwarder",
                    "required": [
                        "domain_names"
                    ],
                    "type": "object",
                    "properties": {
                        "domain_names": {
                            "description": "A forwarder domain name should be a valid FQDN. If reverse lookup is\nneeded for this zone, reverse lookup domain name like X.in-addr.arpa\ncan be defined. Here the X represents a subnet.\n",
                            "title": "Domain names of a forwarder zone",
                            "minItems": 1,
                            "items": {
                                "type": "string"
                            },
                            "maxItems": 100,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "BfdHealthMonitoringProfile": {
            "x-vmw-nsx-module": "BfdHealthMonitoringProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/TransportZoneProfile"
                },
                {
                    "required": [
                        "enabled"
                    ],
                    "x-vmw-nsx-module": "BfdHealthMonitoringProfile",
                    "type": "object",
                    "properties": {
                        "probe_interval": {
                            "description": "The time interval (in millisec) between probe packets for tunnels between transport nodes.",
                            "format": "int64",
                            "default": 1000,
                            "title": "The time interval (in millisec) between probe packets for tunnels between transport nodes.",
                            "minimum": 300,
                            "type": "integer"
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether the heartbeat is enabled. A POST or PUT request with \"enabled\" false (with no probe intervals) will set (POST) or reset (PUT) the probe_interval to their default value.",
                            "title": "Whether the heartbeat is enabled. A POST or PUT request with \"enabled\" false (with no probe intervals) will set (POST) or reset (PUT) the probe_interval to their default value."
                        }
                    }
                }
            ],
            "description": "Profile for BFD health monitoring",
            "title": "Profile for BFD health monitoring"
        },
        "PoolUsage": {
            "x-vmw-nsx-module": "Ipam",
            "type": "object",
            "description": "Pool usage statistics in a pool.",
            "properties": {
                "total_ids": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of IDs in a pool",
                    "title": "Total number of IDs in a pool"
                },
                "allocated_ids": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of allocated IDs in a pool",
                    "title": "Total number of allocated IDs in a pool"
                },
                "free_ids": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of free IDs in a pool",
                    "title": "Total number of free IDs in a pool"
                }
            }
        },
        "IpfixServiceAssociationListResult": {
            "x-vmw-nsx-module": "GroupingObjectsProviders",
            "allOf": [
                {
                    "$ref": "#/definitions/ServiceAssociationListResult"
                },
                {
                    "x-vmw-nsx-module": "GroupingObjectsProviders",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IpfixConfig"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Ipfix config list result with pagination support.",
                            "title": "IpfixConfig list result"
                        }
                    }
                }
            ]
        },
        "IPSecVPNSessionStatus": {
            "x-vmw-nsx-module": "VPNStatistics",
            "type": "object",
            "description": "IKE session traffic summary provides IKE session status and aggregate of traffic across all tunnel.",
            "properties": {
                "ipsec_vpn_session_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "UUID of vpn session.",
                    "title": "Session identifier"
                },
                "display_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Display name of vpn session.",
                    "title": "Display name"
                },
                "failed_tunnels": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of failed tunnels.",
                    "title": "Failed tunnels"
                },
                "negotiated_tunnels": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of negotiated tunnels.",
                    "title": "Negotiated tunnels"
                },
                "session_status": {
                    "readOnly": true,
                    "enum": [
                        "UP",
                        "DOWN",
                        "DEGRADED"
                    ],
                    "type": "string",
                    "description": "Gives session status consolidated using IKE status and tunnel status. It can be UP, DOWN, DEGRADED. If IKE and all tunnels are UP status will be UP, if all down it will be DOWN, otherwise it will be DEGRADED.",
                    "title": "Session status"
                },
                "last_update_timestamp": {
                    "description": "Timestamp when the data was last updated.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                },
                "aggregate_traffic_counters": {
                    "readOnly": true,
                    "title": "Traffic summary",
                    "description": "Aggregate traffic statistics across all ipsec tunnels.",
                    "$ref": "#/definitions/IPSecVPNTrafficCounters"
                },
                "ike_status": {
                    "readOnly": true,
                    "title": "IKE status",
                    "description": "Status for IPSec VPN IKE session UP/DOWN and fail reason if IKE session is down.",
                    "$ref": "#/definitions/IPSecVPNIKESessionStatus"
                },
                "total_tunnels": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Total number of tunnels.",
                    "title": "Total tunnels"
                }
            },
            "title": "IKE session traffic summary"
        },
        "TaskListResult": {
            "x-vmw-nsx-module": "Tasks",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "Tasks",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/TaskProperties"
                            },
                            "type": "array",
                            "description": "Task property results",
                            "title": "Task property results"
                        }
                    }
                }
            ],
            "description": "Task query results",
            "title": "Task query results"
        },
        "LbServerSslProfileListResult": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LbServerSslProfile"
                            },
                            "type": "array",
                            "description": "paginated list of load balancer server SSL profiles",
                            "title": "paginated list of load balancer server SSL profiles"
                        }
                    }
                }
            ]
        },
        "DiscoveredNode": {
            "x-vmw-nsx-module": "InventoryCmObj",
            "allOf": [
                {
                    "$ref": "#/definitions/DiscoveredResource"
                },
                {
                    "x-vmw-nsx-module": "InventoryCmObj",
                    "type": "object",
                    "properties": {
                        "stateless": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "The stateless property describes whether host persists its state across reboot or not. If state persists, value is set as false otherwise true.",
                            "title": "Specifies whether host is stateless"
                        },
                        "display_name": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Display name of discovered node",
                            "title": "Display name of discovered node"
                        },
                        "certificate": {
                            "type": "string",
                            "description": "Certificate of the discovered node",
                            "title": "Certificate of the discovered node"
                        },
                        "origin_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Id of the compute manager from where this node was discovered",
                            "title": "Id of the compute manager from where this node was discovered"
                        },
                        "ip_addresses": {
                            "items": {
                                "description": "IPv4 or IPv6 address",
                                "format": "ip",
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "IP Addresses of the the discovered node.",
                            "title": "IP Addresses of the the discovered node."
                        },
                        "hardware_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Hardware Id is generated using system hardware info. It is used to retrieve fabric node of the esx.",
                            "title": "Hardware Id of the discovered node"
                        },
                        "os_version": {
                            "readOnly": true,
                            "type": "string",
                            "description": "OS version of the discovered node",
                            "title": "OS version of the discovered node"
                        },
                        "node_type": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Discovered Node type like Host",
                            "title": "Discovered Node type like Host"
                        },
                        "parent_compute_collection": {
                            "readOnly": true,
                            "type": "string",
                            "description": "External id of the compute collection to which this node belongs",
                            "title": "External id of the compute collection to which this node belongs"
                        },
                        "os_type": {
                            "readOnly": true,
                            "type": "string",
                            "description": "OS type of the discovered node",
                            "title": "OS type of the discovered node"
                        },
                        "origin_properties": {
                            "items": {
                                "$ref": "#/definitions/KeyValuePair"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Key-Value map of additional specific properties of discovered\nnode in the Compute Manager\n",
                            "title": "Key-Value map of additional specific properties of discovered\nnode in the Compute Manager\n"
                        },
                        "external_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "External id of the discovered node, ex. a mo-ref from VC",
                            "title": "External id of the discovered node, ex. a mo-ref from VC"
                        },
                        "cm_local_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Local Id of the discovered node in the Compute Manager",
                            "title": "Local Id of the discovered node in the Compute Manager"
                        }
                    }
                }
            ]
        },
        "LbHttpResponseHeaderCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "header_value",
                        "header_name"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "header_value": {
                            "type": "string",
                            "description": "Value of HTTP header field",
                            "title": "Value of HTTP header field"
                        },
                        "case_sensitive": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, case is significant when comparing HTTP header value.\n",
                            "title": "A case sensitive flag for HTTP header value comparing"
                        },
                        "match_type": {
                            "description": "Match type of HTTP header value",
                            "default": "REGEX",
                            "enum": [
                                "STARTS_WITH",
                                "ENDS_WITH",
                                "EQUALS",
                                "CONTAINS",
                                "REGEX"
                            ],
                            "type": "string"
                        },
                        "header_name": {
                            "type": "string",
                            "description": "Name of HTTP header field",
                            "title": "Name of HTTP header field"
                        }
                    }
                }
            ],
            "description": "This condition is used to match HTTP response messages from backend servers\nby HTTP header fields. HTTP header fields are components of the header\nsection of HTTP request and response messages. They define the operating\nparameters of an HTTP transaction. For example, Cookie, Authorization,\nUser-Agent, etc. One condition can be used to match one header field, to\nmatch multiple header fields, multiple conditions must be specified.\nThe match_type field defines how header_value field is used to match HTTP\nresponses. The header_name field does not support match types.\n",
            "title": "Condition to match a header field of HTTP response"
        },
        "ServiceRouterAllocationConfig": {
            "x-vmw-nsx-module": "LogicalRouter",
            "required": [
                "edge_cluster_id"
            ],
            "type": "object",
            "properties": {
                "edge_cluster_member_indices": {
                    "items": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "type": "array",
                    "description": "For TIER 1 logical router, for manual placement of service router\nwithin the cluster, edge cluster member indices needs to be provided\nelse same will be auto-allocated. You can provide maximum two indices\nfor HA ACTIVE_STANDBY.\n",
                    "title": "Member indices of the edge node on the cluster"
                },
                "allocation_pool": {
                    "title": "Edge Cluster Member Allocation Pool for logical router",
                    "description": "Logical router allocation can be tracked for specific services and\nservices may have their own hard limits and allocation sizes. For\nexample load balancer pool should be specified if load balancer\nservice will be attached to logical router.\n",
                    "$ref": "#/definitions/EdgeClusterMemberAllocationPool"
                },
                "edge_cluster_id": {
                    "type": "string",
                    "description": "To reallocate TIER1 logical router on new or existing edge cluster\n",
                    "title": "Edge cluster id to re allocate members"
                }
            }
        },
        "IPSecVPNLocalEndpoint": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "ipsec_vpn_service_id",
                        "local_address"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "ipsec_vpn_service_id": {
                            "title": "VPN Service id",
                            "description": "VPN Service id.",
                            "$ref": "#/definitions/ResourceReference"
                        },
                        "trust_ca_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Certificate authority (CA) identifier list to verify peer certificates. Field is marked for future use. Certificate based authentication is not supported.",
                            "title": "Certificate authority (CA) identifiers"
                        },
                        "local_id": {
                            "type": "string",
                            "description": "Local identifier.",
                            "title": "Local identifier"
                        },
                        "local_address": {
                            "description": "IPV4 Address for local endpoint.",
                            "format": "ipv4",
                            "type": "string"
                        },
                        "certificate_id": {
                            "type": "string",
                            "description": "Site certificate identifier. Field is marked for future use. Certificate based authentication is not supported.",
                            "title": "Certificate Id"
                        },
                        "trust_crl_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Certificate revocation list (CRL) identifier list to peer certificates. Field is marked for future use. Certificate based authentication is not supported.",
                            "title": "Certificate revocation list (CRL) Identifiers"
                        }
                    }
                }
            ],
            "description": "Local endpoint represents a logical router on which tunnel needs to be terminated.",
            "title": "IPSec VPN Local Endpoint"
        },
        "RoleWithFeatures": {
            "description": "Role",
            "title": "Role",
            "required": [
                "features"
            ],
            "x-vmw-nsx-module": "AAA",
            "type": "object",
            "properties": {
                "role": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Role name",
                    "title": "Role name"
                },
                "features": {
                    "items": {
                        "$ref": "#/definitions/FeaturePermission"
                    },
                    "type": "array",
                    "description": "Features",
                    "title": "Features"
                }
            }
        },
        "LogicalRouterStatusPerNode": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "required": [
                "high_availability_status",
                "transport_node_id"
            ],
            "type": "object",
            "properties": {
                "high_availability_status": {
                    "enum": [
                        "ACTIVE",
                        "STANDBY",
                        "DOWN",
                        "SYNC",
                        "UNKNOWN"
                    ],
                    "type": "string",
                    "description": "A service router's HA status on an edge node",
                    "title": "A service router's HA status on an edge node"
                },
                "service_router_id": {
                    "type": "string",
                    "description": "id of the service router where the router status is retrieved.",
                    "title": "id of the service router where the router status is retrieved."
                },
                "transport_node_id": {
                    "type": "string",
                    "description": "id of the transport node where the router status is retrieved.",
                    "title": "id of the transport node where the router status is retrieved."
                }
            }
        },
        "PortConnectionHypervisor": {
            "x-vmw-nsx-module": "PortConnection",
            "allOf": [
                {
                    "$ref": "#/definitions/PortConnectionEntity"
                },
                {
                    "x-vmw-nsx-module": "PortConnection",
                    "type": "object",
                    "properties": {
                        "pnics": {
                            "items": {
                                "$ref": "#/definitions/Pnic"
                            },
                            "type": "array",
                            "x-deprecated": true
                        },
                        "pnics_list": {
                            "items": {
                                "$ref": "#/definitions/NodeInterfaceProperties"
                            },
                            "type": "array"
                        },
                        "neighbors_list": {
                            "items": {
                                "$ref": "#/definitions/InterfaceNeighborProperties"
                            },
                            "type": "array"
                        },
                        "profiles": {
                            "items": {
                                "$ref": "#/definitions/BaseHostSwitchProfile"
                            },
                            "type": "array"
                        }
                    }
                }
            ],
            "description": "Port Connection Hypervisor/Transport Node Entity",
            "title": "Port Connection Hypervisor/Transport Node Entity"
        },
        "StringMapEntry": {
            "x-vmw-nsx-module": "VCExecuteOperation",
            "required": [
                "key"
            ],
            "type": "object",
            "properties": {
                "value": {
                    "readOnly": false,
                    "maxLength": 8192,
                    "type": "string",
                    "description": "String value for the map entry",
                    "title": "String value for the map entry"
                },
                "key": {
                    "readOnly": false,
                    "type": "string",
                    "description": "String key for the map",
                    "title": "String key for the map"
                }
            }
        },
        "BaseNodeAggregateInfo": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "properties": {
                "node_interface_properties": {
                    "items": {
                        "$ref": "#/definitions/NodeInterfaceProperties"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Array of Node interface statistic properties",
                    "title": "Array of Node interface statistic properties"
                },
                "node_status": {
                    "readOnly": true,
                    "$ref": "#/definitions/ClusterNodeStatus"
                },
                "node_interface_statistics": {
                    "items": {
                        "$ref": "#/definitions/NodeInterfaceStatisticsProperties"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "Array of Node network interface statistic properties",
                    "title": "Array of Node network interface statistic properties"
                },
                "display_name": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "Defaults to ID if not set",
                    "title": "Identifier to use when displaying entity in logs or GUI"
                },
                "node_status_properties": {
                    "items": {
                        "$ref": "#/definitions/NodeStatusProperties"
                    },
                    "type": "array",
                    "description": "Time series of the node's system properties",
                    "title": "Time series of the node's system properties"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Unique identifier of this resource",
                    "title": "Unique identifier of this resource"
                }
            }
        },
        "UpgradePlanSettings": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "properties": {
                "pause_after_each_group": {
                    "default": false,
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Flag to indicate whether to pause the upgrade after upgrade of each group is completed",
                    "title": "Flag to indicate whether to pause the upgrade after upgrade of each group is completed"
                },
                "pause_on_error": {
                    "default": false,
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Flag to indicate whether to pause the upgrade plan execution when an error occurs",
                    "title": "Flag to indicate whether to pause the upgrade plan execution when an error occurs"
                },
                "parallel": {
                    "default": true,
                    "readOnly": false,
                    "type": "boolean",
                    "description": "Upgrade Method to specify whether the upgrade is to be performed serially or in parallel",
                    "title": "Upgrade Method to specify whether the upgrade is to be performed serially or in parallel"
                }
            }
        },
        "GridConfiguration": {
            "x-vmw-nsx-module": "NsxDashboard",
            "allOf": [
                {
                    "$ref": "#/definitions/WidgetConfiguration"
                },
                {
                    "required": [
                        "row_list_fields",
                        "columns"
                    ],
                    "x-vmw-nsx-module": "NsxDashboard",
                    "type": "object",
                    "properties": {
                        "page_size": {
                            "default": 30,
                            "format": "int32",
                            "type": "integer",
                            "description": "Number of records per page. page_size will be effective only when the urls provided in the datasource support paging.",
                            "title": "Page Size"
                        },
                        "span": {
                            "default": 2,
                            "format": "int32",
                            "type": "integer",
                            "description": "Represents the horizontal span of the Grid.",
                            "title": "Horizontal width of grid widget"
                        },
                        "row_list_fields": {
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/RowListField"
                            },
                            "type": "array",
                            "description": "Rows of grid or table are formed from the list of objects returned by a row list field.",
                            "title": "List of fields from which rows are formed"
                        },
                        "columns": {
                            "items": {
                                "$ref": "#/definitions/ColumnItem"
                            },
                            "type": "array",
                            "description": "Array of columns of a Grid widget",
                            "title": "Columns"
                        }
                    }
                }
            ],
            "description": "Represents configuration of a Grid or Table widget.",
            "title": "Grid Configuration"
        },
        "AppInfoHostVmListInCsvFormat": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvListResult"
                },
                {
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/AppInfoHostVmCsvRecord"
                            },
                            "type": "array",
                            "description": "List of appplications discovered during an application discovery session",
                            "title": "List of appplications discovered during an application discovery session"
                        }
                    }
                }
            ]
        },
        "UpgradeUnitAggregateInfoListResult": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/UpgradeUnitAggregateInfo"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Paged collection of UpgradeUnit AggregateInfo",
                            "title": "Paged collection of UpgradeUnit AggregateInfo"
                        }
                    }
                }
            ]
        },
        "AuditLogRequest": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "log_filter": {
                    "type": "string",
                    "description": "Audit logs should meet the filter condition",
                    "title": "Audit logs should meet the filter condition"
                },
                "log_age_limit": {
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer",
                    "description": "Include logs with timstamps not past the age limit in days",
                    "title": "Include logs with timstamps not past the age limit in days"
                },
                "log_filter_type": {
                    "default": "TEXT",
                    "enum": [
                        "TEXT",
                        "REGEX"
                    ],
                    "type": "string",
                    "description": "Type of log filter",
                    "title": "Type of log filter"
                }
            }
        },
        "ProtonPackageLoggingLevels": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "logging_level": {
                    "enum": [
                        "ERROR",
                        "WARN",
                        "INFO",
                        "DEBUG",
                        "TRACE"
                    ],
                    "type": "string",
                    "description": "Logging levels per package",
                    "title": "Logging levels per package"
                },
                "package_name": {
                    "type": "string",
                    "description": "Package name",
                    "title": "Package name"
                }
            }
        },
        "IPSecVPNIKEProfileListResult": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNIKEProfile"
                            },
                            "type": "array",
                            "description": "IKE Profile list results",
                            "title": "IKE Profile list results"
                        }
                    }
                }
            ],
            "description": "List all the IKE profiles.",
            "title": "List IKE profiles"
        },
        "AppInfo": {
            "x-vmw-nsx-module": "AppDiscovery",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "AppDiscovery",
                    "type": "object",
                    "properties": {
                        "os_type": {
                            "enum": [
                                "INVALID",
                                "WINDOWS",
                                "LINUX"
                            ],
                            "type": "string",
                            "description": "OS type of VM the App belongs to",
                            "title": "OS type of VM the App belongs to"
                        },
                        "version": {
                            "type": "string",
                            "description": "Version of the app",
                            "title": "Version of the app"
                        },
                        "name": {
                            "type": "string",
                            "description": "Name of the app",
                            "title": "Name of the app"
                        },
                        "vm_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Ids of the VMs in which this app is installed",
                            "title": "Ids of the VMs in which this app is installed"
                        },
                        "manufacturer": {
                            "type": "string",
                            "description": "Manufacturer of the app",
                            "title": "Manufacturer of the app"
                        }
                    }
                }
            ],
            "description": "AppInfo details",
            "title": "AppInfo details"
        },
        "LbHttpRequestHeaderCondition": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbRuleCondition"
                },
                {
                    "required": [
                        "header_value",
                        "header_name"
                    ],
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "header_value": {
                            "type": "string",
                            "description": "Value of HTTP header",
                            "title": "Value of HTTP header"
                        },
                        "case_sensitive": {
                            "default": true,
                            "type": "boolean",
                            "description": "If true, case is significant when comparing HTTP header value.\n",
                            "title": "A case sensitive flag for HTTP header value comparing"
                        },
                        "match_type": {
                            "description": "Match type of HTTP header value",
                            "default": "REGEX",
                            "enum": [
                                "STARTS_WITH",
                                "ENDS_WITH",
                                "EQUALS",
                                "CONTAINS",
                                "REGEX"
                            ],
                            "type": "string"
                        },
                        "header_name": {
                            "type": "string",
                            "description": "Name of HTTP header",
                            "title": "Name of HTTP header"
                        }
                    }
                }
            ],
            "description": "This condition is used to match HTTP request messages by HTTP header\nfields. HTTP header fields are components of the header section of HTTP\nrequest and response messages. They define the operating parameters of an\nHTTP transaction. For example, Cookie, Authorization, User-Agent, etc. One\ncondition can be used to match one header field, to match multiple header\nfields, multiple conditions must be specified.\nThe match_type field defines how header_value field is used to match HTTP\nrequests. The header_name field does not support match types.\n",
            "title": "Condition to match HTTP request header"
        },
        "LbPoolMemberStatistics": {
            "x-vmw-nsx-module": "AggSvcLb",
            "required": [
                "statistics",
                "ip_address"
            ],
            "type": "object",
            "properties": {
                "statistics": {
                    "title": "Pool member statistics counter",
                    "description": "Pool member statistics counter",
                    "$ref": "#/definitions/LbStatisticsCounter"
                },
                "ip_address": {
                    "description": "Pool member IP address",
                    "format": "ip",
                    "type": "string"
                },
                "port": {
                    "description": "The port is configured in pool member. For virtual server port range\ncase, pool member port must be null.\n",
                    "format": "port-or-range",
                    "type": "string"
                }
            }
        },
        "NatRule": {
            "x-vmw-nsx-module": "Nat",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Nat",
                    "required": [
                        "action"
                    ],
                    "type": "object",
                    "properties": {
                        "match_destination_network": {
                            "type": "string",
                            "description": "IP Address | CIDR | (null implies Any)\n",
                            "title": "match destination network"
                        },
                        "translated_network": {
                            "type": "string",
                            "description": "IP Address | IP Range | CIDR",
                            "title": "IP Address | IP Range | CIDR"
                        },
                        "rule_priority": {
                            "default": 1024,
                            "format": "int64",
                            "type": "integer",
                            "description": "Ascending, valid range [0-2147483647]. If multiple rules have the same\npriority, evaluation sequence is undefined.\n",
                            "title": "NAT rule priority"
                        },
                        "match_service": {
                            "title": "match service on source port, destination port, protocol, icmp, etc",
                            "description": "A NSServiceElement that specifies the matching services of source\nports, destination ports, ip protocol version and number, sub protocol\nversion and number, ICMP type and code, etc.\nThe match_service can be one of IPProtocolNSService,L4PortSetNSService\nor ICMPTypeNSService. REFLEXIVE NAT does not support match_service.\n",
                            "$ref": "#/definitions/NSServiceElement"
                        },
                        "applied_tos": {
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "type": "array",
                            "description": "Holds the list of LogicalRouterPort Ids that a NAT rule can be applied to. The LogicalRouterPort used must belong to the same LogicalRouter for which the NAT Rule is created. As of now a NAT rule can only have a single LogicalRouterPort as applied_tos. When applied_tos is not set, the NAT rule is applied to all LogicalRouterPorts beloging to the LogicalRouter.",
                            "maxItems": 1,
                            "title": "List of LogicalRouterPort resources as applied to"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "enable/disable the rule",
                            "title": "enable/disable the rule"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "translated_ports": {
                            "type": "string",
                            "description": "port number or port range. DNAT only",
                            "title": "port number or port range. DNAT only"
                        },
                        "action": {
                            "description": "valid actions: SNAT, DNAT, NO_SNAT, NO_DNAT, REFLEXIVE. All rules\nin a logical router are either stateless or stateful. Mix is not\nsupported. SNAT and DNAT are stateful, can NOT be supported when\nthe logical router is running at active-active HA mode; REFLEXIVE\nis stateless. NO_SNAT and NO_DNAT have no translated_fields, only\nmatch fields are supported.\n",
                            "enum": [
                                "SNAT",
                                "DNAT",
                                "NO_NAT",
                                "REFLEXIVE",
                                "NO_SNAT",
                                "NO_DNAT"
                            ],
                            "type": "string"
                        },
                        "logging": {
                            "default": false,
                            "type": "boolean",
                            "description": "enable/disable the logging of rule",
                            "title": "enable/disable the logging of rule"
                        },
                        "nat_pass": {
                            "default": true,
                            "type": "boolean",
                            "description": "Default is true. If the nat_pass is set to true, the following firewall\nstage will be skipped. Please note, if action is NO_NAT, then nat_pass\nmust be set to true or omitted.\n",
                            "title": "enable/disable to bypass following firewall stage"
                        },
                        "match_source_network": {
                            "type": "string",
                            "description": "IP Address | CIDR | (null implies Any)\n",
                            "title": "match source network"
                        }
                    }
                }
            ]
        },
        "DhcpIpPool": {
            "x-vmw-nsx-module": "Dhcp",
            "allOf": [
                {
                    "$ref": "#/definitions/IpAllocationBase"
                },
                {
                    "x-vmw-nsx-module": "Dhcp",
                    "required": [
                        "allocation_ranges"
                    ],
                    "type": "object",
                    "properties": {
                        "allocation_ranges": {
                            "items": {
                                "$ref": "#/definitions/IpPoolRange"
                            },
                            "type": "array",
                            "description": "ip-ranges",
                            "title": "ip-ranges"
                        },
                        "warning_threshold": {
                            "description": "warning threshold, valid [50-80], default 80",
                            "title": "warning threshold, valid [50-80], default 80",
                            "default": 80,
                            "format": "int64",
                            "maximum": 80,
                            "minimum": 50,
                            "type": "integer"
                        },
                        "error_threshold": {
                            "description": "error threshold, valid [80-100], default 100",
                            "title": "error threshold, valid [80-100], default 100",
                            "default": 100,
                            "format": "int64",
                            "maximum": 100,
                            "minimum": 80,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "DhcpOption121": {
            "x-vmw-nsx-module": "Dhcp",
            "required": [
                "static_routes"
            ],
            "type": "object",
            "properties": {
                "static_routes": {
                    "description": "dhcp classless static routes",
                    "title": "dhcp classless static routes",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/ClasslessStaticRoute"
                    },
                    "maxItems": 27,
                    "type": "array"
                }
            }
        },
        "VtepLabelPoolListResult": {
            "x-vmw-nsx-module": "VtepLabel",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "VtepLabel",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/VtepLabelPool"
                            },
                            "type": "array",
                            "description": "Virtual tunnel endpoint label pool list results",
                            "title": "Virtual tunnel endpoint label pool list results"
                        }
                    }
                }
            ]
        },
        "Filter": {
            "x-vmw-nsx-module": "AggSvcL2Types",
            "required": [
                "name",
                "value"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the filter.",
                    "title": "The name of the filter."
                },
                "value": {
                    "type": "string",
                    "description": "The value of the filter.",
                    "title": "The value of the filter."
                }
            }
        },
        "SnmpCommunity": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "access": {
                    "default": "read_only",
                    "enum": [
                        "read_only"
                    ],
                    "type": "string",
                    "description": "Type of access",
                    "title": "Type of access"
                },
                "community_string": {
                    "type": "string",
                    "description": "Community string at most 64 characters long",
                    "title": "Community string at most 64 characters long"
                }
            }
        },
        "NodeNetworkInterfacePropertiesListResult": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NodeNetworkInterfaceProperties"
                            },
                            "type": "array",
                            "description": "Node network interface property results",
                            "title": "Node network interface property results"
                        }
                    }
                }
            ],
            "description": "Node network interface properties list results",
            "title": "Node network interface properties list results"
        },
        "VmNicInfo": {
            "description": "Contains a set of information of a VM on the network interfaces present on the partner appliance that needs to be configured by the NSX Manager.",
            "title": "Set of NIC information of a VM",
            "required": [
                "nic_infos"
            ],
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "type": "object",
            "properties": {
                "nic_infos": {
                    "items": {
                        "$ref": "#/definitions/NicInfo"
                    },
                    "readOnly": false,
                    "type": "array",
                    "description": "Set of information of a VM on the network interfaces present on the partner appliance that needs to be configured by the NSX Manager.",
                    "title": "Set of NIC information of a VM"
                }
            }
        },
        "SupportBundleRemoteFileServer": {
            "description": "Remote file server",
            "title": "Remote file server",
            "required": [
                "directory_path",
                "protocol",
                "server"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "manager_upload_only": {
                    "default": false,
                    "type": "boolean",
                    "description": "Uploads to the remote file server performed by the manager",
                    "title": "Uploads to the remote file server performed by the manager"
                },
                "directory_path": {
                    "type": "string",
                    "description": "Remote server directory to copy bundle files to",
                    "title": "Remote server directory to copy bundle files to"
                },
                "protocol": {
                    "title": "Protocol to use to copy file",
                    "description": "Protocol to use to copy file",
                    "$ref": "#/definitions/SupportBundleFileTransferProtocol"
                },
                "port": {
                    "description": "Server port",
                    "title": "Server port",
                    "default": 22,
                    "format": "int64",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                },
                "server": {
                    "type": "string",
                    "description": "Remote server hostname or IP address",
                    "title": "Remote server hostname or IP address"
                }
            }
        },
        "CsvRecord": {
            "x-vmw-nsx-module": "CsvTypes",
            "type": "object",
            "description": "Base type for CSV records."
        },
        "PrincipalIdentity": {
            "x-vmw-nsx-module": "CertificateManager",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "CertificateManager",
                    "required": [
                        "certificate_id",
                        "node_id",
                        "name"
                    ],
                    "type": "object",
                    "properties": {
                        "is_protected": {
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Indicator whether the entities created by this principal should be protected",
                            "title": "Protection indicator"
                        },
                        "role": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Role",
                            "title": "Role"
                        },
                        "name": {
                            "readOnly": false,
                            "maxLength": 255,
                            "type": "string",
                            "description": "Name of the principal",
                            "title": "Name"
                        },
                        "permission_group": {
                            "description": "Use the 'role' field instead and pass in 'auditor' for read_only_api_users or 'enterprise_admin' for the others.",
                            "enum": [
                                "read_only_api_users",
                                "read_write_api_users",
                                "superusers",
                                "undefined"
                            ],
                            "x-deprecated": true,
                            "readOnly": false,
                            "type": "string"
                        },
                        "certificate_id": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Id of the stored certificate",
                            "title": "Id of the stored certificate"
                        },
                        "node_id": {
                            "readOnly": false,
                            "maxLength": 255,
                            "type": "string",
                            "description": "Unique node-id of a principal",
                            "title": "Unique node-id"
                        }
                    }
                }
            ]
        },
        "AlarmSource": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "description": "Source of the Alarm",
            "properties": {
                "local_ip": {
                    "readOnly": true,
                    "type": "string",
                    "description": "VPN session/tunnel etc. local Ip(v4 or v6) address",
                    "title": "VPN session/tunnel etc. local Ip(v4 or v6) address"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier of the Alarm source entity for e.g. Vpn session id, Vpn tunnel id etc.",
                    "title": "Identifier of the Alarm source entity for e.g. Vpn session id, Vpn tunnel id etc."
                },
                "mount": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Filesystem mount name",
                    "title": "Filesystem mount name"
                },
                "ip_address": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Ip address",
                    "title": "Ip address"
                },
                "ip_address_type": {
                    "readOnly": true,
                    "enum": [
                        "IPV4",
                        "IPV6"
                    ],
                    "description": "Ip address type v4, v6 etc.",
                    "title": "Ip address type v4, v6 etc."
                },
                "peer_ip": {
                    "readOnly": true,
                    "type": "string",
                    "description": "VPN session/tunnel etc. peer Ip(v4 or v6) address",
                    "title": "VPN session/tunnel etc. peer Ip(v4 or v6) address"
                }
            },
            "title": "Source of the Alarm"
        },
        "PropertyItem": {
            "description": "Represents a label-value pair.",
            "title": "LabelValue Property",
            "required": [
                "field",
                "type"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "field": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Represents field value of the property.",
                    "title": "Field of the Property"
                },
                "render_configuration": {
                    "items": {
                        "$ref": "#/definitions/RenderConfiguration"
                    },
                    "type": "array",
                    "description": "Render configuration to be applied, if any.",
                    "title": "Render Configuration"
                },
                "type": {
                    "description": "Data type of the field.",
                    "title": "field data type",
                    "default": "String",
                    "enum": [
                        "String",
                        "Number",
                        "Date",
                        "Url"
                    ],
                    "maxLength": 255,
                    "type": "string"
                },
                "heading": {
                    "default": false,
                    "type": "boolean",
                    "description": "Set to true if the field is a heading. Default is false.",
                    "title": "If true, represents the field as a heading"
                },
                "condition": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "If the condition is met then the property will be displayed. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.",
                    "title": "Expression for evaluating condition"
                },
                "label": {
                    "title": "Label of the property",
                    "description": "If a field represents a heading, then label is not needed",
                    "$ref": "#/definitions/Label"
                }
            }
        },
        "LbSnatAutoMap": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbSnatTranslation"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object"
                }
            ]
        },
        "NSServiceListResult": {
            "x-vmw-nsx-module": "NSService",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "NSService",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NSService"
                            },
                            "type": "array",
                            "description": "Paged collection of NSServices",
                            "title": "Paged collection of NSServices"
                        }
                    }
                }
            ],
            "description": "List result of NSservices",
            "title": "List result of NSservices"
        },
        "SavedSearchRequest": {
            "x-vmw-nsx-module": "Search",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "query",
                        "is_saved"
                    ],
                    "x-vmw-nsx-module": "Search",
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query that has to be saved.",
                            "title": "search query"
                        },
                        "is_saved": {
                            "type": "boolean",
                            "description": "The flag indicates whether the query is recent or saved search.",
                            "title": "Flag"
                        }
                    }
                }
            ],
            "description": "The request will contain the query to be saved and the flag indicating whether it is recent or\nsaved search.\n",
            "title": "Save a search request"
        },
        "PBRSectionQueryParameters": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/DSSectionQueryParameters"
                },
                {
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object"
                }
            ],
            "description": "Section query parameters",
            "title": "Section query parameters"
        },
        "Attribute": {
            "x-vmw-nsx-module": "ServiceInsertionCommonTypes",
            "type": "object",
            "description": "Attribute specific to a partner. There attributes are passed on to the partner appliance and is opaque to the NSX Manager. The Attributes used by the partner applicance.",
            "properties": {
                "attribute_type": {
                    "readOnly": false,
                    "enum": [
                        "IP_ADDRESS",
                        "PORT",
                        "PASSWORD",
                        "STRING",
                        "LONG"
                    ],
                    "type": "string",
                    "description": "Attribute Type can be of any of the allowed enum type.",
                    "title": "Attributetype."
                },
                "display_name": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Attribute display name string value.",
                    "title": "Display name"
                },
                "value": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Attribute value string value.",
                    "title": "value"
                },
                "key": {
                    "readOnly": false,
                    "type": "string",
                    "description": "Attribute key string value.",
                    "title": "key"
                }
            },
            "title": "Attributes"
        },
        "IPSecVPNPolicyRule": {
            "x-vmw-nsx-module": "IPSecVPN",
            "allOf": [
                {
                    "$ref": "#/definitions/EmbeddedResource"
                },
                {
                    "x-vmw-nsx-module": "IPSecVPN",
                    "type": "object",
                    "properties": {
                        "sources": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNPolicySubnet"
                            },
                            "type": "array",
                            "description": "List of local subnets.",
                            "maxItems": 128,
                            "title": "Source list"
                        },
                        "action": {
                            "description": "PROTECT - Protect rules are defined per policy based\nIPSec VPN session.\nBYPASS - Bypass rules are defined per IPSec VPN\nservice and affects all policy based IPSec VPN sessions.\nBypass rules are prioritized over protect rules.\n",
                            "title": "Action to be applied",
                            "default": "PROTECT",
                            "enum": [
                                "PROTECT",
                                "BYPASS"
                            ],
                            "readOnly": true,
                            "type": "string"
                        },
                        "enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "A flag to enable/disable the policy rule.",
                            "title": "Enabled flag"
                        },
                        "logged": {
                            "default": false,
                            "type": "boolean",
                            "description": "A flag to enable/disable the logging for the policy rule.",
                            "title": "Logging flag"
                        },
                        "id": {
                            "type": "string",
                            "description": "Unique policy id.",
                            "title": "Unique policy id"
                        },
                        "destinations": {
                            "items": {
                                "$ref": "#/definitions/IPSecVPNPolicySubnet"
                            },
                            "type": "array",
                            "description": "List of peer subnets.",
                            "maxItems": 128,
                            "title": "Destination list"
                        }
                    }
                }
            ],
            "description": "For policy-based IPsec VPNs, a security policy specifies as its action the VPN tunnel to be used for transit traffic that meets the policy's match criteria.",
            "title": "IPSec VPN policy rules"
        },
        "UpgradeSummary": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "properties": {
                "upgrade_coordinator_updated": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Has upgrade coordinator been updated after upload of upgrade bundle file",
                    "title": "Has upgrade coordinator been updated after upload of upgrade bundle file"
                },
                "target_version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Target system version",
                    "title": "Target system version"
                },
                "upgrade_coordinator_version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Current version of upgrade coordinator",
                    "title": "Current version of upgrade coordinator"
                },
                "upgrade_status": {
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "IN_PROGRESS",
                        "NOT_STARTED",
                        "PAUSED"
                    ],
                    "type": "string",
                    "description": "Status of upgrade",
                    "title": "Status of upgrade"
                },
                "component_target_versions": {
                    "items": {
                        "$ref": "#/definitions/ComponentTargetVersion"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "system_version": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Current system version",
                    "title": "Current system version"
                },
                "upgrade_bundle_file_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Name of the last successfully uploaded upgrade bundle file",
                    "title": "Name of the last successfully uploaded upgrade bundle file"
                }
            }
        },
        "MirrorSource": {
            "discriminator": "resource_type",
            "x-vmw-nsx-module": "PortMirroring",
            "required": [
                "resource_type"
            ],
            "type": "object",
            "properties": {
                "resource_type": {
                    "description": "Resource types of mirror source",
                    "enum": [
                        "LogicalPortMirrorSource",
                        "PnicMirrorSource",
                        "VlanMirrorSource",
                        "LogicalSwitchMirrorSource"
                    ],
                    "type": "string"
                }
            }
        },
        "DirectoryDomainListResults": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DirectoryDomain"
                            },
                            "type": "array",
                            "description": "List of Directory Domains",
                            "maxItems": 500,
                            "title": "List of Directory Domains"
                        }
                    }
                }
            ],
            "description": "List of Directory Domain",
            "title": "List of Directory Domain"
        },
        "GlobalCollectionConfiguration": {
            "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "AggSvcDataCollectionConfig",
                    "required": [
                        "is_data_collection_enabled",
                        "aggregated_data_collection_frequency"
                    ],
                    "type": "object",
                    "properties": {
                        "modified_feature_stack_collection_configurations": {
                            "readOnly": true,
                            "title": "Modified feature stack collection configurations",
                            "description": "The list of the locally modified feature stack data collection frequency settings.  If all feature stack data collection configurations are set to their default values, this list will be empty.",
                            "$ref": "#/definitions/FeatureStackCollectionConfigurationList"
                        },
                        "is_data_collection_enabled": {
                            "type": "boolean",
                            "description": "Indicates whether data collection required by the aggregation service is enabled.  If false, no aggregation service data will be collected.  Changing this property will not affect the existing data collection frequency settings.",
                            "title": "Is data collection enabled"
                        },
                        "aggregated_data_collection_frequency": {
                            "description": "The frequency in seconds at which data, which is subject to the aggregation function, is collected.",
                            "format": "int64",
                            "title": "Aggregated Data Collection Frequency In Seconds",
                            "maximum": 86400,
                            "minimum": 60,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "LogicalSwitchStateListResult": {
            "x-vmw-nsx-module": "LogicalSwitch",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "LogicalSwitch",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalSwitchState"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Logical Switch State Results",
                            "title": "Logical Switch State Results"
                        }
                    }
                }
            ],
            "description": "Logical Switch state queries result",
            "title": "Logical Switch state queries result"
        },
        "LogicalPortAttachment": {
            "description": "Logical port attachment",
            "title": "Logical port attachment",
            "required": [
                "id"
            ],
            "x-vmw-nsx-module": "LogicalPort",
            "type": "object",
            "properties": {
                "attachment_type": {
                    "description": "Indicates the type of logical port attachment. By default it is Virtual Machine interface (VIF)",
                    "default": "VIF",
                    "enum": [
                        "VIF",
                        "LOGICALROUTER",
                        "BRIDGEENDPOINT",
                        "DHCP_SERVICE",
                        "METADATA_PROXY",
                        "L2VPN_SESSION"
                    ],
                    "type": "string"
                },
                "context": {
                    "title": "Attachment context",
                    "description": "Extra context data for the attachment",
                    "$ref": "#/definitions/AttachmentContext"
                },
                "id": {
                    "type": "string",
                    "description": "Identifier of the interface attached to the logical port",
                    "title": "Identifier of the interface attached to the logical port"
                }
            }
        },
        "BatchRequestItem": {
            "description": "A single request within a batch of operations",
            "title": "A single request within a batch of operations",
            "required": [
                "uri",
                "method"
            ],
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "properties": {
                "body": {
                    "type": "object"
                },
                "uri": {
                    "type": "string",
                    "description": "relative uri (path and args), of the call including resource id (if this is a POST/DELETE), exclude hostname and port and prefix, exploded form of parameters",
                    "title": "Internal uri of the call"
                },
                "method": {
                    "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE",
                        "PATCH"
                    ],
                    "type": "string",
                    "description": "http method type",
                    "title": "method type(POST/PUT/DELETE/UPDATE)"
                }
            }
        },
        "FooterAction": {
            "description": "Action specified at the footer of a widget to provide additional information or to provide a clickable url for navigation. An example usage of footer action is provided under the 'example_request' section of 'CreateWidgetConfiguration' API.",
            "title": "Widget Footer Action",
            "required": [
                "label"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "url": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Hyperlink to the UI page that provides details of action.",
                    "title": "Clickable hyperlink, if any"
                },
                "dock_to_container_footer": {
                    "default": true,
                    "type": "boolean",
                    "description": "If true, the footer will appear in the underlying container that holds the widget.",
                    "title": "Dock the footer at container"
                },
                "label": {
                    "title": "Label for action",
                    "description": "Label to be displayed against the footer action.",
                    "$ref": "#/definitions/Label"
                }
            }
        },
        "IpBlockSubnet": {
            "x-vmw-nsx-module": "Ipam",
            "description": "A set of IPv4 addresses defined by a start address and a mask/prefix which will typically be associated with a layer-2 broadcast domain.",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Ipam",
                    "required": [
                        "block_id",
                        "size"
                    ],
                    "type": "object",
                    "properties": {
                        "cidr": {
                            "readOnly": true,
                            "format": "ipv4-cidr-block",
                            "type": "string",
                            "description": "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain",
                            "title": "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain"
                        },
                        "allocation_ranges": {
                            "items": {
                                "$ref": "#/definitions/IpPoolRange"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "A collection of IPv4 IP ranges used for IP allocation.",
                            "title": "A collection of IPv4 IP ranges used for IP allocation."
                        },
                        "block_id": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Block id for which the subnet is created.",
                            "title": "Block id for which the subnet is created."
                        },
                        "size": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Represents the size or number of ip addresses in the subnet",
                            "title": "Represents the size or number of ip addresses in the subnet"
                        }
                    }
                }
            ]
        },
        "PnicMirrorSource": {
            "x-vmw-nsx-module": "PortMirroring",
            "allOf": [
                {
                    "$ref": "#/definitions/MirrorSource"
                },
                {
                    "x-vmw-nsx-module": "PortMirroring",
                    "required": [
                        "node_id",
                        "encapsulated",
                        "source_pnics"
                    ],
                    "type": "object",
                    "properties": {
                        "node_id": {
                            "type": "string",
                            "description": "Transport node identifier for the pnic located.",
                            "title": "Transport node identifier for the pnic located."
                        },
                        "encapsulated": {
                            "default": false,
                            "type": "boolean",
                            "description": "Whether to filter encapsulated packet.",
                            "title": "Whether to filter encapsulated packet."
                        },
                        "source_pnics": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Source physical NIC device names",
                            "title": "Source physical NIC device names"
                        }
                    }
                }
            ]
        },
        "RouteMap": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "required": [
                        "sequences"
                    ],
                    "type": "object",
                    "properties": {
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "sequences": {
                            "description": "Ordered list of routeMap sequences",
                            "title": "Ordered list of routeMap sequences",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/RouteMapSequence"
                            },
                            "maxItems": 1000,
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "TransportZoneProfileListResult": {
            "x-vmw-nsx-module": "TransportZoneProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "TransportZoneProfile",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/TransportZoneProfile"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Transport zone profile results",
                            "title": "Transport zone profile results"
                        }
                    }
                }
            ],
            "description": "Transport zone profile queries result",
            "title": "Transport zone profile queries result"
        },
        "SoftwareModuleResult": {
            "description": "Software module result",
            "title": "Software module result",
            "required": [
                "software_modules"
            ],
            "x-vmw-nsx-module": "FabricNode",
            "type": "object",
            "properties": {
                "software_modules": {
                    "items": {
                        "$ref": "#/definitions/SoftwareModule"
                    },
                    "type": "array",
                    "description": "Software module results",
                    "title": "Software module results"
                }
            }
        },
        "ErrorResolverInfo": {
            "x-vmw-nsx-module": "ErrorResolver",
            "required": [
                "error_id",
                "resolver_present"
            ],
            "type": "object",
            "description": "Metadata related to a given error_id",
            "properties": {
                "error_id": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The error id for which metadata information is needed",
                    "title": "The error id for which metadata information is needed"
                },
                "resolver_present": {
                    "type": "boolean",
                    "description": "Indicates whether there is a resolver associated with the error or not",
                    "title": "Indicates whether there is a resolver associated with the error or not"
                },
                "user_metadata": {
                    "title": "User supplied metadata that might be required by the resolver",
                    "description": "User supplied metadata that might be required by the resolver",
                    "$ref": "#/definitions/ErrorResolverUserMetadata"
                }
            }
        },
        "BgpNeighborStatus": {
            "x-vmw-nsx-module": "AggSvcLogicalRouter",
            "type": "object",
            "properties": {
                "transport_node": {
                    "readOnly": true,
                    "title": "Transport node id and name",
                    "description": "Transport node id and name",
                    "$ref": "#/definitions/ResourceReference"
                },
                "connection_state": {
                    "readOnly": true,
                    "enum": [
                        "INVALID",
                        "IDLE",
                        "CONNECT",
                        "ACTIVE",
                        "OPEN_SENT",
                        "OPEN_CONFIRM",
                        "ESTABLISHED"
                    ],
                    "type": "string",
                    "description": "Current state of the BGP session.",
                    "title": "Current state of the BGP session."
                },
                "neighbor_address": {
                    "description": "The IP of the BGP neighbor",
                    "format": "ip",
                    "readOnly": true,
                    "type": "string"
                },
                "messages_sent": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Count of messages sent to the neighbor",
                    "title": "Count of messages sent to the neighbor"
                },
                "connection_drop_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Count of connection drop",
                    "title": "Count of connection drop"
                },
                "remote_port": {
                    "description": "TCP port number of remote BGP Connection",
                    "title": "TCP port number of remote BGP Connection",
                    "format": "int64",
                    "maximum": 65535,
                    "readOnly": true,
                    "minimum": 1,
                    "type": "integer"
                },
                "source_address": {
                    "description": "The Ip address of logical port",
                    "format": "ip",
                    "readOnly": true,
                    "type": "string"
                },
                "total_in_prefix_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Count of in prefixes",
                    "title": "Count of in prefixes"
                },
                "messages_received": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Count of messages received from the neighbor",
                    "title": "Count of messages received from the neighbor"
                },
                "neighbor_router_id": {
                    "description": "Router ID of the BGP neighbor.",
                    "format": "ip",
                    "readOnly": true,
                    "additionalProperties": false,
                    "type": "string"
                },
                "total_out_prefix_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Count of out prefixes",
                    "title": "Count of out prefixes"
                },
                "lr_component_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Logical router component(Service Router/Distributed Router) id",
                    "title": "Logical router component(Service Router/Distributed Router) id"
                },
                "graceful_restart": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Indicate current state of graceful restart where graceful_restart = true indicate graceful restart is enabled and graceful_restart = false indicate graceful restart is disabled.",
                    "title": "Indicate current state of graceful restart where graceful_restart = true indicate graceful restart is enabled and graceful_restart = false indicate graceful restart is disabled."
                },
                "remote_as_number": {
                    "readOnly": true,
                    "type": "string",
                    "description": "AS number of the BGP neighbor",
                    "title": "AS number of the BGP neighbor"
                },
                "announced_capabilities": {
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "BGP capabilities sent to BGP neighbor.",
                    "title": "BGP capabilities sent to BGP neighbor."
                },
                "local_port": {
                    "description": "TCP port number of Local BGP connection",
                    "title": "TCP port number of Local BGP connection",
                    "format": "int64",
                    "maximum": 65535,
                    "readOnly": true,
                    "minimum": 1,
                    "type": "integer"
                },
                "keep_alive_interval": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Time in ms to wait for HELLO packet from BGP peer",
                    "title": "Time in ms to wait for HELLO packet from BGP peer"
                },
                "time_since_established": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Time(in milliseconds) since connection was established.",
                    "title": "Time(in milliseconds) since connection was established."
                },
                "hold_time": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Time in ms to wait for HELLO from BGP peer. If a HELLO packet is not seen from BGP Peer withing hold_time then BGP neighbor will be marked as down.",
                    "title": "Time in ms to wait for HELLO from BGP peer. If a HELLO packet is not seen from BGP Peer withing hold_time then BGP neighbor will be marked as down."
                },
                "negotiated_capability": {
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "type": "array",
                    "description": "BGP capabilities negotiated with BGP neighbor.",
                    "title": "BGP capabilities negotiated with BGP neighbor."
                },
                "established_connection_count": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Count of connections established",
                    "title": "Count of connections established"
                }
            }
        },
        "FeatureUsageListInCsvFormat": {
            "x-vmw-nsx-module": "License",
            "allOf": [
                {
                    "$ref": "#/definitions/CsvListResult"
                },
                {
                    "x-vmw-nsx-module": "License",
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has\nnever updated the data.\n",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/FeatureUsageCsvRecord"
                            },
                            "type": "array"
                        }
                    }
                }
            ]
        },
        "NSServiceGroup": {
            "x-vmw-nsx-module": "NSServiceGroup",
            "description": "A Networking and Security Service Group that represents a group of NSServices\n",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "NSServiceGroup",
                    "required": [
                        "members"
                    ],
                    "type": "object",
                    "properties": {
                        "default_service": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "The default NSServiceGroups are created in the system by default. These\nNSServiceGroups can't be modified/deleted\n",
                            "title": "NSServiceGroups created in the system by default"
                        },
                        "service_type": {
                            "readOnly": true,
                            "enum": [
                                "ETHER",
                                "NON_ETHER"
                            ],
                            "type": "string",
                            "description": "Type of the NSServiceGroup",
                            "title": "Type of the NSServiceGroup"
                        },
                        "members": {
                            "items": {
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "type": "array",
                            "description": "List of NSService or NSServiceGroup resources that can be added as members\nto an NSServiceGroup.\n",
                            "maxItems": 50
                        }
                    }
                }
            ]
        },
        "EdgeNode": {
            "x-vmw-nsx-module": "FabricNode",
            "allOf": [
                {
                    "$ref": "#/definitions/Node"
                },
                {
                    "x-vmw-nsx-module": "FabricNode",
                    "type": "object",
                    "properties": {
                        "deployment_config": {
                            "title": "Config for automatic deployment of edge node virtual machine.",
                            "description": "When this configuration is specified, edge fabric node of deployment_type VIRTUAL_MACHINE\nwill be deployed and registered with MP.\n",
                            "$ref": "#/definitions/EdgeNodeDeploymentConfig"
                        },
                        "allocation_list": {
                            "items": {
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of logical router ids to which this edge node is allocated.",
                            "title": "Allocation list"
                        },
                        "deployment_type": {
                            "description": "Supported edge deployment type.",
                            "enum": [
                                "VIRTUAL_MACHINE",
                                "PHYSICAL_MACHINE",
                                "UNKNOWN"
                            ],
                            "readOnly": true,
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "NeighborProperties": {
            "x-vmw-nsx-module": "Lldp",
            "type": "object",
            "description": "Neighbor properties",
            "properties": {
                "system_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "System name",
                    "title": "System name"
                },
                "system_desc": {
                    "readOnly": true,
                    "type": "string",
                    "description": "System description",
                    "title": "System description"
                },
                "system_port_number": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "System port number",
                    "title": "System port number"
                },
                "name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Interface name",
                    "title": "Interface name"
                },
                "oid": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Object identifier",
                    "title": "Object identifier"
                },
                "mgmt_addr": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Management address",
                    "title": "Management address"
                },
                "capabilities": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Capabilities",
                    "title": "Capabilities"
                },
                "link_aggregation_status": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "True if currently in aggregation",
                    "title": "Aggregation Status"
                },
                "ifindex": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Interface index",
                    "title": "Interface index"
                },
                "mac": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Interface MAC address",
                    "title": "Interface MAC address"
                },
                "link_aggregation_capable": {
                    "readOnly": true,
                    "type": "boolean",
                    "description": "Aggregation Capability",
                    "title": "Aggregation Capability"
                },
                "port_desc": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Port description",
                    "title": "Port description"
                },
                "enabled_capabilities": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Enabled capabilities",
                    "title": "Enabled capabilities"
                },
                "link_aggregation_port_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Aggregation port id",
                    "title": "Aggregation port id"
                }
            },
            "title": "Neighbor properties"
        },
        "DhcpOptions": {
            "x-vmw-nsx-module": "Dhcp",
            "type": "object",
            "properties": {
                "option121": {
                    "title": "option 121",
                    "description": "option 121",
                    "$ref": "#/definitions/DhcpOption121"
                },
                "others": {
                    "minItems": 0,
                    "items": {
                        "$ref": "#/definitions/GenericDhcpOption"
                    },
                    "type": "array",
                    "maxItems": 255
                }
            }
        },
        "IpfixSwitchConfig": {
            "x-vmw-nsx-module": "Ipfix",
            "allOf": [
                {
                    "$ref": "#/definitions/IpfixConfig"
                },
                {
                    "x-vmw-nsx-module": "Ipfix",
                    "type": "object",
                    "properties": {
                        "active_timeout": {
                            "description": "The time in seconds after a Flow is expired even if more packets\nmatching this Flow are received by the cache.\n",
                            "title": "Active timeout",
                            "default": 300,
                            "format": "int32",
                            "maximum": 3600,
                            "minimum": 60,
                            "type": "integer"
                        },
                        "idle_timeout": {
                            "description": "The time in seconds after a Flow is expired if no more packets matching\nthis Flow are received by the cache.\n",
                            "title": "Idle timeout",
                            "default": 300,
                            "format": "int32",
                            "maximum": 3600,
                            "minimum": 60,
                            "type": "integer"
                        },
                        "packet_sample_probability": {
                            "description": "The probability in percentage that a packet is sampled, in range\n0-100. The probability is equal for every packet.\n",
                            "title": "Packet sample probability",
                            "default": 0.1,
                            "exclusiveMinimum": true,
                            "maximum": 100,
                            "minimum": 0,
                            "type": "number"
                        },
                        "max_flows": {
                            "description": "The maximum number of flow entries in each exporter flow cache.\n",
                            "title": "Max flows",
                            "default": 16384,
                            "format": "int64",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "This is deprecated. Please use IpfixSwitchUpmProfile instead which can\nspecify its own collectors and observation ID.\n",
            "title": "IPFIX Config for the Switching Module"
        },
        "LbIcmpMonitor": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbActiveMonitor"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "data_length": {
                            "description": "The data size(in byte) of the ICMP healthcheck packet",
                            "title": "The data size(in byte) of the ICMP healthcheck packet",
                            "default": 56,
                            "format": "int64",
                            "maximum": 65507,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "DestinationFilteringConfiguration": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "provider_url",
                        "customer_id"
                    ],
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "provider_url": {
                            "readOnly": false,
                            "type": "string",
                            "description": "URL of the provider which provides the reputation and category databases.",
                            "title": "Provider URL"
                        },
                        "customer_id": {
                            "readOnly": false,
                            "type": "string",
                            "description": "The unique ID assigned to a customer.",
                            "title": "Customer ID"
                        },
                        "enabled": {
                            "default": true,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Flag to enable or disable the feature.",
                            "title": "Enable feature"
                        }
                    }
                }
            ],
            "description": "It is used to configure the reputation and category provider. It can also be used to enable or disable the destination filtering feature by setting the enable property.",
            "title": "Destination filtering configuration"
        },
        "NodeNetworkInterfaceProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "required": [
                        "ip_configuration"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "physical_address": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Interface MAC address",
                            "title": "Interface MAC address"
                        },
                        "broadcast_address": {
                            "type": "string",
                            "description": "Interface broadcast address",
                            "title": "Interface broadcast address"
                        },
                        "link_status": {
                            "readOnly": true,
                            "enum": [
                                "up",
                                "down"
                            ],
                            "type": "string",
                            "description": "Interface administration status",
                            "title": "Interface administration status"
                        },
                        "default_gateway": {
                            "type": "string",
                            "description": "Interface's default gateway",
                            "title": "Interface's default gateway"
                        },
                        "bond_primary": {
                            "type": "string",
                            "description": "Bond's primary device name in active-backup bond mode",
                            "title": "Bond's primary device name in active-backup bond mode"
                        },
                        "bond_slaves": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Bond's slave devices",
                            "title": "Bond's slave devices"
                        },
                        "ip_addresses": {
                            "items": {
                                "$ref": "#/definitions/IPv4AddressProperties"
                            },
                            "type": "array",
                            "description": "Interface IP addresses",
                            "maxItems": 1,
                            "title": "Interface IP addresses"
                        },
                        "admin_status": {
                            "readOnly": true,
                            "enum": [
                                "up",
                                "down"
                            ],
                            "type": "string",
                            "description": "Interface administration status",
                            "title": "Interface administration status"
                        },
                        "interface_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Interface ID",
                            "title": "Interface ID"
                        },
                        "bond_mode": {
                            "enum": [
                                "ACTIVE_BACKUP",
                                "802_3AD"
                            ],
                            "type": "string",
                            "description": "Bond mode",
                            "title": "Bond mode"
                        },
                        "plane": {
                            "enum": [
                                "mgmt",
                                "debug"
                            ],
                            "type": "string",
                            "description": "Interface plane",
                            "title": "Interface plane"
                        },
                        "ip_configuration": {
                            "enum": [
                                "dhcp",
                                "static",
                                "not configured"
                            ],
                            "type": "string",
                            "description": "Interface configuration",
                            "title": "Interface configuration"
                        },
                        "mtu": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Interface MTU",
                            "title": "Interface MTU"
                        }
                    }
                }
            ],
            "description": "Node network interface properties",
            "title": "Node network interface properties"
        },
        "L2VpnTunnelPeerCode": {
            "description": "L2Vpn tunnel peer code",
            "title": "L2Vpn tunnel peer code",
            "required": [
                "transport_tunnel",
                "peer_code"
            ],
            "x-vmw-nsx-module": "L2VPN",
            "type": "object",
            "properties": {
                "transport_tunnel": {
                    "title": "Transport tunnel",
                    "description": "Transport tunnel",
                    "$ref": "#/definitions/ResourceReference"
                },
                "peer_code": {
                    "type": "string",
                    "description": "Copy this code to paste on the remote end of the tunnel. This is a base64 encoded string which has all the configuration for tunnel. E.g tap device local/peer ips and protocol, encryption algorithm, etc. The peer code also contains a pre-shared key; be careful when sharing or storing it.",
                    "title": "Peer code for the tunnel"
                }
            }
        },
        "MigrationUnitAggregateInfo": {
            "x-vmw-nsx-module": "Migration",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "x-vmw-nsx-module": "Migration",
                    "type": "object",
                    "properties": {
                        "status": {
                            "readOnly": true,
                            "enum": [
                                "SUCCESS",
                                "FAILED",
                                "IN_PROGRESS",
                                "NOT_STARTED",
                                "PAUSED"
                            ],
                            "type": "string",
                            "description": "Status of migration unit",
                            "title": "Status of migration unit"
                        },
                        "percent_complete": {
                            "readOnly": true,
                            "type": "number",
                            "description": "Indicator of migration progress in percentage",
                            "title": "Indicator of migration progress in percentage"
                        },
                        "errors": {
                            "items": {
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of errors occurred during migration of this migration unit",
                            "title": "List of errors occurred during migration of this migration unit"
                        },
                        "unit": {
                            "readOnly": true,
                            "title": "Migration unit info",
                            "description": "Details of the migration unit",
                            "$ref": "#/definitions/MigrationUnit"
                        }
                    }
                }
            ]
        },
        "PnicMirrorDestination": {
            "x-vmw-nsx-module": "PortMirroring",
            "allOf": [
                {
                    "$ref": "#/definitions/MirrorDestination"
                },
                {
                    "x-vmw-nsx-module": "PortMirroring",
                    "required": [
                        "dest_pnics",
                        "node_id"
                    ],
                    "type": "object",
                    "properties": {
                        "dest_pnics": {
                            "description": "Physical NIC device names to which to send the mirrored packets",
                            "title": "Physical NIC device names to which to send the mirrored packets",
                            "minItems": 1,
                            "items": {
                                "type": "string"
                            },
                            "maxItems": 3,
                            "type": "array"
                        },
                        "node_id": {
                            "type": "string",
                            "description": "Transport node to which to send the mirrored packets",
                            "title": "Transport node to which to send the mirrored packets"
                        }
                    }
                }
            ]
        },
        "NodeSnmpServiceProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/NodeServiceProperties"
                },
                {
                    "required": [
                        "service_properties"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "service_properties": {
                            "title": "SNMP Service properties",
                            "description": "SNMP Service properties",
                            "$ref": "#/definitions/SnmpServiceProperties"
                        }
                    }
                }
            ],
            "description": "Node SNMP service properties",
            "title": "Node SNMP service properties"
        },
        "RealizationStateBarrierConfig": {
            "x-vmw-nsx-module": "RealizationStateBarrier",
            "description": "The configuration data for setting the global realization state barrier\n",
            "allOf": [
                {
                    "$ref": "#/definitions/RevisionedResource"
                },
                {
                    "x-vmw-nsx-module": "RealizationStateBarrier",
                    "required": [
                        "interval"
                    ],
                    "type": "object",
                    "properties": {
                        "interval": {
                            "description": "The interval in milliseconds used for auto incrementing the barrier number\n",
                            "format": "int64",
                            "title": "Interval in milliseconds",
                            "readOnly": false,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "AllocationIpAddressListResult": {
            "x-vmw-nsx-module": "Ipam",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Ipam",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/AllocationIpAddress"
                            },
                            "type": "array",
                            "description": "Pool allocation list results",
                            "title": "Pool allocation list results"
                        }
                    }
                }
            ]
        },
        "BridgeEndpoint": {
            "x-vmw-nsx-module": "BridgeEndpoint",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "vlan"
                    ],
                    "x-vmw-nsx-module": "BridgeEndpoint",
                    "type": "object",
                    "properties": {
                        "ha_enable": {
                            "default": true,
                            "type": "boolean",
                            "description": "This field will not be used if an edge cluster is being used for the\nbridge endpoint\n",
                            "title": "Controls the enabling of HA on the VLAN for this endpoint"
                        },
                        "bridge_cluster_id": {
                            "maxLength": 36,
                            "type": "string",
                            "description": "This field will not be used if an edge cluster is being used for the\nbridge endpoint\n",
                            "title": "UUID of the bridge cluster for this bridge endpoint"
                        },
                        "vlan": {
                            "type": "integer",
                            "description": "Virtual Local Area Network Identifier",
                            "format": "int64"
                        },
                        "vlan_transport_zone_id": {
                            "type": "string",
                            "description": "This field will not be used if a bridge cluster is being used for the\nbridge endpoint\n",
                            "title": "VLAN transport zone id by the edge cluster"
                        },
                        "bridge_endpoint_profile_id": {
                            "type": "string",
                            "description": "This field will not be used if a bridge cluster is being used for the\nbridge endpoint\n",
                            "title": "Bridge endpoint profile used by the edge cluster"
                        }
                    }
                }
            ],
            "description": "A bridge endpoint can be created on a bridge cluster or on an edge\ncluster. Few of the properties of this class will not be used depending on\nthe type of bridge endpoint being created. When creating a bridge endpoint\non a bridge cluster, following propeties will be used: vlan,\nbridge_cluster_id and ha_enable. Similarly, for creating a bridge endpoint\non an edge cluster following properties will be used: vlan,\nbridge_endpoint_profile_id and vlan_transport_zone_id.\n",
            "title": "Bridge Endpoint"
        },
        "FileProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                },
                {
                    "required": [
                        "created_epoch_ms",
                        "modified_epoch_ms",
                        "name",
                        "size"
                    ],
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "created_epoch_ms": {
                            "format": "int64",
                            "type": "integer",
                            "description": "File creation time in epoch milliseconds",
                            "title": "File creation time in epoch milliseconds"
                        },
                        "modified_epoch_ms": {
                            "format": "int64",
                            "type": "integer",
                            "description": "File modification time in epoch milliseconds",
                            "title": "File modification time in epoch milliseconds"
                        },
                        "name": {
                            "type": "string",
                            "description": "File name",
                            "title": "File name"
                        },
                        "size": {
                            "format": "int64",
                            "type": "integer",
                            "description": "Size of the file in bytes",
                            "title": "Size of the file in bytes"
                        }
                    }
                }
            ],
            "description": "File properties",
            "title": "File properties"
        },
        "LbClientSslProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbSslProfile"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "session_cache_enabled": {
                            "default": true,
                            "type": "boolean",
                            "description": "SSL session caching allows SSL client and server to reuse previously\nnegotiated security parameters avoiding the expensive public key\noperation during handshake.\n",
                            "title": "session cache enable/disable flag"
                        },
                        "session_cache_timeout": {
                            "description": "Session cache timeout specifies how long the SSL session parameters\nare held on to and can be reused.\n",
                            "title": "SSL session cache timeout value",
                            "default": 300,
                            "format": "int64",
                            "maximum": 86400,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "cipher_group_label": {
                            "description": "It is a label of cipher group which is mostly consumed by GUI.\n",
                            "enum": [
                                "BALANCED",
                                "HIGH_SECURITY",
                                "HIGH_COMPATIBILITY",
                                "CUSTOM"
                            ],
                            "type": "string"
                        },
                        "is_fips": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "This flag is set to true when all the ciphers and protocols are FIPS\ncompliant. It is set to false when one of the ciphers or protocols are\nnot FIPS compliant..\n",
                            "title": "FIPS compliance of ciphers and protocols"
                        },
                        "is_secure": {
                            "readOnly": true,
                            "type": "boolean",
                            "description": "This flag is set to true when all the ciphers and protocols are secure.\nIt is set to false when one of the ciphers or protocols is insecure.\n",
                            "title": "Secure/Insecure SSL profile flag"
                        },
                        "prefer_server_ciphers": {
                            "default": true,
                            "type": "boolean",
                            "description": "During SSL handshake as part of the SSL client Hello client sends an\nordered list of ciphers that it can support (or prefers) and typically\nserver selects the first one from the top of that list it can also\nsupport. For Perfect Forward Secrecy(PFS), server could override the\nclient's preference.\n",
                            "title": "prefer server ciphers flag"
                        },
                        "ciphers": {
                            "items": {
                                "description": "SSL cipher",
                                "enum": [
                                    "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
                                    "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_RSA_WITH_AES_256_CBC_SHA",
                                    "TLS_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
                                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_RSA_WITH_AES_256_CBC_SHA256",
                                    "TLS_RSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
                                    "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
                                    "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
                                    "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
                                    "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
                                    "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "supported SSL cipher list to client side",
                            "title": "supported SSL cipher list to client side"
                        },
                        "protocols": {
                            "items": {
                                "description": "SSL protocol",
                                "enum": [
                                    "SSL_V2",
                                    "SSL_V3",
                                    "TLS_V1",
                                    "TLS_V1_1",
                                    "TLS_V1_2"
                                ],
                                "type": "string"
                            },
                            "type": "array",
                            "description": "SSL versions TLS1.1 and TLS1.2 are supported and enabled by default.\nSSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.\n",
                            "title": "supported SSL protocol list to client side"
                        }
                    }
                }
            ]
        },
        "NodeStatusListResult": {
            "description": "Node Status list result",
            "title": "Node Status list result",
            "required": [
                "results"
            ],
            "x-vmw-nsx-module": "FabricNode",
            "type": "object",
            "properties": {
                "results": {
                    "items": {
                        "$ref": "#/definitions/NodeStatus"
                    },
                    "type": "array",
                    "description": "Node Status list results",
                    "title": "Node Status list results"
                }
            }
        },
        "ClusterGroupServiceLeader": {
            "x-vmw-nsx-module": "Cluster",
            "type": "object",
            "description": "Each cluster node entity provides multiple services. When working in a group, each service can elect a cluster node entity to be the leader of the service. Leader election helps in coordination of the service. The leader holds a renewable lease on the leadership for a fixed period of time. The lease version is incremented every time the leadership lease is renewed. This type contains the attributes of a leader.",
            "properties": {
                "service_name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Name of the service",
                    "title": "Name of the service"
                },
                "lease_version": {
                    "readOnly": true,
                    "format": "int64",
                    "type": "integer",
                    "description": "Number of times the lease has been renewed",
                    "title": "Number of times the lease has been renewed"
                },
                "leader_uuid": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Member UUID of the leader",
                    "title": "Member UUID of the leader"
                }
            },
            "title": "Leader for a service of the group"
        },
        "DirectoryDomainSyncRemoteNodes": {
            "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "UpgradeCoordinatorServerApis",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Directory domain sync remote node candidate",
                            "title": "Domain synchronzation node list"
                        }
                    }
                }
            ],
            "description": "List of Directory Domain sync remote nodes",
            "title": "List of Directory Domain sync remote nodes"
        },
        "BGPCommunityList": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "required": [
                        "communities"
                    ],
                    "type": "object",
                    "properties": {
                        "communities": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Array of BGP communities",
                            "title": "BGP community list"
                        },
                        "logical_router_id": {
                            "readOnly": true,
                            "type": "string",
                            "description": "Logical router id",
                            "title": "Logical router id"
                        },
                        "community_type": {
                            "default": "NormalBGPCommunity",
                            "enum": [
                                "NormalBGPCommunity"
                            ],
                            "type": "string",
                            "description": "Specifies the BGP community type. Currently, only NormalBGPCommunity is\nsupported.\n",
                            "title": "BGP community type"
                        }
                    }
                }
            ]
        },
        "UpgradeBundleUploadStatus": {
            "x-vmw-nsx-module": "Upgrade",
            "type": "object",
            "description": "Upload status of upgrade bundle uploaded from url",
            "properties": {
                "url": {
                    "readOnly": true,
                    "type": "string",
                    "description": "URL for uploading upgrade bundle",
                    "title": "URL from which the bundle was uploaded"
                },
                "status": {
                    "readOnly": true,
                    "enum": [
                        "UPLOADING",
                        "VERIFYING",
                        "SUCCESS",
                        "FAILED"
                    ],
                    "type": "string",
                    "description": "Current status of upgrade bundle upload",
                    "title": "Status of upgrade bundle upload"
                },
                "detailed_status": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Detailed status of upgrade bundle upload",
                    "title": "Detailed status of bundle upload"
                },
                "percent": {
                    "readOnly": true,
                    "type": "number",
                    "description": "Percent of bundle uploaded from URL",
                    "title": "Percent of upload completed"
                }
            },
            "title": "Upload status of upgrade bundle"
        },
        "VifAttachmentContext": {
            "x-vmw-nsx-module": "LogicalPort",
            "allOf": [
                {
                    "$ref": "#/definitions/AttachmentContext"
                },
                {
                    "x-vmw-nsx-module": "LogicalPort",
                    "required": [
                        "vif_type"
                    ],
                    "type": "object",
                    "properties": {
                        "vif_type": {
                            "enum": [
                                "PARENT",
                                "CHILD",
                                "INDEPENDENT"
                            ],
                            "type": "string",
                            "description": "Type of the VIF attached to logical port",
                            "title": "Type of the VIF attached to logical port"
                        },
                        "parent_vif_id": {
                            "type": "string",
                            "description": "VIF ID of the parent VIF if vif_type is CHILD",
                            "title": "VIF ID of the parent VIF if vif_type is CHILD"
                        },
                        "app_id": {
                            "type": "string",
                            "description": "An application ID used to identify / look up a child VIF\nbehind a parent VIF. Only effective when vif_type is CHILD.\n",
                            "title": "ID used to identify/look up a child VIF behind a parent VIF"
                        },
                        "traffic_tag": {
                            "format": "int32",
                            "type": "integer",
                            "description": "Current we use VLAN id as the traffic tag.\nOnly effective when vif_type is CHILD.\nEach logical port inside a container must have a\nunique traffic tag. If the traffic_tag is not\nunique, no error is generated, but traffic will\nnot be delivered to any port with a non-unique tag.\n",
                            "title": "Tag used for the traffic between this VIF and parent VIF"
                        },
                        "transport_node_uuid": {
                            "type": "string",
                            "description": "Only effective when vif_type is INDEPENDENT.\nEach logical port inside a bare metal server\nor container must have a transport node UUID.\nWe use transport node ID as transport node UUID.\n",
                            "title": "The UUID of the transport node"
                        }
                    }
                }
            ]
        },
        "TelemetryConfig": {
            "x-vmw-nsx-module": "TelemetryConfig",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "TelemetryConfig",
                    "required": [
                        "schedule_enabled",
                        "ceip_acceptance"
                    ],
                    "type": "object",
                    "properties": {
                        "schedule_enabled": {
                            "type": "boolean",
                            "description": "Enable this to schedule data collection and upload times. If enabled,\nand a schedule is not provided, a default schedule (WEEKLY, Sunday at 2:00 a.m)\nwill be applied.\n",
                            "title": "Flag to indicate if data collection is enabled"
                        },
                        "telemetry_proxy": {
                            "title": "Set config for proxy to be used to send out telemetry data",
                            "description": "Specify the proxy configuration (scheme, server, port) here.",
                            "$ref": "#/definitions/TelemetryProxy"
                        },
                        "ceip_acceptance": {
                            "type": "boolean",
                            "description": "Enable this flag to participate in the Customer Experience Improvement Program.\n",
                            "title": "Flag to indicate if CEIP has been accepted"
                        },
                        "telemetry_schedule": {
                            "title": "Set schedule for when telemetry data should be collected",
                            "description": "Specify one of Daily, Weekly or Monthly schedules.",
                            "$ref": "#/definitions/TelemetrySchedule"
                        },
                        "proxy_enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "Enable this flag to specify a proxy, and provide the proxy settings.",
                            "title": "Flag to indicate if proxy has been configured"
                        }
                    }
                }
            ]
        },
        "UpgradeUnitGroupAggregateInfo": {
            "x-vmw-nsx-module": "Upgrade",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "Upgrade",
                    "required": [
                        "type"
                    ],
                    "type": "object",
                    "properties": {
                        "status": {
                            "readOnly": true,
                            "enum": [
                                "SUCCESS",
                                "FAILED",
                                "IN_PROGRESS",
                                "NOT_STARTED",
                                "PAUSED"
                            ],
                            "type": "string",
                            "description": "Upgrade status of upgrade unit group",
                            "title": "Upgrade status of upgrade unit group"
                        },
                        "upgrade_unit_count": {
                            "readOnly": true,
                            "format": "int32",
                            "type": "integer",
                            "description": "Number of upgrade units in the group",
                            "title": "Count of upgrade units in the group"
                        },
                        "failed_count": {
                            "readOnly": true,
                            "format": "int32",
                            "type": "integer",
                            "description": "Number of nodes in the upgrade unit group that failed upgrade",
                            "title": "Number of nodes in the upgrade unit group that failed upgrade"
                        },
                        "type": {
                            "readOnly": false,
                            "type": "string",
                            "description": "Component type",
                            "title": "Component type"
                        },
                        "percent_complete": {
                            "readOnly": true,
                            "type": "number",
                            "description": "Indicator of upgrade progress in percentage",
                            "title": "Indicator of upgrade progress in percentage"
                        },
                        "enabled": {
                            "default": true,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Flag to indicate whether upgrade of this group is enabled or not",
                            "title": "Flag to indicate whether upgrade of this group is enabled or not"
                        },
                        "upgrade_units": {
                            "description": "List of upgrade units in the group",
                            "title": "List of upgrade units in the group",
                            "items": {
                                "$ref": "#/definitions/UpgradeUnit"
                            },
                            "readOnly": false,
                            "maxItems": 100,
                            "type": "array"
                        },
                        "extended_configuration": {
                            "description": "Extended configuration for the group",
                            "title": "Extended configuration for the group",
                            "items": {
                                "$ref": "#/definitions/KeyValuePair"
                            },
                            "readOnly": false,
                            "maxItems": 100,
                            "type": "array"
                        },
                        "parallel": {
                            "default": true,
                            "readOnly": false,
                            "type": "boolean",
                            "description": "Upgrade method to specify whether the upgrade is to be performed in parallel or serially",
                            "title": "Upgrade method to specify whether the upgrade is to be performed in parallel or serially"
                        }
                    }
                }
            ]
        },
        "IPPrefixListListResult": {
            "x-vmw-nsx-module": "Routing",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Routing",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/IPPrefixList"
                            },
                            "type": "array",
                            "description": "Paginated list of IPPrefixLists",
                            "title": "Paginated list of IPPrefixLists"
                        }
                    }
                }
            ]
        },
        "CopyFromRemoteFileProperties": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/CopyRemoteFileProperties"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "required": [
                        "protocol"
                    ],
                    "type": "object",
                    "properties": {
                        "protocol": {
                            "title": "Protocol to use to copy file",
                            "description": "Protocol to use to copy file",
                            "$ref": "#/definitions/Protocol"
                        }
                    }
                }
            ]
        },
        "LbFastUdpProfile": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbAppProfile"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "idle_timeout": {
                            "description": "Though UDP is a connectionless protocol, for the purposes of load\nbalancing, all UDP packets with the same flow signature (source and\ndestination IP/ports and IP protocol) received within the idle timeout\nperiod are considered to belong to the same connection and are sent to\nthe same backend server. If no packets are received for idle timeout\nperiod, the connection (association between flow signature and the\nselected server) is cleaned up.\n",
                            "title": "UDP idle timeout in seconds",
                            "default": 300,
                            "format": "int64",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "flow_mirroring_enabled": {
                            "default": false,
                            "type": "boolean",
                            "description": "If flow mirroring is enabled, all the flows to the bounded virtual\nserver are mirrored to the standby node.\n",
                            "title": "flow mirroring enabled flag"
                        }
                    }
                }
            ]
        },
        "BaseHostSwitchProfile": {
            "x-vmw-nsx-module": "BaseHostSwitchProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "discriminator": "resource_type",
                    "x-vmw-nsx-module": "BaseHostSwitchProfile",
                    "required": [
                        "resource_type"
                    ],
                    "type": "object",
                    "properties": {
                        "required_capabilities": {
                            "items": {
                                "type": "string"
                            },
                            "readOnly": true,
                            "type": "array"
                        },
                        "resource_type": {
                            "description": "Supported HostSwitch profiles.",
                            "enum": [
                                "UplinkHostSwitchProfile",
                                "LldpHostSwitchProfile",
                                "NiocProfile",
                                "ExtraConfigHostSwitchProfile"
                            ],
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "ManagementNodeAggregateInfo": {
            "x-vmw-nsx-module": "ClusterManagement",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseNodeAggregateInfo"
                },
                {
                    "x-vmw-nsx-module": "ClusterManagement",
                    "type": "object",
                    "properties": {
                        "transport_nodes_connected": {
                            "readOnly": true,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int64"
                        },
                        "role_config": {
                            "readOnly": true,
                            "$ref": "#/definitions/ManagementClusterRoleConfig"
                        }
                    }
                }
            ]
        },
        "HttpProtocol": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Protocol"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "type": "object",
                    "properties": {
                        "authentication_scheme": {
                            "title": "Scheme to authenticate if required",
                            "description": "Scheme to authenticate if required",
                            "$ref": "#/definitions/BasicAuthenticationScheme"
                        }
                    }
                }
            ]
        },
        "LldpHostSwitchProfile": {
            "x-vmw-nsx-module": "LldpHostSwitchProfile",
            "allOf": [
                {
                    "$ref": "#/definitions/BaseHostSwitchProfile"
                },
                {
                    "required": [
                        "send_enabled"
                    ],
                    "x-vmw-nsx-module": "LldpHostSwitchProfile",
                    "type": "object",
                    "properties": {
                        "send_enabled": {
                            "type": "boolean",
                            "description": "Enabled or disabled sending LLDP packets",
                            "title": "Enabled or disabled sending LLDP packets"
                        }
                    }
                }
            ],
            "description": "Host Switch for LLDP",
            "title": "Host Switch for LLDP"
        },
        "EffectiveMemberResourceListResult": {
            "x-vmw-nsx-module": "NSGroup",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "NSGroup",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "title": "effective members resource list results",
                                "$ref": "#/definitions/ResourceReference"
                            },
                            "type": "array",
                            "description": "Paged Collection of resources which are the effective members of an NSGroup.",
                            "title": "Paged Collection of resources which are the effective members of an NSGroup."
                        }
                    }
                }
            ]
        },
        "AddClusterNodeSpec": {
            "x-vmw-nsx-module": "ClusterManagement",
            "type": "object",
            "properties": {
                "external_id": {
                    "readOnly": false,
                    "type": "string",
                    "description": "External identifier of the node",
                    "title": "External identifier of the node"
                },
                "controller_role_config": {
                    "$ref": "#/definitions/AddControllerNodeSpec"
                },
                "display_name": {
                    "type": "string",
                    "description": "Display name for the node",
                    "title": "Display name for the node"
                },
                "mgr_role_config": {
                    "$ref": "#/definitions/AddManagementNodeSpec"
                }
            }
        },
        "LbSessionCookieTime": {
            "x-vmw-nsx-module": "LoadBalancer",
            "allOf": [
                {
                    "$ref": "#/definitions/LbCookieTime"
                },
                {
                    "x-vmw-nsx-module": "LoadBalancer",
                    "type": "object",
                    "properties": {
                        "cookie_max_idle": {
                            "description": "Instead of using HTTP Cookie max-age and relying on client to expire\nthe cookie, max idle time and/or max lifetime of the cookie can be used.\nMax idle time, if configured, specifies the maximum interval the cookie\nis valid for from the last time it was seen in a request.\nIt is available for insert mode.\n",
                            "format": "int64",
                            "title": "session cookie max idle time in seconds",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "cookie_max_life": {
                            "description": "Max life time, if configured, specifies the maximum interval the cookie\nis valid for from the first time the cookie was seen in a request.\nIt is available for insert mode.\n",
                            "format": "int64",
                            "title": "session cookie max lifetime in seconds",
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                }
            ]
        },
        "FileTransferAuthenticationScheme": {
            "description": "Remote server authentication details",
            "title": "Remote server authentication details",
            "required": [
                "username",
                "scheme_name"
            ],
            "x-vmw-nsx-module": "BackupConfiguration",
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "User name to authenticate with",
                    "title": "User name to authenticate with"
                },
                "scheme_name": {
                    "enum": [
                        "PASSWORD"
                    ],
                    "type": "string",
                    "description": "Authentication scheme name",
                    "title": "Authentication scheme name"
                },
                "password": {
                    "type": "string",
                    "description": "Password to authenticate with",
                    "title": "Password to authenticate with"
                }
            }
        },
        "LoadBalancerAllocationPool": {
            "x-vmw-nsx-module": "LogicalRouter",
            "allOf": [
                {
                    "$ref": "#/definitions/EdgeClusterMemberAllocationPool"
                },
                {
                    "x-vmw-nsx-module": "LogicalRouter",
                    "required": [
                        "allocation_size"
                    ],
                    "type": "object",
                    "properties": {
                        "allocation_size": {
                            "default": "SMALL",
                            "enum": [
                                "SMALL",
                                "MEDIUM",
                                "LARGE"
                            ],
                            "type": "string",
                            "description": "To address varied customer performance and scalability requirements,\ndifferent sizes for load balancer service are supported: SMALL, MEDIUM\nand LARGE, each with its own set of resource and performance. Specify\nsize of load balancer service which you will bind to TIER1 router.\n",
                            "title": "Size of load balancer service"
                        }
                    }
                }
            ]
        },
        "HostSwitchProfileTypeIdEntry": {
            "x-vmw-nsx-module": "BaseHostSwitchProfile",
            "required": [
                "value"
            ],
            "type": "object",
            "properties": {
                "value": {
                    "readOnly": false,
                    "type": "string",
                    "description": "key value"
                },
                "key": {
                    "description": "Supported HostSwitch profiles.",
                    "enum": [
                        "UplinkHostSwitchProfile",
                        "LldpHostSwitchProfile",
                        "NiocProfile",
                        "ExtraConfigHostSwitchProfile"
                    ],
                    "type": "string"
                }
            }
        },
        "TypeGroup": {
            "x-vmw-nsx-module": "Search",
            "required": [
                "count",
                "group_by_field_value"
            ],
            "type": "object",
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer",
                    "description": "Total count per group by field value",
                    "title": "Total count per group by field value"
                },
                "hits": {
                    "items": {
                        "type": "object"
                    },
                    "type": "array",
                    "description": "Hits per resource type",
                    "title": "Hits per resource type"
                },
                "group_by_field_value": {
                    "type": "string",
                    "description": "Group By Field Value",
                    "title": "Group By Field Value"
                }
            }
        },
        "LogicalRouterPortArpTable": {
            "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
                    "required": [
                        "logical_router_port_id"
                    ],
                    "type": "object",
                    "properties": {
                        "last_update_timestamp": {
                            "description": "Timestamp when the data was last updated; unset if data source has never updated the data.",
                            "format": "int64",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "results": {
                            "items": {
                                "$ref": "#/definitions/LogicalRouterPortArpEntry"
                            },
                            "type": "array"
                        },
                        "logical_router_port_id": {
                            "type": "string",
                            "description": "The ID of the logical router port",
                            "title": "The ID of the logical router port"
                        }
                    }
                }
            ]
        },
        "QosBaseRateShaper": {
            "description": "A shaper configuration entry that specifies type and metrics",
            "title": "A shaper configuration entry that specifies type and metrics",
            "required": [
                "enabled"
            ],
            "x-vmw-nsx-module": "QosSwitchingProfile",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "resource_type": {
                    "default": "IngressRateShaper",
                    "enum": [
                        "IngressRateShaper",
                        "IngressBroadcastRateShaper",
                        "EgressRateShaper"
                    ],
                    "type": "string"
                }
            }
        },
        "DonutSection": {
            "description": "Represents high level logical grouping of portions or segments of a donut / stats chart.",
            "title": "Section of a donut or stats chart",
            "required": [
                "parts"
            ],
            "x-vmw-nsx-module": "NsxDashboard",
            "type": "object",
            "properties": {
                "row_list_field": {
                    "maxLength": 1024,
                    "type": "string",
                    "description": "Field of the root of the api result set for forming parts.",
                    "title": "Field from which parts of the donut or stats chart are formed"
                },
                "parts": {
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/DonutPart"
                    },
                    "type": "array",
                    "description": "Array of portions or parts of the donut or stats chart.",
                    "title": "Parts of a donut / stats chart"
                },
                "template": {
                    "default": false,
                    "type": "boolean",
                    "description": "If true, the section will be appled as template for forming parts. Only one part will be formed from each element of 'row_list_field'.",
                    "title": "Template, if any, for automatically forming the donut or stats parts"
                }
            }
        },
        "StructuredData": {
            "description": "Structured data entry in RFC5424 log format",
            "title": "Structured data entry in RFC5424 log format",
            "required": [
                "audit",
                "comp",
                "subcomp"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "audit": {
                    "type": "string",
                    "description": "Audit flag of the log",
                    "title": "Audit flag of the log"
                },
                "username": {
                    "type": "string",
                    "description": "Username value of the log",
                    "title": "Username value of the log"
                },
                "ereq_id": {
                    "type": "string",
                    "description": "External request Id value of the log",
                    "title": "External request Id value of the log"
                },
                "level": {
                    "type": "string",
                    "description": "Level value of the log",
                    "title": "Level value of the log"
                },
                "comp": {
                    "type": "string",
                    "description": "Component value of the log",
                    "title": "Component value of the log"
                },
                "error_code": {
                    "type": "string",
                    "description": "Error Code value of the log",
                    "title": "Error Code value of the log"
                },
                "s2comp": {
                    "type": "string",
                    "description": "Sub-subcomponent value of the log",
                    "title": "Sub-subcomponent value of the log"
                },
                "req_id": {
                    "type": "string",
                    "description": "Request Id value of the log",
                    "title": "Request Id value of the log"
                },
                "ent_id": {
                    "type": "string",
                    "description": "Entity Id value of the log",
                    "title": "Entity Id value of the log"
                },
                "security": {
                    "type": "string",
                    "description": "Security flag of the log",
                    "title": "Security flag of the log"
                },
                "subcomp": {
                    "type": "string",
                    "description": "Subcomponent value of the log",
                    "title": "Subcomponent value of the log"
                }
            }
        },
        "MultiWidgetConfiguration": {
            "x-vmw-nsx-module": "NsxDashboard",
            "allOf": [
                {
                    "$ref": "#/definitions/WidgetConfiguration"
                },
                {
                    "required": [
                        "widgets"
                    ],
                    "x-vmw-nsx-module": "NsxDashboard",
                    "type": "object",
                    "properties": {
                        "widgets": {
                            "description": "Array of widgets that are part of the multi-widget.",
                            "title": "Widgets",
                            "minItems": 1,
                            "items": {
                                "$ref": "#/definitions/WidgetItem"
                            },
                            "maxItems": 2,
                            "type": "array"
                        },
                        "navigation": {
                            "maxLength": 1024,
                            "type": "string",
                            "description": "Hyperlink of the specified UI page that provides details.",
                            "title": "Navigation to a specified UI page"
                        }
                    }
                }
            ],
            "description": "Combines two or more widgetconfigurations into a multi-widget",
            "title": "Multi-Widget"
        },
        "FabricModuleListResult": {
            "x-vmw-nsx-module": "HostPrepServiceFabric",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "HostPrepServiceFabric",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/FabricModule"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "Fabric Module list results",
                            "title": "Fabric Module list results"
                        }
                    }
                }
            ],
            "description": "Fabric Module list result",
            "title": "Fabric Module list result"
        },
        "CsvListResult": {
            "x-vmw-nsx-module": "CsvTypes",
            "type": "object",
            "description": "Base type for CSV result.",
            "properties": {
                "file_name": {
                    "type": "string",
                    "description": "File name set by HTTP server if API  returns CSV result as a file.",
                    "title": "File name"
                }
            }
        },
        "ScpProtocol": {
            "x-vmw-nsx-module": "MISSING_MODULE",
            "allOf": [
                {
                    "$ref": "#/definitions/Protocol"
                },
                {
                    "x-vmw-nsx-module": "MISSING_MODULE",
                    "required": [
                        "ssh_fingerprint",
                        "authentication_scheme"
                    ],
                    "type": "object",
                    "properties": {
                        "ssh_fingerprint": {
                            "type": "string",
                            "description": "SSH fingerprint of server",
                            "title": "SSH fingerprint of server"
                        },
                        "authentication_scheme": {
                            "title": "Scheme to authenticate if required",
                            "description": "Scheme to authenticate if required",
                            "$ref": "#/definitions/PasswordAuthenticationScheme"
                        }
                    }
                }
            ]
        },
        "LogicalPortMirrorSource": {
            "x-vmw-nsx-module": "PortMirroring",
            "allOf": [
                {
                    "$ref": "#/definitions/MirrorSource"
                },
                {
                    "x-vmw-nsx-module": "PortMirroring",
                    "required": [
                        "port_ids"
                    ],
                    "type": "object",
                    "properties": {
                        "port_ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "Source logical port identifier list",
                            "title": "Source logical port identifier list"
                        }
                    }
                }
            ]
        },
        "DhcpIpPoolListResult": {
            "x-vmw-nsx-module": "Dhcp",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "Dhcp",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/DhcpIpPool"
                            },
                            "type": "array",
                            "description": "paginated list of dhcp ip pools",
                            "title": "paginated list of dhcp ip pools"
                        }
                    }
                }
            ]
        },
        "IpAssignmentSpec": {
            "description": "Abstract base type for specification of IPs to be used with host switch virtual tunnel endpoints",
            "title": "Abstract base type for specification of IPs to be used with host switch virtual tunnel endpoints",
            "required": [
                "resource_type"
            ],
            "discriminator": "resource_type",
            "x-vmw-nsx-module": "TransportNode",
            "type": "object",
            "properties": {
                "resource_type": {
                    "enum": [
                        "StaticIpPoolSpec",
                        "StaticIpListSpec",
                        "AssignedByDhcp",
                        "StaticIpMacListSpec"
                    ],
                    "type": "string"
                }
            }
        },
        "LogicalRouterPortCounters": {
            "x-vmw-nsx-module": "AggSvcLogicalRouterPort",
            "type": "object",
            "properties": {
                "dropped_packets": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The number of dropped packets",
                    "title": "The number of dropped packets"
                },
                "total_bytes": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of bytes",
                    "title": "The total number of bytes"
                },
                "total_packets": {
                    "format": "int64",
                    "type": "integer",
                    "description": "The total number of packets",
                    "title": "The total number of packets"
                }
            }
        },
        "FabricModule": {
            "x-vmw-nsx-module": "HostPrepServiceFabric",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "required": [
                        "deployment_specs",
                        "current_version",
                        "fabric_module_name"
                    ],
                    "x-vmw-nsx-module": "HostPrepServiceFabric",
                    "type": "object",
                    "properties": {
                        "deployment_specs": {
                            "items": {
                                "$ref": "#/definitions/DeploymentSpec"
                            },
                            "type": "array",
                            "description": "List of deployment specs",
                            "title": "List of deployment specs"
                        },
                        "current_version": {
                            "type": "string",
                            "description": "current version on for the host prep fabric module.",
                            "title": "current version on for the host prep fabric module."
                        },
                        "fabric_module_name": {
                            "type": "string",
                            "description": "Name of the fabric module",
                            "title": "Name of the fabric module"
                        },
                        "source_authentication_mode": {
                            "default": "NO_AUTHENTICATION",
                            "enum": [
                                "NO_AUTHENTICATION",
                                "BASIC_AUTHENTICATION",
                                "MARKET_PLACE"
                            ],
                            "type": "string",
                            "description": "This enum specifies the authentication supported\nat source i.e. for downloading VM.\nIf this attribute is not provided, then NO_AUTHENTICATION\nwill be considered.\n",
                            "title": "Authentication needed by fabric module at source"
                        },
                        "custom_data": {
                            "items": {
                                "$ref": "#/definitions/StringMapEntry"
                            },
                            "type": "array",
                            "description": "Slot for storing consumer data (fabric module's specific\ndata common across all the realizations of the fabric\nmodule)\n",
                            "title": "Customer data"
                        }
                    }
                }
            ],
            "description": "Fabric module contains list of deployment specs and current version.\nEach deployment spec is a different version of same fabric module.\nIf fabric module have two deployment specs or say two different versions then\ncurrent version will specify which version needs to be installed.\n",
            "title": "Fabric Module contains list of deployment specs and current version."
        },
        "ClusterBackupInfoListResult": {
            "x-vmw-nsx-module": "ClusterRestore",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "ClusterRestore",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/ClusterBackupInfo"
                            },
                            "readOnly": true,
                            "type": "array",
                            "description": "List of timestamps of backed-up cluster files",
                            "title": "List of timestamps of backed-up cluster files"
                        }
                    }
                }
            ]
        },
        "MacPool": {
            "x-vmw-nsx-module": "MACAM",
            "description": "A collection of ranges of MAC addresses",
            "allOf": [
                {
                    "$ref": "#/definitions/ManagedResource"
                },
                {
                    "x-vmw-nsx-module": "MACAM",
                    "required": [
                        "ranges"
                    ],
                    "type": "object",
                    "properties": {
                        "ranges": {
                            "items": {
                                "$ref": "#/definitions/MacRange"
                            },
                            "type": "array",
                            "description": "Array of ranges for MAC addresses",
                            "title": "Array of ranges for MAC addresses"
                        }
                    }
                }
            ]
        },
        "DhcpHeader": {
            "x-vmw-nsx-module": "Traceflow",
            "type": "object",
            "properties": {
                "op_code": {
                    "default": "BOOTREQUEST",
                    "enum": [
                        "BOOTREQUEST",
                        "BOOTREPLY"
                    ],
                    "type": "string",
                    "description": "This is used to specify the general type of message. A client sending request to a server uses an op code of BOOTREQUEST, while a server replying uses an op code of BOOTREPLY.",
                    "title": "Message op code / message type"
                }
            }
        },
        "BatchResponseItem": {
            "description": "A single respose in a list of batched responses",
            "title": "A single respose in a list of batched responses",
            "required": [
                "code"
            ],
            "x-vmw-nsx-module": "Common",
            "type": "object",
            "properties": {
                "body": {
                    "type": "object",
                    "description": "object returned by api",
                    "title": "object returned by api"
                },
                "headers": {
                    "type": "object",
                    "description": "The headers returned by the API call",
                    "title": "object returned by api"
                },
                "code": {
                    "format": "int64",
                    "type": "integer",
                    "description": "http status code",
                    "title": "object returned by api"
                }
            }
        },
        "MigrationFeedbackRequest": {
            "x-vmw-nsx-module": "Migration",
            "type": "object",
            "description": "Detailed feedback requests from the migration tool where user input is required.",
            "properties": {
                "vertical": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Functional area that this query falls into.",
                    "title": "Functional area for the feedback query"
                },
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier of the feedback request.",
                    "title": "UUID of the feedback request"
                },
                "message": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Detailed feedback request with options.",
                    "title": "Content of feedback request"
                },
                "suggested_action": {
                    "readOnly": true,
                    "type": "string",
                    "description": "One of the suggestion from the options in feedback request.",
                    "title": "Suggested action for feedback request"
                },
                "object_id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Identifier of the object for which feedback is requested.",
                    "title": "UUID of the object"
                },
                "sub_vertical": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Functional sub-area that this query falls into.",
                    "title": "Functional sub-area for the feedback query"
                }
            },
            "title": "Feedback detail required for Migration"
        },
        "RoleListResult": {
            "x-vmw-nsx-module": "AAA",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "x-vmw-nsx-module": "AAA",
                    "required": [
                        "results"
                    ],
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/Role"
                            },
                            "type": "array",
                            "description": "List results",
                            "title": "List results"
                        }
                    }
                }
            ]
        },
        "ReportAppResultsForVmsRequestParameters": {
            "x-vmw-nsx-module": "AppDiscovery",
            "type": "object",
            "description": "Parameters to query results of an application discovery session. It has a list of vm ids.\n",
            "properties": {
                "vm_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Vm external Ids",
                    "title": "Vm external Ids"
                }
            },
            "title": "Parameters to request results of an application discovery session"
        },
        "NodeAggregateInfoListResult": {
            "x-vmw-nsx-module": "NsxQuery",
            "allOf": [
                {
                    "$ref": "#/definitions/ListResult"
                },
                {
                    "required": [
                        "results"
                    ],
                    "x-vmw-nsx-module": "NsxQuery",
                    "type": "object",
                    "properties": {
                        "results": {
                            "items": {
                                "$ref": "#/definitions/NodeAggregateInfo"
                            },
                            "type": "array",
                            "description": "Node Aggregate Info Results",
                            "title": "Node Aggregate Info Results"
                        }
                    }
                }
            ],
            "description": "Node aggregate state list result",
            "title": "Node aggregate state list result"
        },
        "WeeklyBackupSchedule": {
            "x-vmw-nsx-module": "BackupConfiguration",
            "allOf": [
                {
                    "$ref": "#/definitions/BackupSchedule"
                },
                {
                    "required": [
                        "days_of_week",
                        "minute_of_day",
                        "hour_of_day"
                    ],
                    "x-vmw-nsx-module": "BackupConfiguration",
                    "type": "object",
                    "properties": {
                        "days_of_week": {
                            "description": "Days of week when backup is taken. 0 - Sunday, 1 - Monday, 2 - Tuesday, 3 - Wednesday ...",
                            "title": "Days of week when backup is taken. 0 - Sunday, 1 - Monday, 2 - Tuesday, 3 - Wednesday ...",
                            "minItems": 1,
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "maxItems": 7,
                            "uniqueItems": true,
                            "type": "array"
                        },
                        "minute_of_day": {
                            "description": "Time of day when backup is taken",
                            "format": "int64",
                            "title": "Time of day when backup is taken",
                            "maximum": 59,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "hour_of_day": {
                            "description": "Time of day when backup is taken",
                            "format": "int64",
                            "title": "Time of day when backup is taken",
                            "maximum": 23,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                }
            ],
            "description": "Schedule to specify day of the week and time to take automated backup",
            "title": "Schedule to specify day of the week and time to take automated backup"
        },
        "NodeAuthProviderVidmProperties": {
            "description": "Node AAA provider vIDM properties",
            "title": "Node AAA provider vIDM properties",
            "required": [
                "node_host_name",
                "host_name",
                "client_id",
                "thumbprint"
            ],
            "x-vmw-nsx-module": "MISSING_MODULE",
            "type": "object",
            "properties": {
                "host_name": {
                    "type": "string",
                    "description": "Fully Qualified Domain Name(FQDN) of vIDM",
                    "title": "Fully Qualified Domain Name(FQDN) of vIDM"
                },
                "client_id": {
                    "type": "string",
                    "description": "vIDM client id",
                    "title": "vIDM client id"
                },
                "thumbprint": {
                    "type": "string",
                    "description": "Hexadecimal SHA256 hash of the vIDM server's X.509 certificate",
                    "title": "vIDM certificate thumbprint"
                },
                "client_secret": {
                    "type": "string",
                    "description": "vIDM client secret",
                    "title": "vIDM client secret"
                },
                "node_host_name": {
                    "type": "string",
                    "description": "host name to use when creating the redirect URL for clients to follow after authenticating to vIDM",
                    "title": "host name of the node redirected to"
                },
                "vidm_enable": {
                    "type": "boolean",
                    "description": "vIDM enable flag",
                    "title": "vIDM enable flag"
                }
            }
        }
    },
    "parameters": {},
    "responses": {
        "NotExtended": {
            "description": "Not Extended",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "RequestTimeout": {
            "description": "Request Timeout",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "RequestEntityTooLarge": {
            "description": "Request Entity Too Large",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "EnhanceYourCalm": {
            "description": "Enhance Your Calm",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "NetworkAuthenticationRequired": {
            "description": "Network Authentication Required",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "Conflict": {
            "description": "Conflict",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "ExpectationFailed": {
            "description": "Expectation Failed",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "PaymentRequired": {
            "description": "Payment Required",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "PreconditionRequired": {
            "description": "Precondition Required",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "BandwidthLimitExceeded": {
            "description": "Bandwidth Limit Exceeded",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "ReservedforWebDAV": {
            "description": "Reserved for WebDAV",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "RequestedRangeNotSatisfiable": {
            "description": "Requested Range Not Satisfiable",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "InsufficientStorage": {
            "description": "Insufficient Storage",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "NotFound": {
            "description": "Not Found",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "InternalServerError": {
            "description": "Internal Server Error",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "ClientClosedRequest": {
            "description": "Client Closed Request",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "UpgradeRequired": {
            "description": "Upgrade Required",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "MethodNotAllowed": {
            "description": "Method Not Allowed",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "LengthRequired": {
            "description": "Length Required",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "UnavailableForLegalReasons": {
            "description": "Unavailable For Legal Reasons",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "Iamateapot": {
            "description": "I am a teapot",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "FailedDependency": {
            "description": "Failed Dependency",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "GatewayTimeout": {
            "description": "Gateway Timeout",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "NoResponse": {
            "description": "No Response",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "ServiceUnavailable": {
            "description": "Service Unavailable",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "UnsupportedMediaType": {
            "description": "Unsupported Media Type",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "Locked": {
            "description": "Locked",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "BadGateway": {
            "description": "Bad Gateway",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "BadRequest": {
            "description": "Bad Request",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "NotAcceptable": {
            "description": "Not Acceptable",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "HTTPVersionNotSupported": {
            "description": "HTTP Version Not Supported",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "UnprocessableEntity": {
            "description": "Unprocessable Entity",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "RetryWith": {
            "description": "Retry With",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "NotImplemented": {
            "description": "Not Implemented",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "Request-URITooLong": {
            "description": "Request-URI Too Long",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "Unauthorized": {
            "description": "Unauthorized",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "PreconditionFailed": {
            "description": "Precondition Failed",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "LoopDetected": {
            "description": "Loop Detected",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "Gone": {
            "description": "Gone",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "Forbidden": {
            "description": "Forbidden",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "TooManyRequests": {
            "description": "Too Many Requests",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "BlockedbyWindowsParentalControls": {
            "description": "Blocked by Windows Parental Controls",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "ProxyAuthenticationRequired": {
            "description": "Proxy Authentication Required",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "VariantAlsoNegotiates": {
            "description": "Variant Also Negotiates",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        },
        "RequestHeaderFieldsTooLarge": {
            "description": "Request Header Fields Too Large",
            "schema": {
                "$ref": "#/definitions/ApiError"
            }
        }
    }
}