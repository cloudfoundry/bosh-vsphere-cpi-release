$LOAD_PATH.unshift(File.join(__dir__, 'lib'))

require 'open3'
require 'time'
require 'shellwords'

require 'ci/pipeline'
require 'ci/pool'
require 'ci/target'

file 'pipeline.yml' => FileList['pipeline/*.yml.erb', 'config.rb'] do |t|
  $pipeline = Pipeline.new
  load 'config.rb'
  File.write(t.name, $pipeline.render)
end

desc 'Create or update the pipeline configuration'
task :pipeline, [:name] => 'pipeline.yml' do |t, args|
  # Default to the unexpired target expiring furthest in the future known to
  # `fly`
  concourse_target = ENV.fetch('CONCOURSE') do
    authorized = Target.list.select { |t| t.expiry > Time.now }
    unless (target = authorized.max_by(&:expiry))
      raise 'No Concourse target specified and all targets are expired'
    end

    target.name
  end

  # Get the git branch name
  branch = ENV.fetch('BRANCH') { `git symbolic-ref -q --short HEAD`.strip }

  # Set the pipeline name to be vsphere-cpi when on the master branch or
  # vcpi-#{branch} when on another branch. If the branch name is
  # indeterminate (because HEAD is detached) then the pipeline name must be
  # provided as the name argument to this task.
  args.with_defaults(name: ENV.fetch('PIPELINE') do
    raise 'Pipeline name must be specified if HEAD is detached' if branch.empty?

    branch == 'master' ? 'vsphere-cpi' : "vcpi-#{branch}"
  end)

  # Default to master if the branch name is indeterminate (because HEAD is
  # detached).
  branch = !branch.empty? ? branch : 'master'

  sh '/bin/bash', '-ec', [
    "fly -t #{concourse_target.shellescape} set-pipeline",
    '--team main',
    "-p #{args.name.shellescape}",
    "-c #{t.prerequisites.first.shellescape}",
    "-v vcpi_branch=#{branch.shellescape}",
    # Set the trigger for delivery job based on which branch it is.
    # Only master branch should trigger delivery jobs.
    "--yaml-var trigger_delivery_job=#{branch == 'master'}"
  ].join(' ')
end

desc 'Create or update the certification pipeline configuration'
task 'pipeline:certification', [:name] => 'certifications/pipeline.yml' do |t, args|
  # Default to the unexpired target expiring furthest in the future known to
  # `fly`
  concourse_target = ENV.fetch('CONCOURSE') do
    authorized = Target.list.select { |t| t.expiry > Time.now }
    unless (target = authorized.max_by(&:expiry))
      raise 'No Concourse target specified and all targets are expired'
    end

    target.name
  end

  # Ensure that the remote host is set from DBCHOST
  dbc_host = ENV.fetch('DBCHOST') do
    raise 'DBCHOST must be set to the unqualified hostname of your DBC host'
  end
  dbc_fqdn = "#{dbc_host}.eng.vmware.com"

  # Get the remote user name from DBCUSER, the SSH configuration for DBCHOST, or
  # the current user name
  dbc_user = ENV.fetch('DBCUSER') do
    output, _, status = Open3.capture3('ssh', '-G', dbc_fqdn)
    break nil unless status.success?

    record = output.each_line(chomp: true).map do |text|
      text.split(nil, 2)
    end.find { |option, _| option == 'user' }
    break record[1] unless record.nil?
  end || (require 'etc'; Etc.getpwuid.name)

  # Find the SSH identity file to use from the SSH configuration for dbc_host
  output, _, status = Open3.capture3('ssh', '-G', dbc_fqdn)
  raise "Unable to get SSH configuration for #{dbc_host}" unless status.success?

  dbc_ssh_key =
    output.each_line(chomp: true).map do |text|
      text.split(nil, 2)
    end.find do |option, v|
      option == 'identityfile' && File.exist?(File.expand_path(v))
    end or raise "No SSH identity file available for #{dbc_host}"

  dbc_ssh_key = File.expand_path(dbc_ssh_key[1])

  # Get the git branch name
  branch = ENV.fetch('BRANCH') { `git symbolic-ref -q --short HEAD`.strip }

  # Set the pipeline name to be vSphere-CPI when on the master branch or
  # vSphere-CPI-#{branch} when on another branch. If the branch name is
  # indeterminate (because HEAD is detached) then the pipeline name must be
  # provided as the name argument to this task.
  args.with_defaults(name: ENV.fetch('PIPELINE') do
    raise 'Pipeline name must be specified if HEAD is detached' if branch.empty?

    if branch == 'master'
      'vSphere-CPI-Certification'
    else
      "vcpi-#{branch}-certification"
    end
  end)

  # Default to master if the branch name is indeterminate (because HEAD is
  # detached).
  branch = !branch.empty? ? branch : 'master'

  sh '/bin/bash', '-ec', [
    "fly -t #{concourse_target.shellescape} set-pipeline",
    "-p #{args.name.shellescape}",
    "-c #{t.prerequisites.first.shellescape}",
    "-v vcpi_branch=#{branch.shellescape}",
    "-v dbc_host=#{dbc_host.shellescape}",
    "-v dbc_user=#{dbc_user.shellescape}",
    "-v dbc_key=\"$(cat #{dbc_ssh_key.shellescape})\"",
    '-l <(secret show ~/.dot/vcpi-ci.gpg)'
  ].join(' ')
end

task default: :pipeline
